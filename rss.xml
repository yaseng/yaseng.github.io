<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaseng</title>
  
  <subtitle>Bypass the token</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="http://yaseng.org/"/>
  <updated>2020-05-10T14:36:15.359Z</updated>
  <id>http://yaseng.org/</id>
  
  <author>
    <name>Yaseng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《锁王创造营》第一关：初出茅庐</title>
    <link href="http://yaseng.org/king-of-lock-1.html"/>
    <id>http://yaseng.org/king-of-lock-1.html</id>
    <published>2020-05-07T16:00:00.000Z</published>
    <updated>2020-05-10T14:36:15.359Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/0002.jpg" alt=""></p><p>最近大热的网播剧《鬼吹灯之龙岭迷窟》着实让屏幕前的观众跟着过了一把古墓闯关寻宝的瘾，剧中主角胡八一、王胖子、shirley杨强强联手，带领一众人马凭着生平学识积累、过人的胆识以及精良的装备，破解重重机关锁制，最终取得龙骨天书，获取破解诅咒的关键线索。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/0001.jpg" alt=""></p><p>从古至今，摸金校尉与墓主人开展了无数次生死较量。地上的梁上君子们也没闲着，从最早的溜门撬锁，到如今的锡纸开锁，对锁具的攻防就从未停止过。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/0%E9%94%81%E7%8E%8B.jpg" alt=""></p><p>如今，物联网技术迅速发展，作为新时代守护老百姓生命财产的重要一环，智能锁已成为智能家居市场上发展最为迅速的品类之一。有研究表明，随着市场的需要，智能锁所占的份额逐年增加，大有超过传统锁具，成为主流的趋势。不过就目前而言，智能锁暴露的安全问题比传统机械锁更大，因为，机械锁具的攻击点主要在锁芯和锁体结构，而智能锁除以上提到的两点之外，还涉及到云端通信、移动端、集成电路模块、指纹、声纹、图像识别、RFID 等关键技术，所以暴露的攻击点更多、攻击方式更为隐蔽，造成的危害可能更大。此外，许多智能锁厂商并非由传统锁具厂商转型过来，在锁具生产加工制造上，更容易忽略某些机械和设计结构上的物理缺陷，这也是智能锁在安全问题上必须要重视的地方。</p><p>正因智能锁具已成为人们现实生活中新一代的保护神，其安全可靠性就是其生命力所在，不安全锁具无疑是给生活留下了极大的安全隐患。数智安全研究院对锁具安全研究着手多年，参与过很多智能锁具安全方面的会议、沙龙等，在锁具安全研究方面也有了些许成果。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/1.png" alt=""></p><p>(破解某款智能锁)</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/2.png" alt=""></p><p>(线下沙龙锁具安全展台)</p><p>近日，数智安全实验室的小伙伴本着猎奇心理参与了Microcorruption发起的一个智能锁破解闯关的游戏，18道关卡，历时五天，最终全部破解，由于游戏关卡设置的新颖以及破解过程的种种趣味体验，也为了让更多志同道合的朋友更好的了解智能锁具安全攻防，我们决定在每周更新的内容里增加一个<strong>《锁王创造营》系列，</strong>每期发布一些智能锁具安全方面的知识以及一道关卡的破解记录，感兴趣的小伙伴可以先不参考我们的思路，自己尝试着破解看看哦！</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/0003.png" alt=""></p><p>（闯关开始啦，快速转动你们的小脑筋！！）</p><h2 id="Microcorruption-CTF"><a href="#Microcorruption-CTF" class="headerlink" title="Microcorruption CTF"></a>Microcorruption CTF</h2><p><a href="https://microcorruption.com/" target="_blank" rel="noopener">Microcorruption</a>是Matasano Security 与 Square制作的一款智能锁在线CTF”游戏“，该CTF专注于嵌入式安全和挑战玩家逆向工程的一个虚构“Lockitall LockIT Pro”锁系统。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/3.png" alt=""></p><p>每一个Level都通过反汇编窗口，内存窗口，寄存器窗口和调试控制台进行调试，如图所示，这是由Web浏览器构建的调试器。在调试控制台上输入“help”，查看调试指令。若刚开始挑战，建议先完成Tutorial新手教程，它将为你介绍这个调试器，以及如何达成目标过关。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/4.png" alt=""></p><p>如反汇编窗口所示，它是由MSP430控制的锁，实时模拟真实设备，我们的目标是在内存中寻找特定的输入，或者找到漏洞然后进行利用达到解锁的目的。该CTF是对嵌入式安全性的不错介绍，不需要购买真实的硬件，甚至还有<a href="https://microcorruption.com/manual.pdf" target="_blank" rel="noopener">用户手册</a>，非常适合初学者入门。</p><h3 id="玩法介绍"><a href="#玩法介绍" class="headerlink" title="玩法介绍"></a>玩法介绍</h3><p>下面我们先看第一level——Tutorial调试器指导教程，此教程将逐步介绍这个web调试器。</p><p>使用<code>continue</code>或<code>c</code>命令运行程序。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/5.png" alt=""></p><p>运行后，若没有其它断点，将弹出IO控制窗口，这里显示控制台的输出，提示我们输入密码。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/6.png" alt=""></p><p>然后下面是用户输入文本框，我们输入“test”，然后“send”提交，锁将会提取该输入。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/7.png" alt=""></p><p>继续<code>c</code>命令运行。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/8.png" alt=""></p><p>运行完毕后可以看到，底下的另一个IO控制窗口提出输出：无效密码。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/9.png" alt=""></p><p>此时，意味着程序执行完毕，所以CPU将会关闭。需要在控制台上输入<code>reset</code>，进行重置CPU状态。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/10.png" alt=""></p><p>重置（reset）CPU以后，现在在<strong>main</strong>函数上设置断点，查看<strong>main</strong>函数做了什么事情。在控制台窗口输入命令：<code>break main</code>；或者输入：<code>b main</code>。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/11.png" alt=""></p><p>使用<code>c</code>命令运行，程序将会断在main函数（红色代表正在待执行的指令）。由蓝色背景设置的就是断点的位置。我们也可以通过鼠标单击它，来删除断点或者设置断点。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/12.png" alt=""></p><p>寄存器窗口显示断点时的状态，它们都是由16进制显示。右侧显示当前程序计数器pc处的指令。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/13.png" alt=""></p><p>现在我们可以使用<code>step</code>或<code>s</code>命令进行单步步入调试。该命令有可选参数，后面加上5a，将步过5a条指令。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/14.png" alt=""></p><p>现在执行到<strong>INT</strong>函数中，这是锁与用户交互的重要方式，通过发出中断，锁可以打印字符，请求输入或执行其他功能的操作。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/15.png" alt=""></p><p>继续使用<code>`c</code>命令运行，直到弹出请求输入。在不知道密码的情况下，仍输入“test”。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/16.png" alt=""></p><p>现在使用<code>out</code>或者<code>f</code>命令退出当前函数，它一直运行直到遇到下一条“ret”指令。经过几次“ret”之后，回到<strong>main</strong>函数中，0x444c是调用<strong>check_password</strong>函数，似乎是一个关键检查函数，尝试在该函数设置断点<code>break check_password</code>。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/17.png" alt=""></p><p>使用<code>c</code>命令，程序成功断在<strong>check_password</strong>函数。待执行的指令是“mov.b @r15, r14”，这意味着将r15寄存器寻址的内容移动到r14寄存器中。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/18.png" alt=""></p><p>先查看r15寄存器，r15的值为0x439c。该地址正是“test”字符串的起始地址。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/19.png" alt=""></p><p>在控制台窗口输入<code>s</code>单步命令，再查看寄存器窗口中r14的变化。r14的值变为0x74，0x74是字符“t”的ascii码。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/20.png" alt=""></p><p>继续“s”命令单步执行，“inc r15”意味着r15自增1。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/21.png" alt=""></p><p>执行下一条指令，继续“s”命令单步执行，“inc r12”意味着r12自增1。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/22.png" alt=""></p><p>下一条指令，“tst r14”，这条指令比较r14是否为零。它将r14中的值与常数0进行比较，结果将在状态寄存器sr中；若r14为零，这里则设置零标志位。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/23.png" alt=""></p><p>单步执行“tst r14”后，紧接着是“jnz $-0x8”（如果不为零，则跳转），jnz是条件跳转指令，当未设置零标志位时，它将移动程序计数器pc，向后跳8个字节。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/24.png" alt=""></p><p>此时，我们将鼠标悬停在状态寄存器sr上，可以查看设置的标志位。“C”表示已设置进位标志位（Carry），这里未设置零标志位。所以这里”jnz“将实现跳转。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/25.png" alt=""></p><p><code>s</code>执行单步之后，向前移动0x8个字节，回到了开始的地方。所以这个循环中的主要的操作是，读取一字节我们的输入，便将r12寄存器加1。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/26.png" alt=""></p><p>现在我们跳出这个循环，直到r14寄存器为0使，才会跳出循环，即在0x448e处设置断点<code>break 448e</code>。使用<code>unbreak check_password</code>可以删除其它断点。随后使用“c”命令运行。*</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/27.png" alt=""></p><p>此时运行的指令是“cmp #0x9, r12”，它比较两个值，也就是把r12的值与立即数0x9进行比较，cmp的功能相当于减法指令，只是不保存结果，而是设置状态寄存器中的零标志位。此时我们的r12为5，这是因为我们输入了4个字符的密码，其中最后一个是空字节。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/28.png" alt=""></p><p>执行完“cmp #0x9, r12”后，紧接着是jeq/jz指令（如果相等则跳转/如果为0则跳转，它们是等效的），它和jnz一样都是条件跳转。如果cmp比较为真（如果r12为9），则移动pc向后跳转6个字节。但是在这里，cmp比较为假（因为r12为5），未设置状态寄存器的零标志位，所以不进行跳转。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/29.png" alt=""></p><p>命令<code>s</code>单步之后，将r15寄存器清0，然后返回。r15一般用作存放函数返回值结果，因此<strong>chekc_password</strong>函数的返回值为0。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/30.png" alt=""></p><p>我们在这里直接更改程序计数器pc，使用<code>let pc = 4498</code>，将pc指向地址0x4498（mov #0x1， r15），将立即数0x1移动到r15寄存器中。然后使用<code>f</code>命令回到<strong>main</strong>函数，我们看main函数将会发生什么。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/31.png" alt=""></p><p>在main函数中，再次运行”tst”指令，检查r15（check_password函数的返回值）是否非零，并相应地设置状态零标记位。我们知道r15为1，并且当r15不为0时发生跳转。使用<code>s</code>命令继续单步执行。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/32.png" alt=""></p><p>单步执行后，跳转到访问“Access Granted!”字符串，然后put打印。接着调用unlock_door函数解锁。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/33.png" alt=""></p><p>使用<code>c</code>命令运行。刚刚我们通过更改pc，到达所需指令进行欺骗。接下来需要通过正确的密码解锁。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/34.png" alt=""></p><p>reset之后，使用<code>c</code>运行到请求输入窗口。在请求窗口中，我们还可以勾选16进制编码输入。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/35.png" alt=""></p><p>现在输入正确的密码，在之前check_password时，我们知道r12必须是9。因此我们需要增加到8个字符的输入，末尾自动包含1个空字符。尝试使用8位的“password”作为输入。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/36.png" alt=""></p><p>使用<code>c</code>运行，密码正确！</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/37.png" alt=""></p><p>现在我们在实锁中执行它，在控制台窗口输入<code>solve</code>。这时我们将无法进行任何调试，只能输入密码。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/38.png" alt=""></p><p>解锁成功！现在我们返回地图，挑战下一关。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/42.png" alt=""></p><h3 id="第一关-New-Orleans"><a href="#第一关-New-Orleans" class="headerlink" title="第一关 New Orleans"></a>第一关 New Orleans</h3><p>经过Tutorial，我们对调试器已经有了详细的了解。现在开始正式关卡的挑战，它的每一关都是世界各地的某个城市名，随着level数量的增加，难度也在增加。现在开始第一个Level的挑战——New Orleans。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/39.png" alt=""></p><blockquote><p>OVERVIEW</p><ul><li>This is the first LockIT Pro Lock.</li><li>This lock is not attached to any hardware security module.</li></ul></blockquote><p>查看反汇编窗口，开头是一些初始化或设置工作的函数。我们选择在<strong>main</strong>处设置断点，在控制台窗口输入<code>b main</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">4438 &lt;main&gt;</span><br><span class="line">4438:  3150 9cff      add    #0xff9c, sp</span><br><span class="line">443c:  b012 7e44      call    #0x447e &lt;create_password&gt;</span><br><span class="line">4440:  3f40 e444      mov    #0x44e4 &quot;Enter the password to continue&quot;, r15</span><br><span class="line">4444:  b012 9445      call    #0x4594 &lt;puts&gt;</span><br><span class="line">4448:  0f41           mov    sp, r15</span><br><span class="line">444a:  b012 b244      call    #0x44b2 &lt;get_password&gt;</span><br><span class="line">444e:  0f41           mov    sp, r15</span><br><span class="line">4450:  b012 bc44      call    #0x44bc &lt;check_password&gt;</span><br><span class="line">4454:  0f93           tst    r15</span><br><span class="line">4456:  0520           jnz    #0x4462 &lt;main+0x2a&gt;</span><br><span class="line">4458:  3f40 0345      mov    #0x4503 &quot;Invalid password; try again.&quot;, r15</span><br><span class="line">445c:  b012 9445      call    #0x4594 &lt;puts&gt;</span><br><span class="line">4460:  063c           jmp    #0x446e &lt;main+0x36&gt;</span><br><span class="line">4462:  3f40 2045      mov    #0x4520 &quot;Access Granted!&quot;, r15</span><br><span class="line">4466:  b012 9445      call    #0x4594 &lt;puts&gt;</span><br><span class="line">446a:  b012 d644      call    #0x44d6 &lt;unlock_door&gt;</span><br><span class="line">446e:  0f43           clr    r15</span><br><span class="line">4470:  3150 6400      add    #0x64, sp</span><br></pre></td></tr></table></figure><p>浏览<strong>main</strong>中<code>call</code>的函数，<strong>create_password</strong>、<strong>puts</strong>、<strong>get_password</strong>、<strong>check_password</strong>和<strong>unlock_door</strong>函数，其中<strong>create_password</strong>似乎创建生成了密码，<strong>pust</strong>是打印提示字符串，<strong>get_password</strong>是请求输入密码，而<strong>check_password</strong>是对密码进行检查，和前一关一样<strong>unlock_door</strong>是解锁函数。</p><p>首先进入<strong>create_password</strong>看看。该函数正在mov.b一字节一字节的的数据到r15（0x2400）寻址的内存中，这些数据似乎是ascii码，最后一个字节以\x0结尾，合并在一起组成一个字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">447e &lt;create_password&gt;</span><br><span class="line">447e:  3f40 0024      mov    #0x2400, r15</span><br><span class="line">4482:  ff40 4600 0000 mov.b    #0x46, 0x0(r15)</span><br><span class="line">4488:  ff40 6c00 0100 mov.b    #0x6c, 0x1(r15)</span><br><span class="line">448e:  ff40 6c00 0200 mov.b    #0x6c, 0x2(r15)</span><br><span class="line">4494:  ff40 4900 0300 mov.b    #0x49, 0x3(r15)</span><br><span class="line">449a:  ff40 6600 0400 mov.b    #0x66, 0x4(r15)</span><br><span class="line">44a0:  ff40 2800 0500 mov.b    #0x28, 0x5(r15)</span><br><span class="line">44a6:  ff40 3900 0600 mov.b    #0x39, 0x6(r15)</span><br><span class="line">44ac:  cf43 0700      mov.b    #0x0, 0x7(r15)</span><br><span class="line">44b0:  3041           ret</span><br></pre></td></tr></table></figure><p>我们<code>n</code>命令步过这个函数，然后查看内存0x2400的内容。<code>&quot;FllIf(9&quot;</code>莫非是密码？</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/40.png" alt=""></p><p>接下来在<strong>check_password</strong>下断点，然后<code>c</code>命令运行。在请求输入时，选择以<code>&quot;FllIf(9&quot;</code>作为输入。</p><p>果然，在地址0x44c2中”cmp.b @r13, 0x2400(r14)“比较1个字节，r13寄存器寻址的正是我们输入的密码，而0x2400(r14)是<strong>create_password</strong>函数生成的字符串<code>&quot;FllIf(9&quot;</code>。经过循环比较每一个字节，判断我们的输入和<code>&quot;FFllIf(9&quot;</code>是否相等，最后设置返回值r15。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">44bc &lt;check_password&gt;</span><br><span class="line">44bc:  0e43           clr    r14</span><br><span class="line">44be:  0d4f           mov    r15, r13</span><br><span class="line">44c0:  0d5e           add    r14, r13</span><br><span class="line">44c2:  ee9d 0024      cmp.b    @r13, 0x2400(r14)</span><br><span class="line">44c6:  0520           jne    #0x44d2 &lt;check_password+0x16&gt;</span><br><span class="line">44c8:  1e53           inc    r14</span><br><span class="line">44ca:  3e92           cmp    #0x8, r14</span><br><span class="line">44cc:  f823           jne    #0x44be &lt;check_password+0x2&gt;</span><br><span class="line">44ce:  1f43           mov    #0x1, r15</span><br><span class="line">44d0:  3041           ret</span><br><span class="line">44d2:  0f43           clr    r15</span><br><span class="line">44d4:  3041           ret</span><br></pre></td></tr></table></figure><p>至此，我们已经猜中密码正是<strong>create_password</strong>函数生成的字符串，使用<code>c</code>命令运行，测试正确。</p><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>在控制台窗口输入”solve“，然后在请求输入窗口以字符串输入：FllIf(9，或者16进制输入：466c6c49662839。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/5/1/41.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、 MSP430 用户指南 <a href="http://www.ti.com.cn/cn/lit/ug/zhcu032i/zhcu032i.pdf" target="_blank" rel="noopener">http://www.ti.com.cn/cn/lit/ug/zhcu032i/zhcu032i.pdf</a><br>2、智能锁具攻防一:初探 <a href="https://yaseng.org/intelligent-lock-attack-and-defense-1.html">https://yaseng.org/intelligent-lock-attack-and-defense-1.html</a><br>3、智能锁行业安全分析报告 <a href="https://yaseng.org/intelligent-lock-industry-safety-report.html">https://yaseng.org/intelligent-lock-industry-safety-report.html</a><br>4、物联网安全百科 <a href="https://iot-security.wiki" target="_blank" rel="noopener">https://iot-security.wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁安全" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能锁破解" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="指纹锁安全" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="指纹锁破解" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="长毛开锁" scheme="http://yaseng.org/tags/%E9%95%BF%E6%AF%9B%E5%BC%80%E9%94%81/"/>
    
      <category term="长毛锁王" scheme="http://yaseng.org/tags/%E9%95%BF%E6%AF%9B%E9%94%81%E7%8E%8B/"/>
    
      <category term="锁具 ctf" scheme="http://yaseng.org/tags/%E9%94%81%E5%85%B7-ctf/"/>
    
      <category term="鬼吹灯" scheme="http://yaseng.org/tags/%E9%AC%BC%E5%90%B9%E7%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式安全利器 JTAGulator 的制作与调试实战</title>
    <link href="http://yaseng.org/diy-JTAGulator-and-debugging.html"/>
    <id>http://yaseng.org/diy-JTAGulator-and-debugging.html</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-20T09:18:39.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在线调试（OCD,On-Chip Debugging）接口可以提供对目标设备的芯片级控制，是工程师、研究人员、黑客用来提取程序固件代码或数据、修改存储器内容或改变设备操作的主要途径。如果你熟悉硬件电路或嵌入式系统，那么你肯定知道JTAG（Joint Test Action Group）和UART（Universal Asynchronous Receiver/Transmitter）可以说是使用最多的串行通信接口。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/1.png" alt="img"></p><p>JTAG规范没有标准的接口定义，所以你可以在各种PCB硬件上中见到4-20pin的JTAG Header，而且各个引脚的功能定义也无法确定，这给调试工作造成了很大的麻烦，下图列举了4种接口定义，有ARM公司的定义，有ST公司的定义等等。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/2.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/3.png" alt="img"></p><p>那如何知道引脚定义呢？传统的做法是通过逻辑分析仪做信号分析来解决，但是这样既费时费力又容易出错。于是自动化识别JTAG接口的设备便诞生了，例如有JTAGulator、JTAGenum、JTAG Finder、JTAG Pinout Tool等等，目前来说最好用的还是JTAGulator。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/4.png" alt="img"></p><p>JTAGulator是一个开源硬件工具，可用于识别目标设备上测试点、过孔或元件焊盘的OCD连接，进而可以使用Attify Badge接线并读取程序固件。</p><h2 id="JTAG规范"><a href="#JTAG规范" class="headerlink" title="JTAG规范"></a>JTAG规范</h2><p>JTAG是联合测试工作组（Joint Test Action Group）的简称，是在名为标准测试访问端口和边界扫描结构的IEEE的标准1149.1的常用名称。此标准用于验证设计与测试生产出的印刷电路板功能。</p><p>1990年JTAG正式由IEEE的1149.1-1990号文档标准化，在1994年，加入了补充文档对边界扫描描述语言（BSDL）进行了说明。从那时开始，这个标准被全球的电子企业广泛采用。边界扫描几乎成为了JTAG的同义词。</p><p>JTAG的主要三大功能：</p><ol><li>下载器，即下载程序固件到设备FLASH芯片。</li><li>DEBUG，类似于医生的听诊器，可以探听芯片内部的错误。</li><li>边界扫描，可以访问芯片内部的型号逻辑状态，还有芯片引脚的状态等等。</li></ol><p>在JTAG接口中，最常用的信号有五个，分别是TCK / TMS / TDO / TDI / TRST，其中4个是输入信号接口，另外1个是输出信号接口。</p><p>JTAG最初是用来对芯片进行测试的，其基本原理是在器件内部定义一个TAP（Test Access Port）并规定TAP状态机的行为，通过专用的测试工具进行内部节点进行测试。JTAG测试允许多个器件通过JTAG接口串联在一起，形成一个JTAG链，能实现对各个器件分别测试。现在，JTAG接口还常用于实现ISP（In-System Programmable），对Flash等器件进行编程。下面，我们介绍一下这5个接口：</p><ul><li>Test Clock Input (TCK)<br>TCK在IEEE1149.1标准里是强制要求的。TCK为TAP的操作提供了一个独立的、基本的时钟信号，TAP的所有操作都是通过这个时钟信号来驱动的。</li><li>Test Mode SelectionInput (TMS)<br>TMS信号在TCK的上升沿有效。TMS在IEEE1149.1标准里是强制要求的。TMS信号用来控制TAP状态机的转换。通过TMS信号，可以控制TAP在不同的状态间相互转换。</li><li>Test Data Input (TDI)<br>TDI在IEEE1149.1标准里是强制要求的。TDI是数据输入的接口。所有要输入到特定寄存器的数据都是通过TDI接口一位一位串行输入的（由TCK驱动）。</li><li>Test Data Output (TDO)<br>TDO在IEEE1149.1标准里是强制要求的。TDO是数据输出的接口。所有要从特定的寄存器中输出的数据都是通过TDO接口一位一位串行输出的（由TCK驱动）。</li><li>Test Reset Input (TRST)<br>这个信号接口在IEEE 1149.1标准里是可选的，并不是强制要求的。TRST可以用来对TAPController进行复位（初始化）。因为通过TMS也可以对TAP Controll进行复位（初始化）。所以有四线JTAG与五线JTAG之分。</li></ul><p>JTAG接口可以一对一的使用，也可以组成菊花链的一对多拓扑结构，两种拓扑结构如下图所示。多核的芯片，其芯片内部已经接成了菊花链的形式。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/5.png" alt="img"></p><h2 id="制作JTAGulator"><a href="#制作JTAGulator" class="headerlink" title="制作JTAGulator"></a>制作JTAGulator</h2><p>JTAGulator官方售价$169，某宝代购价人民币1500元左右，自己DIY成本可以控制在每块板子人民币500元以内。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/6.png" alt="img"></p><p>在<a href="http://www.grandideastudio.com/jtagulator/" target="_blank" rel="noopener">JTAGulator的官网</a>可以下载制作JTAGulator所需的所有资料，GERBER光绘文件，BOM元件列表等等。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/7.png" alt="img"></p><p>把GERBER光绘文件发往工厂打样PCB，等待2-3天即可到货，然后购买BOM表中的电子元器件。PCB我是在嘉立创打样，电子元件在立创商城购买。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/8.png" alt="img"></p><p>按照官网提供的PCB装配图将电子元器件用烙铁和焊锡焊接在PCB电路板上面。焊接完成后用洗板水清理松香和助焊剂的残留，在上电之前仔细检查是否存在虚焊和短路现象。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/9.png" alt="img"></p><p>通过Mini USB数据线连接电脑，打开“设备管理器”会看到一个串行通信端口。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/10.png" alt="img"></p><p>硬件测试没问题后在Github下载<a href="https://github.com/grandideastudio/jtagulator/releases" target="_blank" rel="noopener">程序固件源码</a>，给设备烧录程序固件需要安装芯片的烧录工具<a href="https://www.parallax.com/downloads/propeller-tool-software-windows-spin-assembly" target="_blank" rel="noopener">Propeller Tool</a>。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/11.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/12.png" alt="img"></p><p>将下载的程序固件源码解压出来，打开里面的”JTAGulator.eeprom”文件，点击”Load ARM”就可以烧录固件进板子。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/13.png" alt="img"></p><p>烧录完毕用串口调试工具打开JTAGulator对应的COM端口，波特路115200，按一下回车键，返回数据即可，”H”查看帮助，”I”查看版本。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/14.png" alt="img"></p><h2 id="JTAG识别"><a href="#JTAG识别" class="headerlink" title="JTAG识别"></a>JTAG识别</h2><p>用一块STM32开发板做测试，假装不知道它的引脚定义，板子单独供电，先用万用表测出GND引脚，然后把需要识别的引脚和GND引脚用杜邦线接到JTAGulator上。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/15.png" alt="img"></p><p>输入”J”进入JTAG模式，”V”设置电压，”I”是IDCODE扫描，然后设置通道范围，成功识别出引定义。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/16.png" alt="img"></p><h2 id="UART识别"><a href="#UART识别" class="headerlink" title="UART识别"></a>UART识别</h2><p>拿一台网件的路由器做测试，一样的步骤，先用万用表测出GND引脚，然后把剩下的脚接到JTAGulator上。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/17.png" alt="img"></p><p>成功识别出TX和RX引脚。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/18.png" alt="img"></p><p>还可以用JTAGulator通过UART串口调试路由器。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/19.png" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JTAGulator能够快速识别哪些引脚可能是JTAG，并找出这些引脚的顺序，在这里感谢作者Joe Grand开源这款硬件工具。</p><p>没有条件DIY的朋友可以尝试另一个比较便宜的方案JTAGenum，使用Arduino Nano开发板或树莓派烧录程序即可 。</p><p>JTAGulator和JTAGenum两者之间的差别是，JTAGulator硬件内置了电平转换和输入保护，就软件方面而言JTAGulator提供UART扫描，JTAGenum目前并不支持，JTAGulator还提供扫描未记录的JTAG接口功能，这也是JTAGenum目前不支持的功能。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/4/20.png" alt="img"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、联想全球安全实验室《JTAGulator的制作与固件读取（上）》<br>2、<a href="http://www.grandideastudio.com/jtagulator/" target="_blank" rel="noopener">http://www.grandideastudio.com/jtagulator/</a><br>3、<a href="https://github.com/grandideastudio/jtagulator" target="_blank" rel="noopener">https://github.com/grandideastudio/jtagulator</a><br>4、<a href="https://blog.csdn.net/beetleinv/article/details/86372466" target="_blank" rel="noopener">https://blog.csdn.net/beetleinv/article/details/86372466</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在线调试（OCD,On-Chip Debugging）接口可以提供对目标设备的芯片级控制，是工程师、研究人员、黑客用来提取程序固件代码或数据
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="JTAGulator" scheme="http://yaseng.org/tags/JTAGulator/"/>
    
      <category term="jtag" scheme="http://yaseng.org/tags/jtag/"/>
    
  </entry>
  
  <entry>
    <title>信息安全之信息伪装</title>
    <link href="http://yaseng.org/something-about-information-hiding.html"/>
    <id>http://yaseng.org/something-about-information-hiding.html</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-04-17T07:52:33.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="伪装之道"><a href="#伪装之道" class="headerlink" title="伪装之道"></a>伪装之道</h2><p>《孙子兵法》“虚实篇”中提出“故形人而我无形，则我专而敌分”，即“示伪形于敌，而我之真形则藏而不露”，指出了“伪装”对促进战争制胜的重要作用。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/1.png" alt="img"></p><p>​    当然，伪装绝对是一个技术活 ……</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/2.png" alt="img"></p><h2 id="信息伪装"><a href="#信息伪装" class="headerlink" title="信息伪装"></a>信息伪装</h2><p>信息伪装就是将秘密信息隐藏于另一非机密的文件内容之中，其形式可以是任何一种数字媒体，如图像、声音、视频等等。信息伪装技术不同于传统的加密技术，密码仅仅隐藏了信息的内容，而信息伪装不但隐藏了信息的内容而且隐藏了信息的存在。</p><p>一般来说，信息伪装技术具有隐蔽性、安全性、对称性和可纠错性四大特性。信息伪装技术包含的内容范围十分广泛，可以分为伪装术、数字水印、数据隐藏和数据嵌入等。其中图像伪装术和图像数字水印是人们研究的重点。信息伪装是一门不断发展的学科，许多新的分支和技术都在不断地涌现。可视密码学就是其中的一种。这种技术在恢复秘密图像时不需要任何复杂的密码学计算,而是直接以人的视觉系统即可将秘密图像辩识出来,完全不同于传统的密码技术,在解密过程中须靠大量且复杂的技术才可解出真正的信息。图像伪装是一门技巧性学问, 目前正在实用化方向发展。</p><h2 id="可视密码学视角下的图像“加密”"><a href="#可视密码学视角下的图像“加密”" class="headerlink" title="可视密码学视角下的图像“加密”"></a>可视密码学视角下的图像“加密”</h2><p>受信息伪装思想的启发，提出一种可逆图像转换的图像加密方法。该方法可以将原始图像变换为大小相同的自由选择的目标图像。对于彩色图像，我们分别对颜色通道R, G, B进行相同的变换。因此，文章仅以灰度图像(一个通道)为例来描述该方法。对于原始图像I，我们从图像数据库中随机选择与I大小相同的目标图像J。</p><p>首先，我们将原始图像I和目标图像J分别分割成N个互不重叠的块，然后将I和J的块按(B1,T1)，…，(BN,TN)组成块对，其中Bi是I的一个原始块，Ti是J的对应目标块，1 ≤i ≤N。将Bi转换成Ti，其实是生成一个类似Ti的T’i。然后将目标图像J中的每个Ti替换为T’i，得到变换后的图像J’。最后利用可逆信息嵌入方法将一些辅助信息嵌入到J’中，生成最终的伪装图像，也可以称为加密图像E(I)。这些辅助信息对于从J’恢复到I是必要的，在被嵌入之前，这些辅助信息将被压缩并使用与接收者共享的密钥K加密，因此只有拥有K的接收者才能解密E(I)。</p><p>所提出的转换过程包括三个步骤:块配对、块转换和边信息嵌入。我们主要阐述前两个步骤，第三个步骤可以用任何传统的可逆水印或可逆信息隐藏方法实现。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h3 id="关键步骤一：块配对"><a href="#关键步骤一：块配对" class="headerlink" title="关键步骤一：块配对"></a><strong>关键步骤一：块配对</strong></h3><p>为了使变换后的图像J’看起来像目标图像J，我们希望每个变换后的块与目标块具有相近的均值(u)和标准差(SD)。因此，我们首先分别计算I和J的每个块的u和SD。设块B像素组成为 B={p1,p2，…，pn},则该块的均值(u)和标准差(SD)计算如下：</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/3.png" alt="img"></p><p>当原始图像与目标图像匹配时，我们希望两个SD最接近的图像块是一对。文献[1]中Lee等人的方法是将原始图像块和目标图像块分别按照它们的SD按升序排序，然后将每个原始块依次与对应的目标块按序配对。但是这种方法不可逆，也就是无法无损的还原原始图像。如果图像被分成N个块，则需要N[logN]比特来记录块索引。显然，块越小，变换后的图像质量就会越好，但是会导致一个很大的N。事实上，可能没有足够的冗余空间来存储这些额外的信息。因此，本文分块大小定为4×4。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/4.png" alt="img"></p><p>为了压缩块索引，我们首先根据块的SD值对它们进行分类，然后再对它们进行配对。事实上，如图1所示，统计来自BossBase图像数据库的10000张不同大小的图像，我们发现大多数的SD值集中在一个接近于零的小范围内。因此，我们将数据块分成两个不相等比例的类:SDs较小的数据块为0类，SDs较大的数据块为1类，并将属于同一类的数据块进行配对。通过将大多数块分配给类0，我们可以避免一对块之间的SDs的大偏差，同时有效地压缩索引。</p><h3 id="关键步骤二：块转换"><a href="#关键步骤二：块转换" class="headerlink" title="关键步骤二：块转换"></a><strong>关键步骤二：块转换</strong></h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/5.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/6.png" alt="img"></p><p>最后，为了尽可能地保持变换后的图像与目标图像之间的相似性，我们进一步将变换后的块旋转到0°、90°、180°或270°四个方向中的一个。选择最优方向，使旋转块与目标块之间的均方误差最小。</p><p>在变换和旋转之后，得到一个新的块T’。用这些新块替换相应目标图像的块并生成转换后的图像J’。参数Δu和旋转方向将被压缩，加密，然后嵌入转换后的图像J’作为边信息输出目标图像E (I)，这也可以作为一种加密图像。</p><h2 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h2><p>从BossBase图像数据库中随机选择10对图像作为我们的测试图像。首先对所有的图像进行预处理，得到大小相同的1024×1024像素。</p><p>如下图所示，展示了两张测试图像以及加密后的视觉效果。通过该方法得到的加密图像E(I)与目标图像相似，看起来像马赛克图像。由于加密后的图像与目标图像的差异较小，这种视觉效果能满足伪装的要求，即原始图像内容完全被目标图像内容所覆盖。即使攻击者识别出伪装，如果不知道加密算法与秘钥K，也不能恢复边信息，从而不能恢复图像。此外，边信息平均占用每个像素约0.521比特/像素元(bpp)。这对图像造成了较大的失真，但加密后的图像E(I)仍然可以保持一个较好的质量，其PSNR值大约等于30 dB，这是一个可以接受的视觉效果。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/5/7.png" alt="img"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] Y. Lee and W. Tsai, “A new secure image transmission technique via secret-fragment-visible mosaic images by nearly reversible color transformation,” IEEE Trans. Circuits Syst. Video Technol., vol. 24, no. 4, pp. 695–703, Apr. 2014</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;伪装之道&quot;&gt;&lt;a href=&quot;#伪装之道&quot; class=&quot;headerlink&quot; title=&quot;伪装之道&quot;&gt;&lt;/a&gt;伪装之道&lt;/h2&gt;&lt;p&gt;《孙子兵法》“虚实篇”中提出“故形人而我无形，则我专而敌分”，即“示伪形于敌，而我之真形则藏而不露”，指出了“伪装”对促进战
      
    
    </summary>
    
      <category term="数据安全" scheme="http://yaseng.org/categories/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="信息伪装" scheme="http://yaseng.org/tags/%E4%BF%A1%E6%81%AF%E4%BC%AA%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>可完全分离的二维矢量图加密域鲁棒可逆水印算法（二）</title>
    <link href="http://yaseng.org/separable-robust-reversible-watermarking-in-encrypted-2d-vector-graphics-2.html"/>
    <id>http://yaseng.org/separable-robust-reversible-watermarking-in-encrypted-2d-vector-graphics-2.html</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-04-20T09:24:30.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>随着云制造技术的兴起，加密域可逆水印技术逐渐受到了较多的关注。然而，现有的大部分算法不仅只能应用于图像、视频等冗余性较大的载体，而且难以抵御常见的攻击，甚至只能在单一的域中提取水印。为此，本文针对冗余性较小的二维矢量图提出了一种可完全分离的二维矢量图加密域鲁棒可逆水印算法。首先，内容拥有者在极坐标系下利用加密密钥置乱顶点的极角以加密图形。随后，水印嵌入者在嵌入密钥以及哈希函数的控制下，把编码后的水印比特映射到不同顶点，再轻微调整顶点极角从而嵌入水印。由于解密操作不会影响已嵌入的水印，算法可以分别在明文域或密文域提取水印。实验结果与分析表明，算法不仅具有较好的不可见性，而且能有效抵御旋转、平移、缩放（RST）、实体重排序等常见的操作，甚至还能抵御顶点或实体的增加、删除等恶意攻击。</p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><h3 id="水印提取与图形恢复"><a href="#水印提取与图形恢复" class="headerlink" title="水印提取与图形恢复"></a>水印提取与图形恢复</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/1.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/2.png" alt="img"></p><h3 id="图形解密"><a href="#图形解密" class="headerlink" title="图形解密"></a>图形解密</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/3.png" alt="img"></p><h2 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h2><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/4.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/5.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/6.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/7.png" alt="img"></p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><h3 id="编码方案与容量分析"><a href="#编码方案与容量分析" class="headerlink" title="编码方案与容量分析"></a>编码方案与容量分析</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/8.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/9.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/10.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/11.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/12.png" alt="img"></p><h3 id="图形加密的性能分析"><a href="#图形加密的性能分析" class="headerlink" title="图形加密的性能分析"></a>图形加密的性能分析</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/13.png" alt="img"></p><h3 id="可逆性分析"><a href="#可逆性分析" class="headerlink" title="可逆性分析"></a>可逆性分析</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/14.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/15.png" alt="img"></p><h3 id="直接解密对图形质量的影响分析"><a href="#直接解密对图形质量的影响分析" class="headerlink" title="直接解密对图形质量的影响分析"></a>直接解密对图形质量的影响分析</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/16.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/17.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/18.png" alt="img"></p><h3 id="鲁棒性分析"><a href="#鲁棒性分析" class="headerlink" title="鲁棒性分析"></a>鲁棒性分析</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/19.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/20.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/21.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/22.png" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/3/23.png" alt="img"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文针对数据相关性较低的二维矢量图提出了一个可完全分离的加密域鲁棒可逆水印算法。实验结果表明，提出的算法不但具有较好的不可见性，且能抵御较多常见的操作与攻击，其鲁棒性优于现有同类算法。而且据公开文献，该工作为基于二维矢量图加密域可逆信息隐藏双域提取算法中的第一个工作。然而需要指出的是，提出的算法所依赖的参考点容易成为攻击者的目标从而使得算法失效。后续研究除了会继续改善该算法外，还将继续研究鲁棒可逆水印的相关理论与方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;随着云制造技术的兴起，加密域可逆水印技术逐渐受到了较多的关注。然而，现有的大部分算法不仅只能应用于图像、视频等冗余性较大的载体，而且难以抵御
      
    
    </summary>
    
      <category term="数据安全" scheme="http://yaseng.org/categories/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="加密域可逆水印" scheme="http://yaseng.org/tags/%E5%8A%A0%E5%AF%86%E5%9F%9F%E5%8F%AF%E9%80%86%E6%B0%B4%E5%8D%B0/"/>
    
      <category term="鲁棒可逆水印" scheme="http://yaseng.org/tags/%E9%B2%81%E6%A3%92%E5%8F%AF%E9%80%86%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>强化 web 攻击神器 Burp Suite (二) — 切换 ip 技能点</title>
    <link href="http://yaseng.org/burp-suite-ip-switch-extension.html"/>
    <id>http://yaseng.org/burp-suite-ip-switch-extension.html</id>
    <published>2020-02-28T16:00:00.000Z</published>
    <updated>2020-04-16T05:40:46.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章给 Burp Suite 添加验证码识别技能点，对于现代化的渗透测试神器来说，自动化切换 ip 也是必备技能，本文通过动态设置 HTTP 代理来完善此功能。</p><h2 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h2><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>对于 HTTP 代理，HTTP 客户端向代理发送请求报文，代理服务器需要正确地处理请求和连接（例如正确处理 Connection: keep-alive），同时向服务器发送请求，并将收到的响应转发给客户端。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15861583094704.jpg" alt="img"></p><p>图片来源:《HTTP 权威指南》</p><p>原理较为简单，具体看数据包对比<br>正常访问</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15861929435991.jpg" alt="img"></p><p>http 流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: myip.ipip.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:69.0) Gecko/20100101 Firefox/69.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Apr 2020 16:58:35 GMT</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line">Content-Length: 67</span><br><span class="line">Connection: keep-alive</span><br><span class="line">...... IP...113.*.*.*  .................. ...... ......  ......</span><br></pre></td></tr></table></figure><p>代理访问<br>HTTP 代理 180.143.244.66:18637</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15861937338716.jpg" alt="img"></p><p>http 流</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET http://myip.ipip.net/ HTTP/1.1</span><br><span class="line">Host: myip.ipip.net</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:69.0) Gecko/20100101 Firefox/69.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Apr 2020 17:18:45 GMT</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br><span class="line">Content-Length: 69</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">...... IP...180.143.244.66  .................. ...... ......  ......</span><br></pre></td></tr></table></figure><p>可以看到正常访问和代理访问在数据层就是请求路径和目标不同。使用代理就是把数据带上目标信息先发送到代理服务器，要在 Burp Suite 中实现代理功能，动态修改请求目标和请求 header 即可 。</p><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><p>参考官方文档，修改 HTTP 请求，需要在脚本中实例化 IHttpListener 类并重写 processHttpMessage 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">HTTP_PROXY=&#123;</span><br><span class="line">    <span class="string">'ip'</span>:<span class="string">'14.118.163.95'</span>,</span><br><span class="line">    <span class="string">'port'</span>:<span class="number">19048</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BurpExtender</span><span class="params">(IBurpExtender, IHttpListener)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">registerExtenderCallbacks</span><span class="params">(self, callbacks)</span>:</span></span><br><span class="line"></span><br><span class="line">        self._callbacks = callbacks</span><br><span class="line">        self._helpers = callbacks.getHelpers()</span><br><span class="line">        callbacks.setExtensionName(<span class="string">"IP switch"</span>)</span><br><span class="line">        callbacks.registerHttpListener(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">processHttpMessage</span><span class="params">(self, toolFlag, messageIsRequest, messageInfo)</span>:</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 只处理请求</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> messageIsRequest:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        httpService = messageInfo.getHttpService()</span><br><span class="line">        <span class="comment"># 修改请求目标为代理中转</span></span><br><span class="line">        messageInfo.setHttpService(</span><br><span class="line">                        self.helpers.buildHttpService(</span><br><span class="line">                            HTTP_PROXY[<span class="string">'ip'</span>],</span><br><span class="line">                            HTTP_PROXY[<span class="string">'port'</span>], <span class="keyword">True</span></span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">  </span><br><span class="line">        requestInfo = self.helpers.analyzeRequest(messageInfo)</span><br><span class="line">        new_headers = requestInfo.headers</span><br><span class="line">        <span class="comment"># 修改 http 头</span></span><br><span class="line">        req_head = new_headers[<span class="number">0</span>]</span><br><span class="line">        new_headers[<span class="number">0</span>] = re.sub(<span class="string">'\/'</span>,<span class="string">" http://myip.ipip.net/"</span>,req_head)</span><br><span class="line">        body = messageInfo.request[requestInfo.getBodyOffset():len(messageInfo.request)]</span><br><span class="line">        messageInfo.request = self.helpers.buildHttpMessage(</span><br><span class="line">                            new_headers,</span><br><span class="line">                            body)</span><br></pre></td></tr></table></figure><h3 id="对接平台"><a href="#对接平台" class="headerlink" title="对接平台"></a>对接平台</h3><p>接入代理平台或者 aws</p><h2 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h2><p>继续使用上篇后台做演示</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15861746674877.jpg" alt="img"></p><p>正常访问</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15862528749018.jpg" alt="img"></p><p>开启拓展</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/1/15862536452968.jpg" alt="img"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、HTTP 代理原理及实现（一）<br><a href="https://imququ.com/post/web-proxy.html" target="_blank" rel="noopener">https://imququ.com/post/web-proxy.html</a></p><p>2、 Burp Suite 文档<br> <a href="https://portswigger.net/burp/extender/api/burp/IHttpListener.html" target="_blank" rel="noopener">https://portswigger.net/burp/extender/api/burp/IHttpListener.html</a></p><p>3、使用AWS API 网关动态绕过防火墙<br><a href="https://rhinosecuritylabs.com/aws/bypassing-ip-based-blocking-aws/" target="_blank" rel="noopener">https://rhinosecuritylabs.com/aws/bypassing-ip-based-blocking-aws/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上篇文章给 Burp Suite 添加验证码识别技能点，对于现代化的渗透测试神器来说，自动化切换 ip 也是必备技能，本文通过动态设置 HT
      
    
    </summary>
    
      <category term="web安全" scheme="http://yaseng.org/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Burp Suite" scheme="http://yaseng.org/tags/Burp-Suite/"/>
    
      <category term="代理 ip" scheme="http://yaseng.org/tags/%E4%BB%A3%E7%90%86-ip/"/>
    
      <category term="渗透测试" scheme="http://yaseng.org/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>强化 web 攻击神器 Burp Suite (一) — 验证码识别技能点</title>
    <link href="http://yaseng.org/burp-suite-captcha-crack-extension.html"/>
    <id>http://yaseng.org/burp-suite-captcha-crack-extension.html</id>
    <published>2020-02-18T16:00:00.000Z</published>
    <updated>2020-02-29T15:57:02.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Burp Suite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，其各个组件之间可灵活配合，可定制化程度极高，正可谓居家旅行杀人越货必备之神器。但是当遇到各式各样的验证码，防火墙等场景，神器也无从下手。有幸 Burp Suite 提供了非常强大的开发接口，可根据需求自行强化，本文记录如何快速为 Burp Suite 添加验证码识别技能点 。</p><h2 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h2><p>既然要敏捷开发，采用轻量级的脚本 python 来实现拓展最为快速灵活，也懒得去拖 swing 界面做交互，参数对应修改就行。本次验证码识别用于 Intruder 模块，在脚本中实例化 IntruderPayloadGenerator 类以及其 getNextPayload 方法即可，具体流程如下 。</p><h3 id="抓取验证码请求"><a href="#抓取验证码请求" class="headerlink" title="抓取验证码请求"></a>抓取验证码请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#验证码请求头 </span></span><br><span class="line">headers = <span class="string">'''</span></span><br><span class="line"><span class="string">Host: ya.com</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:69.0) Gecko/20100301 Firefox/62.0</span></span><br><span class="line"><span class="string">Accept: image/webp,*/*</span></span><br><span class="line"><span class="string">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span><br><span class="line"><span class="string">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Referer: http://ya.com/cms/fastadmin/public/lf2EomShPI.php/index/login</span></span><br><span class="line"><span class="string">Cookie: PHPSESSID=vltk4df5fbn97vsf8mfjnobr71</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 验证码请求地址</span></span><br><span class="line">captcha_url = <span class="string">"http://ya.com/cms/fastadmin/public/index.php?s=/captcha"</span></span><br></pre></td></tr></table></figure><h3 id="对接验证码识别引擎"><a href="#对接验证码识别引擎" class="headerlink" title="对接验证码识别引擎"></a>对接验证码识别引擎</h3><p>可以使用深度学习来识别验证码，或者接入第三方通用平台。本文为了简单就直接对接某个打码平台，参考平台文档，引入 api、设置对应的id、key 等参数即可 。</p><h3 id="验证码-payload-生成"><a href="#验证码-payload-生成" class="headerlink" title="验证码 payload 生成"></a>验证码 payload 生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntruderPayloadGenerator</span><span class="params">(IIntruderPayloadGenerator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._payloadIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasMorePayloads</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span> </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNextPayload</span><span class="params">(self, baseValue)</span>:</span></span><br><span class="line">        req = urllib2.Request(captcha_url, headers=headers)</span><br><span class="line">        response = urllib2.urlopen(req)</span><br><span class="line">        filename = <span class="string">"./tmp/"</span>+str(uuid.uuid1())+<span class="string">".png"</span></span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">"wb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.read())</span><br><span class="line">        <span class="comment">#上传到打码平台识别</span></span><br><span class="line">        api             = Api(app_id, app_key, pd_id, pd_key)</span><br><span class="line">        rsp             = api.PredictFromFile(pred_type, filename) <span class="comment"># 返回识别结果的详细信息</span></span><br><span class="line">        payload = rsp.pred_rsp.value</span><br><span class="line">        <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h3 id="完整脚本"><a href="#完整脚本" class="headerlink" title="完整脚本"></a>完整脚本</h3><p><a href="https://github.com/yaseng/pentest/blob/master/misc/burp_captcha_crack.py" target="_blank" rel="noopener">https://github.com/yaseng/pentest/blob/master/misc/burp_captcha_crack.py</a></p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>拿一个后台系统来做演示<br><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/2/15825388049796.jpg" alt=""></p><h3 id="载入拓展"><a href="#载入拓展" class="headerlink" title="载入拓展"></a>载入拓展</h3><p>1、先引入 jython-standalone 包以及相关模块<br><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/2/15825386808896.jpg" alt=""></p><p>2、加载拓展 burp_captcha_crack.py  </p><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>抓取验证码的请求头、url 写入脚本 </p><h3 id="设置-Intruder"><a href="#设置-Intruder" class="headerlink" title="设置 Intruder"></a>设置 Intruder</h3><p>这种场景下的暴力破解，需要自动化填入用户名、密码、验证码三个字段。对于前两个来说，一般是两个字典的迭代组合，后一个验证码不加入迭代计算。先标记用户名+密码，验证码两个变量，并且使用 Pitchfork 模式 。<br><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/2/15825516164583.jpg" alt=""><br>此时 payload1 为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">§admin&amp;password=admin232323§</span><br></pre></td></tr></table></figure></p><p>类型自定义迭代器(Custom interator)</p><ul><li>payload1_1 加载用户名字典</li><li>payload1_2 为空，分隔符 &amp;password= ，并且去掉 URL 自动编码选项</li><li>payload1_3 加载密码字典</li></ul><p>payload 2 类型 Extension-Generated<br>选择对应的拓展</p><h3 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/2/15825550704473.jpg" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、官方案例  <a href="https://portswigger.net/burp/extender#SampleExtensions" target="_blank" rel="noopener">https://portswigger.net/burp/extender#SampleExtensions</a><br>2、Burp Suite Extender reCAPTCHA <a href="https://github.com/bit4woo/reCAPTCHA" target="_blank" rel="noopener">https://github.com/bit4woo/reCAPTCHA</a><br>3、cnn 验证码识别 <a href="https://github.com/nickliqian/cnn_captcha" target="_blank" rel="noopener">https://github.com/nickliqian/cnn_captcha</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Burp Suite是一个集成化的渗透测试工具，它集合了多种渗透测试组件，其各个组件之间可灵活配合，可定制化程度极高，正可谓居家旅行杀人越货
      
    
    </summary>
    
      <category term="web安全" scheme="http://yaseng.org/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Burp Suite" scheme="http://yaseng.org/tags/Burp-Suite/"/>
    
      <category term="验证码识别" scheme="http://yaseng.org/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>可完全分离的二维矢量图加密域鲁棒可逆水印算法（一）</title>
    <link href="http://yaseng.org/separable-robust-reversible-watermarking-in-encrypted-2d-vector-graphics-1.html"/>
    <id>http://yaseng.org/separable-robust-reversible-watermarking-in-encrypted-2d-vector-graphics-1.html</id>
    <published>2019-12-25T16:00:00.000Z</published>
    <updated>2020-03-03T08:13:49.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>随着云制造技术的兴起，加密域可逆水印技术逐渐受到了较多的关注。然而，现有的大部分算法不仅只能应用于图像、视频等冗余性较大的载体，而且难以抵御常见的攻击，甚至只能在单一的域中提取水印。为此，本文针对冗余性较小的二维矢量图提出了一种可完全分离的二维矢量图加密域鲁棒可逆水印算法。首先，内容拥有者在极坐标系下利用加密密钥置乱顶点的极角以加密图形。随后，水印嵌入者在嵌入密钥以及哈希函数的控制下，把编码后的水印比特映射到不同顶点，再轻微调整顶点极角从而嵌入水印。由于解密操作不会影响已嵌入的水印，算法可以分别在明文域或密文域提取水印。实验结果与分析表明，算法不仅具有较好的不可见性，而且能有效抵御旋转、平移、缩放（RST）、实体重排序等常见的操作，甚至还能抵御顶点或实体的增加、删除等恶意攻击。</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>近年来，随着计算机辅助设计/计算机辅助制造技术(CAD/CAM)的普及，二维矢量图在机械行业、建筑行业、服装业等诸多领域的设计行业中得到了广泛应用。二维矢量图作为一种重要的制造数据，其知识产权保护和内容完整性认证极其重要。虽然现有的水印方法[1]- [9]能对明文状态的二维矢量图进行一定程度的保护，但它们要么不可逆[1]-[3]，要么不够鲁棒[4]-[9]，更重要的是无法适应当前云制造发展的应用需要。由于存储在云端的二维矢量图完全暴露给第三方，数据易被泄密，故通常采用数据加密的方式对二维矢量图的内容进行保护。与此同时，为便于云端加密数据的管理，管理者还希望在加密的二维矢量图中以可逆的方式添加一些额外的信息，如：源信息、身份验证数据或版权信息等。为解决这一问题，加密域可逆信息隐藏技术在近几年受到了广泛关注。该技术首先对载体进行加密以确保数据的安全性，然后通过可逆水印技术把水印信息嵌入到载体中以实现版权保护、秘密信息传递等功能。<br>当前，针对加密域可逆信息隐藏的研究主要集中于栅格图像[10]-[20]，针对于二维矢量图的研究还相对较少[21]。此外，现有加密域可逆水印算法大多不具有水印提取的鲁棒性，即对解密后的载体进行一定程度的修改后，无法正确提取水印，无法满足版权认证、载体溯源等应用场景的需要。因此，如何提高加密域可逆水印算法中水印提取的鲁棒性已成为加密域可逆信息隐藏领域需要解决的一个重要问题。为此，本文提出了一个可完全分离的二维矢量图加密域鲁棒可逆水印算法。本文的贡献主要包括：<br>1、提出了一个可完全分离的二维矢量图加密域鲁棒可逆水印方案。据公开文献，该方案是首个能分别在明文域或密文域中鲁棒提取隐藏信息的矢量图水印方案。<br>2、提出了一种基于图形极坐标系统、哈希消息认证码和纠删编码的水印映射方法。分析了水印冗余度与水印满射概率的关系。实验证明，与现有同类算法相比，该水印映射方法对一些常见的操作和恶意攻击都具有良好的鲁棒性。<br>3、从理论上分析了二维矢量图形水印的最大失真与平均失真的界限，实验结果也验证了理论分析的正确性。此外，对所提出的算法的实验与分析表明，所提出算法不仅可逆且具有良好的不可见性。</p><p>文章的剩余部分组织如下：第2部分对现有加密域可逆水印的相关工作进行了介绍和分析；第3部分介绍了本文用到的相关技术；第4部分提出一个二维矢量图加密域可逆水印算法；第5部分是实验结果与分析；第6部分是结论。</p><h2 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h2><p>加密域信息隐藏在早期研究阶段，只是简单地把加密和信息隐藏结合，把载体数据的一部分用来加密，而把其余部分则用于嵌入信息。比如，Lian S等人提出的面向视频压缩的可交换加密和水印算法[22]。算法只对帧内预测模式、运动矢量差和DCT系数的符号进行加密，而将水印嵌入到DCT系数的幅值中。由于该类方法只加密了部分载体，当载体的数据相关度较高时存在信息泄露的风险。目前，现有研究均有机地结合两种技术，已有方法根据在加密前后腾出嵌入空间的不同可分为两大类：加密前腾空间(VRBE)以及加密后腾空间(VRAE)[23]。 </p><h3 id="加密前腾空间"><a href="#加密前腾空间" class="headerlink" title="加密前腾空间"></a>加密前腾空间</h3><p>VRBE类的算法需要在加密之前执行额外的预处理操作，以此为待嵌入的信息腾出空间。Kede Ma等人率先提出了第一个VRBE方法[10]，在该方法中，内容拥有者通过传统的可逆信息隐藏方法[24]将特定像素的最低有效位（LSB）嵌入到其他像素中从而腾出空间。预处理后的图像经加密后传送给数据隐藏者。数据隐藏者可以直接在这些特定像素的LSB中隐藏信息。Yi等人提出了一个基于二进制块嵌入（BBE）方法的加密图像可逆信息隐藏方法[11]。该方法通过BBE腾出空间并加密图像后，即可以把秘密信息嵌入其中。Cao等人提出了一个基于稀疏块表示形式的大容量加密图像可逆信息隐藏方法[12]。该方法通过稀疏块表示形式产生了具有更小信息熵的预测误差序列从而腾出了更大的空间，使算法具有更高的容量。然而，由于此类方法中要求内容拥有者与数据隐藏者进行协商，存在信息泄露的风险。  </p><h3 id="加密后腾空间"><a href="#加密后腾空间" class="headerlink" title="加密后腾空间"></a>加密后腾空间</h3><p>VRAE与前一种方法相比，原始载体在加密前无需经受额外的预处理。基于提取隐藏信息的时机，VRAE方法又可以进一步划分为三个基本类别：明文域提取算法，密文域提取算法，以及双域提取算法。</p><h4 id="明文域提取算法"><a href="#明文域提取算法" class="headerlink" title="明文域提取算法"></a>明文域提取算法</h4><p>张新鹏提出了第一个明文域提取算法[13]。该算法对图像进行流加密之后，图像被分成若干大小相同不重叠的块，在密钥的控制下分块图像的像素分成两个集合，再根据水印翻转其中一个集合中像素的3 LSB将1比特嵌入到每个块中。在接收端，算法先对图像进行解密，再根据密钥对像素进行相同的集合划分，最后基于原始像素平滑的先验知识，利用波动函数比较两个像素集合的平滑度以提取水印与还原图像。该算法在纹理复杂的区域会出现较多错误。随后，Wien Hong等人提出了一个改进方法[14]。该方法通过先恢复出错概率较低的块，再利用已恢复块来辅助恢复其他块，从而降低了错误率。蒋瑞琪等人提出了一个基于加密3D网格模型的信息隐藏算法[25]。该算法通过整数化3D网格模型顶点坐标以用于流加密，随后根据三角面片的约束关系把顶点集分为调整集与不变集，再基于[13]中的方法来修改调整集中的顶点坐标以隐藏信息，最后利用角缺失曲率、三角形边长约束等先验知识提取水印与还原图形。由于上述算法都需要解密后才能提取信息，应用场景有限。</p><h4 id="密文域提取算法"><a href="#密文域提取算法" class="headerlink" title="密文域提取算法"></a>密文域提取算法</h4><p>与明文域提取算法不同，密文域提取算法在解密前提取数据。W. Puech等人提出了一个加密图像可逆信息隐藏方法[15]。在这个方案中，内容所有者通过高级加密标准（AES）对原始图像进行加密，而数据嵌入者则在每个包含<em>n</em>像素的块中嵌入1比特。在接收端，用户可在密钥的参与下直接提取隐藏信息，并通过分析局部标准差在明文域恢复原始图像。随后，张进一步提出了一种可分离的加密图像可逆信息隐藏方法[16]。在流加密图像后，算法把一些参数嵌入到少量的加密像素中，并压缩其他加密像素的<em>M</em> LSB，最后在腾出的空间中隐藏信息。根据所拥有的密钥，用户可以分别获得隐藏的信息、近似的图像，以及完全恢复的图形。随后，Mustafa S. Abdul Karim等人提出了一个用于加密域的通用可逆数据隐藏算法[26]。该方法利用Golomb-Rice编码为冗余的加密信号分配新的特征，并通过修改这些特征来实现可逆数据隐藏。然而，当加密信号的冗余性较低时，算法容量较小。在这些方法中，由于嵌入的数据只能在密文域中提取，因此拥有数据隐藏密钥的合法接收者无法从标记的解密载体中提取嵌入数据，其应用场景存在进一步拓展的可能。</p><h4 id="双域提取算法"><a href="#双域提取算法" class="headerlink" title="双域提取算法"></a>双域提取算法</h4><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/2.2.6.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/2.2.7.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/2.2.8.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/2.2.9.png" alt="img"> </p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.1%20.png" alt="img"> </p><h3 id="基于最小包围圆的极坐标系"><a href="#基于最小包围圆的极坐标系" class="headerlink" title="基于最小包围圆的极坐标系"></a>基于最小包围圆的极坐标系</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.1.1%20.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/t%201.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.1.2%20.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.1.3%20.png" alt="img"></h3><h3 id="基于HMAC的水印映射方法"><a href="#基于HMAC的水印映射方法" class="headerlink" title="基于HMAC的水印映射方法"></a>基于HMAC的水印映射方法</h3><h3 id="-1"><a href="#-1" class="headerlink" title=" "></a><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.2.1%20.png" alt="img"> <img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/t%202.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.2.2%20.png" alt="img"></h3><h3 id="纠删码"><a href="#纠删码" class="headerlink" title="纠删码"></a>纠删码</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.3%20.png" alt="img"><br><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/3.3.2%20.png" alt="img"> </p><h2 id="算法描述"><a href="#算法描述" class="headerlink" title="算法描述"></a>算法描述</h2><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/4.1%20.png" alt="img"></h2><h3 id="图形加密"><a href="#图形加密" class="headerlink" title="图形加密"></a>图形加密</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/4.1.1%20.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/t%203.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/4.1.2%20.png" alt="img"> </p><h3 id="水印嵌入"><a href="#水印嵌入" class="headerlink" title="水印嵌入"></a>水印嵌入</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/4.2.1%20.png" alt="img"><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6/4.2.2%20.png" alt="img">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;随着云制造技术的兴起，加密域可逆水印技术逐渐受到了较多的关注。然而，现有的大部分算法不仅只能应用于图像、视频等冗余性较大的载体，而且难以抵御
      
    
    </summary>
    
      <category term="数据安全" scheme="http://yaseng.org/categories/%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="加密域可逆水印" scheme="http://yaseng.org/tags/%E5%8A%A0%E5%AF%86%E5%9F%9F%E5%8F%AF%E9%80%86%E6%B0%B4%E5%8D%B0/"/>
    
      <category term="鲁棒可逆水印" scheme="http://yaseng.org/tags/%E9%B2%81%E6%A3%92%E5%8F%AF%E9%80%86%E6%B0%B4%E5%8D%B0/"/>
    
  </entry>
  
  <entry>
    <title>加密设备攻防(一）</title>
    <link href="http://yaseng.org/encryption-hardware-attack-and-defense-1.html"/>
    <id>http://yaseng.org/encryption-hardware-attack-and-defense-1.html</id>
    <published>2019-12-23T16:00:00.000Z</published>
    <updated>2020-03-01T08:29:24.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>​    随着电子信息产业的高速发展，电子产品对于各类数据处理的技术愈加强大，为人们的工作与社交带来了许多便捷与乐趣的同时，人们的日常生活对各类电子设备的依赖也显而易见，但是，一旦保管不当，我们存储其中的各类数据也将存在着不同程度的安全隐患，因此，随着人们数据安全意识的提高，加密型的电子设备在我们生活中越来越常见。</p><h3 id="硬件加密硬盘"><a href="#硬件加密硬盘" class="headerlink" title="硬件加密硬盘"></a><strong>硬件加密硬盘</strong></h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/1.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/2.jpg" alt="img"></p><h3 id="某加密录音笔"><a href="#某加密录音笔" class="headerlink" title="某加密录音笔"></a>某加密录音笔</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/3.jpg" alt="img"></p><h3 id="某加密手机u盘"><a href="#某加密手机u盘" class="headerlink" title="某加密手机u盘"></a><strong>某加密手机u盘</strong></h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/4.jpg" alt="img"></p><h3 id="硬件钱包"><a href="#硬件钱包" class="headerlink" title="硬件钱包"></a><strong>硬件钱包</strong></h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/5.jpg" alt="img"></p><h3 id="指纹加密u盘"><a href="#指纹加密u盘" class="headerlink" title="指纹加密u盘"></a><strong>指纹加密u盘</strong></h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/6.jpg" alt="img"></p><p>实现加解密的方法各式各样，硬件加密，软件加密甚至有部分奸商以高端加密为噱头挂羊头卖狗肉 ，本系列文章从数智安全研究院多年研究案例结合国内外技术来谈谈各式各样加密的安全性到。</p><h2 id="软件加密类"><a href="#软件加密类" class="headerlink" title="软件加密类"></a><strong>软件加密类</strong></h2><h3 id="某款录音笔的破解"><a href="#某款录音笔的破解" class="headerlink" title="某款录音笔的破解"></a><strong>某款录音笔的破解</strong></h3><p>​尽管现在智能手机已经是必备的产品，但录音笔的市场却已然广阔，核心在于手机的录音功能难以满足复杂录音环境下的各种需求，对音质、录音距离和保密性的等等要求，使录音笔的需求不减，目前市面上的录音笔基础功能类似，大多都具备加密功能，设置密码后，可以使录音文件不会泄密，但对于一般的中低端产品而言，很少会采用硬件加密的方案，对于此类加密产品，可以通过硬件修改进行破解，本文通过分析某款加密录音笔，介绍一种较为简单和低成本的破解思路。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/7.png" alt="img"></p><h4 id="硬件分析"><a href="#硬件分析" class="headerlink" title="硬件分析"></a><strong>硬件分析</strong></h4><p>​该款加密录音笔采用 ATJ3315D 作为主控芯片，是炬力芯片中一款成熟的音频主控芯片，内置 8G Nand flash 闪存芯片，Tsop48 脚封装，查看印字没有标明具体型号，可能是白片或黑片。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/8.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/9.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/10.jpg" alt="img"></p><h4 id="破解思路"><a href="#破解思路" class="headerlink" title="破解思路"></a><strong>破解思路</strong></h4><p>​ 系统可以设置4位数的密码，总共有 10000 种可能，在存在密码的情况下，不输入密码或者输入错误的密码，连上电脑无法识别到可移动设备，主控芯片中应该做了相应逻辑的判断。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/11.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/12.jpg" alt="img"></p><p>​    根据硬件架构，主控芯片没有外置 EEPROM 芯片，密码的加密方式未知，也可能以明文形式存储，芯片内置 ROM 不会存储过多的程序资源和设置，输入正确密码电脑可以识别，并能查看所有录音文件，查看分区大小发现应该存在隐藏分区，可能录音笔的资源和配置都放在隐藏分区里，分区表可能也做了加密。尽管密码只有 4 位数字，但因为操作不便捷，以及输入密码错误3次就会关机，使得暴力破解非常麻烦，如果通过外部飞线和硬改电路进行暴力破解，花费的时间和成本又过高，因此采用另外一种思路进行破解。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h4 id="编程器读写"><a href="#编程器读写" class="headerlink" title="编程器读写"></a><strong>编程器读写</strong></h4><p>​如果密码存储在 flash 芯片中，通过编程器直接读写芯片存储内容，或许会发现密码，首先拆下芯片进行读写，Tsop48 脚封装的可以采用对应的烧录座，只要注意芯片第一脚的位置即可。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/13.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/14.jpg" alt="img"></p><p>​芯片型号识别为：MT29F64G08CBAAA@TSOP48 ，是一款镁光的 8G 存储芯片。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/15.png" alt="img"></p><p>​ 读出的固件文件如下：</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/16.jpg" alt="img">    然而对固件解包却遇到了问题，因为编程器读写 Nand flash 芯片时，是按页顺序读写的，读取出的数据与实际数据存储的地址是不一致的，因此如果需要恢复原来的数据，需要根据芯片型号对应去恢复成原来的数据结构，其中涉及到数据恢复技术，成本较高。</p><h4 id="更换主控"><a href="#更换主控" class="headerlink" title="更换主控"></a><strong>更换主控</strong></h4><p>​数据恢复一般用在 flash 芯片受损时使用，如果存储芯片时完好的，只是主控芯片有问题，换成同样读写算法的主控，大多数情况下是可以识别成功的，但作为录音笔采用炬力芯片，市场上的主流U盘主控并不支持该类型算法，试验银灿和安国的U盘主控都无法识别。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/17.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/18.jpg" alt="img"></p><p>​因为密码和配置都存储在 flash 中，采用同一型号的录音笔，一个加密，另一个不加密，调换 flash 芯片，同样会提示需要密码，而且密码是不变的。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/19.jpg" alt="img"></p><p>​既然同款主控因为内部逻辑代码是一致的，选购了一款同品牌的不同款录音笔，拆解发现主控芯片是一致的，硬件架构基本相同，随即把原来加密的存储芯片换至新的录音笔中。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/20.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/21.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/22.jpg" alt="img"></p><h4 id="破解成功"><a href="#破解成功" class="headerlink" title="破解成功"></a><strong>破解成功</strong></h4><p>​更换完成后，重新开机，发现屏幕正常点亮，插入电脑，成功识别，存储的文件为上个加密录音笔的文件，说明破解成功。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/23.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/24.jpg" alt="img"></p><h3 id="某款手机U盘破解"><a href="#某款手机U盘破解" class="headerlink" title="某款手机U盘破解"></a><strong>某款手机U盘破解</strong></h3><p>​    随着人们对数据安全意识的提高，借这股东风，越来越多的厂商推出了带有加密功能的U盘，然后国情如此，部分黑心厂商给一些低质量的U盘加上了所谓的 “多重加密” 功能，就堂而皇之的以高价售卖。其硬件组成不过是一张 micro SD 卡加上读卡座和 usb 插头。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/25.jpg" alt="img"></p><p>​其硬件组成不过是一张 micro SD 卡加上读卡座和 usb 插头。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/26.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/27.jpg" alt="img"></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2019/12/28.jpg" alt="img"></p><p>​而其所谓的多重加密，不过是最简单的软件层加密，都不要去逆向app 的算法，直接替换 u盘 根目录下面的 .hash1.txt .hash2.txt 即可破解，毫无保密可言，黑心程度可见一斑，对加密 U 盘有需求的用户，还是推荐买大品牌的，毕竟便宜无好货，自古以来的真理。</p><p><strong>总结</strong></p><p>​对于软件层面的加密，破解往往是非常简单低成本的，直接替换掉芯片或者替换加密key即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​    随着电子信息产业的高速发展，电子产品对于各类数据处理的技术愈加强大，为人们的工作与社交带来了许多
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="u 盘破解" scheme="http://yaseng.org/tags/u-%E7%9B%98%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="移动硬盘破解" scheme="http://yaseng.org/tags/%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="录音笔破解" scheme="http://yaseng.org/tags/%E5%BD%95%E9%9F%B3%E7%AC%94%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Hack All The Things</title>
    <link href="http://yaseng.org/hack-all-the-things.html"/>
    <id>http://yaseng.org/hack-all-the-things.html</id>
    <published>2019-05-19T16:00:00.000Z</published>
    <updated>2020-04-16T09:33:28.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>长沙 defcon 沙龙议题 《Hack All The Things》</p><h3 id="研究矩阵"><a href="#研究矩阵" class="headerlink" title="研究矩阵"></a>研究矩阵</h3><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce639accc684.png" alt=""></p><hr><h3 id="研究成果"><a href="#研究成果" class="headerlink" title="研究成果"></a>研究成果</h3><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce639f635be9.png" alt=""></p><hr><h3 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h3><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63b2ec4c4a.png" alt=""></p><hr><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="智能家居安全"><a href="#智能家居安全" class="headerlink" title="智能家居安全"></a>智能家居安全</h3><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>智能家居（Smart Home, Home Automation）是以住宅为平台，利用综合布线技术、网络通信技术、 安全防范技术、自动控制技术、音视频技术将家居生活有关的设施集成，构建高效的住宅设施与家庭日程事务的管理系统，提升家居安全性、便利性、舒适性、艺术性，并实现环保节能的居住环境。 随着物联网快速发展，智能家居会成为每个家庭的一部分，而由于物联网硬件，具有封闭性，以及可以长期控制，用于窃听隐私，偷盗，挖矿等等，因此研究智能家居安全跟每个人都息息相关。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63d011eac9.png" alt=""></p><h4 id="硬件安全"><a href="#硬件安全" class="headerlink" title="硬件安全"></a>硬件安全</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63d6dc20ee.png" alt=""></p><h4 id="硬件安全攻防"><a href="#硬件安全攻防" class="headerlink" title="硬件安全攻防"></a>硬件安全攻防</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63da9d9247.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63ddc40024.png" alt=""></p><h4 id="攻击演示"><a href="#攻击演示" class="headerlink" title="攻击演示"></a>攻击演示</h4><h5 id="路由器固件提取"><a href="#路由器固件提取" class="headerlink" title="路由器固件提取"></a>路由器固件提取</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce63e339a307.png" alt=""><br>利用热风枪拆下路由器存储Flash芯片，并用烧录座和编程器读取路由器固件。</p><h5 id="路由器固件逆向分析"><a href="#路由器固件逆向分析" class="headerlink" title="路由器固件逆向分析"></a>路由器固件逆向分析</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce6411e7cd75.png" alt=""><br>使用IDA逆向固件，查看 formDefineCGIjson 中的引用位置发现 websFormDefine 的第二个参数被置为 sub_457ebc 的指针。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce641643604a.png" alt=""><br>发现 bl_do_system 函数的参数为刚才格式化好的字符串，推测此处存在命令执行的问题。</p><h6 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h6><p><strong>远程攻击</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce6420750f5d.png" alt=""><br>通过社交软件发布钓鱼链接，点击某个链接即可在路由器上植入后门。</p><p><strong>内网攻击</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce6427e87cc7.jpg" alt=""><br>通过接入内网，使用攻击脚本执行命令并植入后门。</p><h5 id="路由器POC利用并植入木马"><a href="#路由器POC利用并植入木马" class="headerlink" title="路由器POC利用并植入木马"></a>路由器POC利用并植入木马</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce643aacc0c6.png" alt=""><br>通过逆向分析发现该路由器存在远程溢出漏洞，构造POC，可以更改管理员密码，且能崩溃 web 服务器，通过POC植入远程控制木马。</p><h5 id="扩大攻击成果"><a href="#扩大攻击成果" class="headerlink" title="扩大攻击成果"></a>扩大攻击成果</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce6442eb7c1e.png" alt=""><br>通过路由器远程植入木马，侵入内网，进一步扩大攻击成果，获取内网更多设备权限。</p><h5 id="渗透更多智能设备"><a href="#渗透更多智能设备" class="headerlink" title="渗透更多智能设备"></a>渗透更多智能设备</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce644b80130a.png" alt=""><br>通过入口木马，全面攻陷内网设备，并在摄像头、智能电视机上植入隐蔽后门，长期潜伏。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce644e54f869.png" alt=""><br>通过远程平台，全面掌握智能设备权限，实时监控，获取更多信息。</p><h3 id="车联网安全"><a href="#车联网安全" class="headerlink" title="车联网安全"></a>车联网安全</h3><h4 id="意义-1"><a href="#意义-1" class="headerlink" title="意义"></a>意义</h4><p>车联网（ IoV即Internet of Vehicles），它属于物联网（IoT，Internet of Things）的一种应用场景，车联网将物联网的范围限定到车与路、车与人，车与车、车和数据平台以及车与传感设备上，各个车辆通过车载互联网经由无线网络、无线电传播技术来实现车辆间、车辆与数据平台的时通信。实际上，真正的车联网，就是V2X（车连万物）。随着多起汽车黑客攻击事件的发生，车载调制解调器和其他无线连接设备的出现，将网络安全问题推到了风口上。监管机构和公众已被迫正视自己的担忧，即违规车辆会威胁司机、乘客和行人的生命。因此车联网的安全研究是一项保障车主、车企乃至社会安全的重要工作。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce645d8056b7.png" alt=""></p><h4 id="智能网联汽车安全"><a href="#智能网联汽车安全" class="headerlink" title="智能网联汽车安全"></a>智能网联汽车安全</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce66e32a38be.png" alt=""></p><h4 id="自动驾驶安全风险点"><a href="#自动驾驶安全风险点" class="headerlink" title="自动驾驶安全风险点"></a>自动驾驶安全风险点</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce66e8502c03.png" alt=""></p><h4 id="车内网络构架"><a href="#车内网络构架" class="headerlink" title="车内网络构架"></a>车内网络构架</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce66f3911956.png" alt=""></p><h4 id="攻击演示-1"><a href="#攻击演示-1" class="headerlink" title="攻击演示"></a>攻击演示</h4><h5 id="T-BOX分析"><a href="#T-BOX分析" class="headerlink" title="T-BOX分析"></a>T-BOX分析</h5><p><strong>T-BOX 硬件分析调试</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce66fe74948a.jpg" alt=""></p><p><strong>T-BOX 固件逆向分析挖掘漏洞</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce66fef7d369.png" alt=""></p><h5 id="IVI分析"><a href="#IVI分析" class="headerlink" title="IVI分析"></a>IVI分析</h5><p><strong>IVI 硬件分析、调试</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce762d1561fe.jpg" alt=""><br><strong>IVI 车载 APP逆向分析挖掘漏洞</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce762de72b14.png" alt=""></p><h5 id="车内CAN网络分析"><a href="#车内CAN网络分析" class="headerlink" title="车内CAN网络分析"></a>车内CAN网络分析</h5><p><strong>车内CAN网络进行分析</strong></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce76388ec8dd.jpg" alt=""></p><p><strong>发送指令控制汽车，使仪表盘超速报警</strong></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce766ef26854.png" alt=""></p><h5 id="IVI种植木马并远程控制"><a href="#IVI种植木马并远程控制" class="headerlink" title="IVI种植木马并远程控制"></a>IVI种植木马并远程控制</h5><p><strong>挖掘出某个高危溢出漏洞并远程种植木马</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce789352c12f.jpg" alt=""></p><p><strong>发送指令控制汽车，使仪表盘超速报警</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7895676484.jpg" alt=""></p><h5 id="汽车远程控制平台"><a href="#汽车远程控制平台" class="headerlink" title="汽车远程控制平台"></a>汽车远程控制平台</h5><p><strong>远程控制平台和部分控制代码，通过远程平台实现对车辆的控制和车辆状态信息获取</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce789bf30f1f.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce789d06942e.png" alt=""></p><p><strong>通过硬件木马实现远程对发动机的控制</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78a3cd3bfd.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78a4704864.jpg" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78a55aceea.png" alt=""></p><h5 id="模拟汽车攻击平台"><a href="#模拟汽车攻击平台" class="headerlink" title="模拟汽车攻击平台"></a>模拟汽车攻击平台</h5><p><strong>实验车辆模拟器，模拟发动机ECU、OBD、网关，方向盘控制</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78b079cad3.jpg" alt=""></p><p><strong>PC端控制平台</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78b10438c4.png" alt=""></p><h3 id="芯片安全"><a href="#芯片安全" class="headerlink" title="芯片安全"></a>芯片安全</h3><h4 id="研究意义"><a href="#研究意义" class="headerlink" title="研究意义"></a>研究意义</h4><p>芯片安全是针对芯片本身的安全研究，其在知识产权保护，防抄板山寨、加密解密、优化设计、漏洞挖掘和芯片木马等方面都具有深远意义，传统安全往往着眼于上层应用和驱动层面的安全，然而如果芯片存在本质的设计缺陷或安全漏洞，传统安全手段往往很难触及底层，前段时间英特尔芯片的“崩溃”（Meltdown）和“幽灵”（Spectre）漏洞，轰动整个世界，造成了巨额的损失，此次漏洞爆发就是因为芯片自身的设计缺陷所导致的，芯片分析方式主要包括非侵入式、半侵入式、侵入式、侧信道等。</p><h4 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h4><p><strong>侧信道分析</strong>：根据电磁学、热力学、光电学等分析、芯片时运行的功耗、电磁辐射、光子辐射等。</p><p><strong>非侵入式分析</strong>：保持芯片的完整性，通过外部分析芯片，采用电压、时钟、电流信号进行干扰。</p><p><strong>半侵入式分析</strong>：对芯片进行开片处理，分析电路构成，破解保护电路和熔丝设置等安全措施。</p><p><strong>侵入式分析</strong>：开片去除多层封装，采用微探针、SEM、FIB等设备在亚微米级对芯片进行读取、修改或反向。</p><h4 id="破解硬件加密指纹U盘"><a href="#破解硬件加密指纹U盘" class="headerlink" title="破解硬件加密指纹U盘"></a>破解硬件加密指纹U盘</h4><p>某款采用硬件AES-256位加密算法的指纹U盘，存在算法和通信漏洞，通过硬件加软件结合的方式进行破解。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/1.png" alt="img"></p><h5 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h5><p>通过电磁分析，发现存在比较明显的AES 加密周期性电磁泄露。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/2.png" alt="img"></p><h4 id="破解硬件加密指纹U盘-1"><a href="#破解硬件加密指纹U盘-1" class="headerlink" title="破解硬件加密指纹U盘"></a>破解硬件加密指纹U盘</h4><h5 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h5><p>通过电磁分析加解密过程的电磁泄露，获得能量迹，结合逻辑分析仪抓取spi总线数据，分析出指纹识别过程中的整个通信框架，以及加密轮询、加密的key等信息 。然后逆向固件分析出具体的算法，得到key ，在通过 spi从机伪造指纹模块发送成功指令，即可实现破解。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/3.png" alt="img"></p><h4 id="攻击演示-2"><a href="#攻击演示-2" class="headerlink" title="攻击演示"></a>攻击演示</h4><h5 id="芯片分析"><a href="#芯片分析" class="headerlink" title="芯片分析"></a>芯片分析</h5><p>通过示波器和逻辑分析仪抓取总线波形。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/4.png" alt="img"></p><p>通过频谱仪和电磁探针抓取芯片电磁泄露，分析AES加密轮。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/5.png" alt="img"></p><h5 id="算法破解"><a href="#算法破解" class="headerlink" title="算法破解"></a>算法破解</h5><p>连接SPI从机。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/6.1.png" alt=""></p><p>PC端运行破解程序实现算法解密并获取加密盘符内容。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/3/7.png" alt="img"></p><h3 id="锁具安全"><a href="#锁具安全" class="headerlink" title="锁具安全"></a>锁具安全</h3><h4 id="意义-2"><a href="#意义-2" class="headerlink" title="意义"></a>意义</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78b8f03603.png" alt=""><br>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁作为智能家居市场上发展最为迅速的品类之一，在锁具市场上所占的份额会越来越大，甚至超过传统锁，成为主流，而智能锁可能暴露的安全问题比传统机械锁更大，机械锁具的攻击点主要在锁芯和锁体结构，而智能锁除此之外，涉及到云端通信、移动端、集成电路模块、指纹、声纹、图像识别、RFID 等等关键技术，暴露的攻击点更多，攻击方式更加隐蔽，可能造成的危害更大，另外许多智能锁厂商并非传统锁具厂商转型过来的，在锁具生产加工制造上，更容易造成机械和设计结构上的物理缺陷，是智能锁安全问题不可忽视的一环。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78bd2436db.png" alt=""></p><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78c2153aa9.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78cc054b7f.png" alt=""></p><h5 id="破解蓝牙锁"><a href="#破解蓝牙锁" class="headerlink" title="破解蓝牙锁"></a>破解蓝牙锁</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78cfd962be.png" alt=""></p><p><strong>利用抓包工具抓取蓝牙信号进行分析</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78d6d10faf.png" alt=""></p><p><strong>编写攻击脚本实现自动开锁</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78d8b1d679.png" alt=""></p><p><strong>攻击演示</strong><br><a href="http://https://www.bilibili.com/video/av31973266" title="蓝牙锁重放攻击" target="_blank" rel="noopener">蓝牙锁重放攻击</a></p><h5 id="破解声波锁"><a href="#破解声波锁" class="headerlink" title="破解声波锁"></a>破解声波锁</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78ed48ff6e.png" alt=""><br>随着支付宝的声波支付技术的出现，声波通信非常火爆，在很多嵌入式设备中的应用倍受关注(Android、iOS、Linux等)， 声波技术从理论上决定了它比较适合做短距离、少量信息的传输。一些智能锁厂商也瞄准了声波通信这块，利用声波的便捷性，研发出了声波锁，目前已有成品上市。</p><p><strong>攻击演示</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78f7354b8f.png" alt=""><br>声波通信的原理其实比较简单，主要包括两种方式，其一是用单频率声音信号对数据进行编码，然后播放这些单频率声音，接收方在收到声音后，识别出频率，然后根据频率解码出数据。比如：我们可以将1500Hz的正弦波对应数字1，1600Hz的正弦波对应数字2，1700Hz的正弦波对应数字3。那么数字串3123就对应4段正弦波，规定每段正弦波持续100ms，则3123对应400毫秒的声音段。接收方录制声音，对收到的声音进行解析，识别出1700Hz，1500Hz，1600Hz，1700Hz四段正弦波频率，然后查找码本，解码出的数字就是3123。<br>第二种方式采用在固定时域内生成一段特定频率变化的正弦波作为一个设定周期，通过控制该波在一个大周期内间隔的时间和出现的次数作为编码依据，类似于传统的摩斯密码的编码方式，接收方识别出对应频率变化的波形后，在通过码本解码出对应的信息。<br>而声波的形成是通过多个正弦波叠加而来的，根据傅里叶变换，只需要提供振幅、频率、相位三个基础的正弦波A.sin(wt+θ)参数，就可以得到真实需要的波形，在通过浏览器渲染或APP渲染输出就是承载信息的声波。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce78fd2424d8.png" alt=""><br>该声波锁板载德州仪器的MSP430G2553超低功耗混合信号微控制器，用来处理接收到的声波。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7906282a75.png" alt=""><br>录制一段通过APP开锁的声音，导入声音分析软件中，发现频率基本在7500KHz上波动。 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce790be88551.png" alt=""><br>通过观察波形变化，发现其变化的一个规律，该音频采用的是在一个周期内，通过控制设定波段的播放次数作为编码方式，并且相邻波段之间的时间间隔为某个固定时间值为倍数，猜测编码方式为第二种。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7912baf0fc.png" alt=""><br>提取固件并进行逆向分析，解密算法密钥</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce791565982b.png" alt=""><br>制作开锁软件，利用算法生成开锁音频，实现开锁</p><h5 id="物理攻击"><a href="#物理攻击" class="headerlink" title="物理攻击"></a>物理攻击</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce791e0c2640.png" alt=""><br>使用特制工具从锁与门的缝隙中插入，拨动锁柱实现开锁。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7923f953c8.png" alt=""><br>伪造指纹开锁，通过特殊材料伪造指纹模型开锁。</p><h5 id="电磁攻击"><a href="#电磁攻击" class="headerlink" title="电磁攻击"></a>电磁攻击</h5><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce792d906b07.png" alt=""><br>电磁故障开锁，利用外部电磁源干扰锁具内部执行逻辑，使锁具重启或电机错转开锁</p><h3 id="线下场景攻击探索"><a href="#线下场景攻击探索" class="headerlink" title="线下场景攻击探索"></a>线下场景攻击探索</h3><h4 id="某品牌共享单车破解"><a href="#某品牌共享单车破解" class="headerlink" title="某品牌共享单车破解"></a>某品牌共享单车破解</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7933bd01a4.png" alt=""></p><h4 id="某无人商店破解"><a href="#某无人商店破解" class="headerlink" title="某无人商店破解"></a>某无人商店破解</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7936d97c9d.png" alt=""></p><h4 id="某品牌快递柜破解"><a href="#某品牌快递柜破解" class="headerlink" title="某品牌快递柜破解"></a>某品牌快递柜破解</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce793a8c12d3.png" alt=""></p><h3 id="IoT芯片Fuzz思路"><a href="#IoT芯片Fuzz思路" class="headerlink" title="IoT芯片Fuzz思路"></a>IoT芯片Fuzz思路</h3><h4 id="IoT射频芯片网络协议栈Fuzz方案设计思路"><a href="#IoT射频芯片网络协议栈Fuzz方案设计思路" class="headerlink" title="IoT射频芯片网络协议栈Fuzz方案设计思路"></a>IoT射频芯片网络协议栈Fuzz方案设计思路</h4><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce794037efa9.png" alt=""></p><ul><li>传统TCP/IP网络协议栈实现具有操作系统支持，CPU运行于保护模式，应用程序和操作系统内核运行于虚拟地址空间内，对协议栈进行Fuzz可以使用Windbg，Gdb等调试器监测异常和崩溃。</li><li>IoT设备的网络协议栈实现通常位于各种射频芯片上，由射频芯片提供无线透传功能。MCU为某种单片机，程序运行于实模式地址空间内，资源较少。出现异常可以由看门狗自动复位，异常不容易被监测。</li><li>传统Fuzz工具主要由数据定义，变异生成，测试逻辑，错误监视和Log记录等模块组成，各种模块可以无缝配合运行在同一台机器上。</li><li>类比于传统Fuzz工具设计架构，下面分别介绍IoT设备Fuzz方案对各个模块的设计思路：</li><li>1.确定目标及输入向量</li><li>以乐鑫公司生产的ESP8266射频芯片为例，其支持802.11 b/g/n 协议标准.官方SDK中以库的形式提供了802.11协议簇及TCP/IP协议栈的实现。其输入向量为MAC帧.不同的协议标准使用不同的调制方式(物理层)，需要专用的硬件电路编码和解码对应频率的电波。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7946e33846.png" alt=""></li><li>针对这种射频协议的Fuzz，物理层可以使用SDR或FPGA实现,MAC层数据定义及变异模块可以使用软件实现。因为802.11协议要求的带宽较大，数据率较大等原因，对SDR平台的性能要求较高，所以较少有SDR/WIFI平台的项目。基于GUNRadio的Gr-ieee802-11项目是一个较为完整的 SDR/WIFI 项目,可基于此项目组建射频前端。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce794a7e7c53.png" alt=""></li><li>2.执行模糊测试数据及监视异常</li><li>ESP8266射频模块接收到引发异常的数据包后会由看门狗自动复位。利用JTAG调试接口及Openocd监测芯片异常，异常之后Openocd会将MCU暂停，使用GDB能够查看函数调用栈<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7952baca9c.png" alt=""><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/ppt_img/5ce7953674010.png" alt=""></li><li>3.测试逻辑及Log记录</li><li>根据以上信息可以编写测试逻辑模块及Log记录，保存引发异常的数据包用来复现异常。</li><li>4.分析漏洞是否可被利用</li><li>查看芯片手册，判断是否可以通过FLASH编程修改固件，开发EXP及定制固件达到长期驻留的目的</li><li>分析电路原理图，查看芯片外设引脚，判断是否可以利用DMA等功能修改其他FLASH数据，达到侧信道提权等目的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;长沙 defcon 沙龙议题 《Hack All The Things》&lt;/p&gt;
&lt;h3 id=&quot;研究矩阵&quot;&gt;&lt;a href=&quot;#研究矩阵&quot;
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="芯片安全" scheme="http://yaseng.org/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能锁安全" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能锁破解" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="指纹锁破解" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="开锁" scheme="http://yaseng.org/tags/%E5%BC%80%E9%94%81/"/>
    
      <category term="蓝牙锁破解" scheme="http://yaseng.org/tags/%E8%93%9D%E7%89%99%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="声波锁破解" scheme="http://yaseng.org/tags/%E5%A3%B0%E6%B3%A2%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="保险柜破解" scheme="http://yaseng.org/tags/%E4%BF%9D%E9%99%A9%E6%9F%9C%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="共享单车破解" scheme="http://yaseng.org/tags/%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="加密U盘破解" scheme="http://yaseng.org/tags/%E5%8A%A0%E5%AF%86U%E7%9B%98%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>智能锁行业安全分析报告</title>
    <link href="http://yaseng.org/intelligent-lock-industry-safety-report.html"/>
    <id>http://yaseng.org/intelligent-lock-industry-safety-report.html</id>
    <published>2019-02-01T16:00:00.000Z</published>
    <updated>2020-04-16T08:21:39.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/1.png" alt="img"></p><h2 id="锁具发展"><a href="#锁具发展" class="headerlink" title="锁具发展"></a>锁具发展</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/2.png" alt="img"></p><h2 id="智能锁市场发展前景"><a href="#智能锁市场发展前景" class="headerlink" title="智能锁市场发展前景"></a>智能锁市场发展前景</h2><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。</p><p>2016年全球市场智能锁产业规模达到1100万套。其中日本达到150万套，韩国达到170万套，欧美市场达到250万套，中国达到350万套，其它等市场约200万套， 预计到2020年全球智能锁产业规模将达到5100万套 。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/3.png" alt="img"></p><h2 id="智能锁具产品分析"><a href="#智能锁具产品分析" class="headerlink" title="智能锁具产品分析"></a>智能锁具产品分析</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/4.png" alt="img"></p><p>我国的智能锁大多数采用密码、指纹、手机等多种识别方式。其中，半导体指纹识别和光学指纹识别，是目前我国智能锁行业最主流的的指纹识别技术。</p><p>随着智能锁相关技术的日益成熟和发展，人脸识别、手机开锁、虹膜开锁、物联网技术等相继诞生，我国智能锁产品的功能和应用将更加丰富多元，也将进一步促进未来智能锁与智能家居的同步发展和高度融合。</p><h2 id="智能锁市场消费因素分析"><a href="#智能锁市场消费因素分析" class="headerlink" title="智能锁市场消费因素分析"></a>智能锁市场消费因素分析</h2><p>根据消费者的考虑因素以及智能门锁行业的发展趋势，安全、便捷和适用将会成为产品主流，行业将会出现以消费者主导的消费者品牌，而不是行业品牌，这就要求相关企业要足够洞悉消费者的心理。而最受消费者在意的安全性，将会得到进一步的强化，逐渐在真正意义上彰显智能门锁是人们隐私的保护神这一角色。</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/5.png" alt="img"></p><p>根据消费者购买智能门锁考虑因素的调查结果显示，86.8%的消费者重视智能门锁的安全性，其次消费者考虑最多的便是实用性和便捷性，再有就是质量。</p><h2 id="智能锁具安全模型"><a href="#智能锁具安全模型" class="headerlink" title="智能锁具安全模型"></a>智能锁具安全模型</h2><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/6.png" alt="img"></p><p><strong>木桶原理在智能锁安全中的新诠释</strong></p><p>整体的安全性不仅由木桶最短的木板决定，更取决于木桶底部是否完好，如果底部存在漏洞，木板在高也是没有意义的，都是空谈，物理安全在智能锁具安全层面就相当于木桶的底部。根据物理安全思想建设锁具安全实验室，寻找锁具在声、光、电、磁、机械构造等各方面的安全隐患。</p><h2 id="智能锁安全隐患分析"><a href="#智能锁安全隐患分析" class="headerlink" title="智能锁安全隐患分析"></a>智能锁安全隐患分析</h2><h3 id="机械物理结构安全"><a href="#机械物理结构安全" class="headerlink" title="机械物理结构安全"></a>机械物理结构安全</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/7.png" alt="img"></p><h3 id="识别与控制领域安全"><a href="#识别与控制领域安全" class="headerlink" title="识别与控制领域安全"></a>识别与控制领域安全</h3><p>目前智能锁生物识别的主要方式仍旧是指纹识别，指纹传感器集成在锁上，指静脉和人脸目前还不是主流方<br>式，指纹识别组件的安全风险主要如下：</p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/8.png" alt="img"></p><p><strong>用户指纹模板和数据存储在智能锁内的安全隐患</strong></p><ul><li>指纹模板和数据的安全和被盗取隐患</li><li>智能锁内如没有国家认证的安全芯片，指纹模板和数据有被盗取或替换的隐患</li><li>假指纹的安全隐患，用户的部分或全被指纹信息被盗取克隆制作假指纹</li><li>由于指纹传感器在智能锁上，假指纹通过指纹传感器尝试开锁</li><li>3D高清图像和指纹算法可以部分解决假指纹问题</li></ul><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/9.png" alt="img"></p><p><strong>用户指纹模板和数据存储在云端的安全隐患</strong></p><ul><li>指纹模板和数据的网络传输有攻击风险</li><li>需要建立数据传输安全机制</li><li>云端存储风险</li><li>需要建立数据存储安全机制</li></ul><h3 id="通讯与服务领域安全"><a href="#通讯与服务领域安全" class="headerlink" title="通讯与服务领域安全"></a>通讯与服务领域安全</h3><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/10.png" alt="img"></p><ul><li>智能门锁接入外部网络后，受到黑客攻击的风险加剧，现有智能门锁和手机APP对外通讯不少厂家没有使用安全措施，只有部分使用软件数据加密的方案，极少部分厂家使用了硬加密的方案。</li><li>门锁厂商多数认为远程开锁的安全性较为不可控，所以，即使支持手机APP远程开锁等的功能，但尚未实际开通。</li><li>部分厂家将智能门锁中所存储的密钥、指纹特征值、其他敏感信息等均保存在软件固件中，一旦被黑客攻击，用户不仅失去对自己门锁的控制权，还会泄露自身的身份信息，这是对用户的财产和人身安全的双重风险。</li><li>部分门锁厂商后台服务器存储了与门锁相匹配的密钥信息，一旦门锁遭到破解，黑客甚至可以反向攻击厂商的服务器。</li><li>云服务方面大多数厂家使用外采云平台，但部分厂家只购买了虚拟机没有购买防御安全攻击的服务。</li></ul><h3 id="其他领域的安全隐患"><a href="#其他领域的安全隐患" class="headerlink" title="其他领域的安全隐患"></a>其他领域的安全隐患</h3><p><strong>智能锁密码键盘组件的安全风险</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/11.png" alt="img"></p><ul><li>键盘无遮挡，密码存在被偷窥风险</li><li>在键盘表面安装overlay，存在获取密码风险</li><li>不同按键声音可能不同，存在泄露密码的风险</li><li>缺少主动探测的防拆机制，存在安装物理攻击设备窃取密码的风险</li></ul><p><strong>智能锁固件提取和逆向风险</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/12.png" alt="img"></p><ul><li>主控芯片未进行保护，固件程序存在被提取和逆向风险，导致知识产权泄露</li><li>对固件进行逆向，容易造成隐私泄露的风险</li></ul><p><strong>智能锁IC卡组件的安全风险</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/13.png" alt="img"></p><ul><li>ID卡等只判断卡片ID号，很容易通过卡片复制，实现开锁</li><li>mifare 1等类似的逻辑卡或 promark RFID破解工具，可以从市面购买读卡器，实现复制卡片</li><li>CPU卡，如果IC卡没有安全级别认证，可通过攻击手段实现卡片复制</li></ul><p><strong>智能锁侧信道攻击安全风险</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/14.png" alt="img"></p><ul><li>充电口进行电压毛刺攻击，可能导致锁体逻辑混乱进入非预期状态，或解锁过程中进行攻击绕过鉴权</li><li>进入调试模式（安卓、私有化系统）</li><li>通过电磁注入攻击，可能导致芯片重置复位，或绕过某些重要逻辑判断</li></ul><h2 id="智能锁安全发展展望"><a href="#智能锁安全发展展望" class="headerlink" title="智能锁安全发展展望"></a>智能锁安全发展展望</h2><h3 id="机械结构领域"><a href="#机械结构领域" class="headerlink" title="机械结构领域"></a>机械结构领域</h3><p>随着新材料、新工艺的逐步发展，随着机电一体化技术在智能锁领域的成熟应用，未来智能锁在机械机构领域必将迎来新的发展。</p><ol><li>在整体机械结构设计上，目前较为混杂，不同的厂家有不同的风格与标准，有的结构相对简单，功能较少，有的很复杂，附加功能也比较多。但是，智能锁始终是一个稳定为第一要务的产品，未来设计上总体会趋同，稳定的结构方案逐步淘汰不稳定的方案，结构上总体会趋于简单与整合。</li><li>材料与工艺方面，目前锁具所用的材料主要为锌合金与不锈钢为主，少部分使用铝合金。基于智能锁安全可靠的属性，预期未来随着在高端锁中钛合金、碳纤维、铜合金将逐步应用的智能锁中。而随着电镀、烤漆等表面处理工艺的环保问题的日益突出，未来包括金属贴膜、钢化玻璃、陶瓷等工艺将有可能更多的应用于智能锁领域。</li><li>锁体方面，虽然目前全自动的锁体存在不少缺陷，但是锁体的全自动化肯定是个趋势，这能大幅提升用户的体验，相信随着技术的突破，全自动锁体将会进一步提升市场份额。</li></ol><h3 id="生物识别技术"><a href="#生物识别技术" class="headerlink" title="生物识别技术"></a>生物识别技术</h3><p><strong>人工智能识别</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/15.png" alt="img"></p><ul><li>多因子组合验证</li><li>按需组合验证因子</li><li>验证因子采集，存储，传输符合安全规范要求</li></ul><h3 id="通信与安全服务技术"><a href="#通信与安全服务技术" class="headerlink" title="通信与安全服务技术"></a>通信与安全服务技术</h3><h4 id="技术展望"><a href="#技术展望" class="headerlink" title="技术展望"></a>技术展望</h4><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/16.png" alt="img"></p><ul><li>通用密码技术讲在智能门锁普及，并极大的提高数字安全强度。</li><li>伴随硬件及软件技术的发展，数字安全将广泛适用于智能门锁。</li><li>安全载体SE，TEE，TrustZone等安全技术将为智能门锁的各种场景提供安全运行环境。</li></ul><h4 id="安全展望"><a href="#安全展望" class="headerlink" title="安全展望"></a>安全展望</h4><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/17.png" alt="img"></p><p><strong>智能门锁</strong><br>添加硬件保护SE，支持安全启动、安全升级、安全存储、身份识别和安全通讯等功能。</p><p><strong>智能家居网关</strong><br>添加硬件保护SE，支持安全启动、安全升级、安全存储、身份识别和安全通讯等功能。</p><p><strong>手机APP</strong><br>添加安全加固的方案，采用具有身份认证，敏感信息输入安全防护，敏感数据安全存储、安全传输，代码防篡改、防逆向、防重打包、防调试等防护措施。</p><p><strong>云服务</strong><br>添加防御安全攻击的服务，定期进行安全漏洞扫描。</p><p><strong>智能锁厂家</strong><br>定期对系统、设备做安全方面的审计和评估，对评估报告中的安全漏洞进行升级；公司建立专门的有效的安全事件应对预案，能够在出现安全事件的时候及时跟踪和处理。</p><h3 id="安全芯片技术"><a href="#安全芯片技术" class="headerlink" title="安全芯片技术"></a>安全芯片技术</h3><p><strong>智能锁安全芯片设计架构</strong></p><p><img src="https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.com/2020/4/2/18.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于我们&quot;&gt;&lt;a href=&quot;#关于我们&quot; class=&quot;headerlink&quot; title=&quot;关于我们&quot;&gt;&lt;/a&gt;关于我们&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://yaseng-1251294608.cos.ap-guangzhou.myqcloud.
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁安全" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能锁破解" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="指纹锁安全" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="指纹锁破解" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="长毛开锁" scheme="http://yaseng.org/tags/%E9%95%BF%E6%AF%9B%E5%BC%80%E9%94%81/"/>
    
      <category term="长毛锁王" scheme="http://yaseng.org/tags/%E9%95%BF%E6%AF%9B%E9%94%81%E7%8E%8B/"/>
    
  </entry>
  
  <entry>
    <title>智能锁具攻防一:初探</title>
    <link href="http://yaseng.org/intelligent-lock-attack-and-defense-1.html"/>
    <id>http://yaseng.org/intelligent-lock-attack-and-defense-1.html</id>
    <published>2018-10-27T16:00:00.000Z</published>
    <updated>2020-04-16T10:22:26.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从原始公有制的瓦解到私有制意识的萌芽，人类社会逐渐从愚昧走向了文明，而伴随着私有制的诞生，锁具也应运而生，作为保护私有财产的重要手段，锁具随着文明的发展，也走过了近5000个年头，而锁具的发展，从某个程度上也体现出了科学技术的进步，正因为锁具在现实生活中的重要地位，作为人身财产安全的保护神，其安全可靠性就是其生命力所在，不安全锁具无疑是给生活留下了极大的安全隐患，本篇是锁具安全系列开篇之作，通过行业分析和实战经验，简单总结了锁具面临的主要安全风险，其中恐多谬误之处，以待后续完善。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/werwet.png" alt="werwet"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image19.jpg" alt="image19"></p><h2 id="锁具分类和发展"><a href="#锁具分类和发展" class="headerlink" title="锁具分类和发展"></a>锁具分类和发展</h2><h3 id="锁具发展历程"><a href="#锁具发展历程" class="headerlink" title="锁具发展历程"></a>锁具发展历程</h3><p> 公元前3000年的中国仰韶文化遗址中，就留存有装在木结构框架建筑上的木锁。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image17.jpg" alt="image17"></p><p> 汉代时，中国铁制三簧锁的技术已具有相当高的水平。三簧锁前后沿用了1000多年。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image18.jpg" alt="image18"></p><p>公元18世纪，英国人丹尼克·波特发明出凸轮转片锁，锁内金属叶片利用弹簧控制转动，钥匙插入锁内必须先转动叶片接触到锁舌缺口才开启。叶片锁的钥匙造型美观大方，被公认为锁和钥匙的标志。</p><p>1848年，美国人 L.耶尔发明采用圆柱形销栓的弹子锁，人类从此进入现代锁时代，该锁通过对弹子的组合排列，使锁的编号由原有的2500种变化达到百万种，从而大大提高锁的保密与安全性能，已成为世界上使用最普遍的锁。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image20.jpg" alt="image20"></p><p>20世纪70年代，随着微电子技术的应用，出现了磁控锁、声控锁、超声波锁、红外线锁、电磁波锁、电子卡片锁、八佰指纹锁、视网膜锁、遥控锁等。近些年随着物联网的发展，WIFI锁、蓝牙锁等新型锁具不断涌现。这些锁具有机械结构所无法比拟的高保密性能。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image21.jpg" alt="image21"></p><h3 id="智能锁的发展"><a href="#智能锁的发展" class="headerlink" title="智能锁的发展"></a>智能锁的发展</h3><p>随着物联网各类技术的逐步进步，越来越多的智能设备出现在我们生活中，智能锁在锁具市场上所占的份额将会越来越大，甚至超过传统锁，成为主流。<br>2016年全球市场智能锁产业规模达到1100万套。其中日本达到150万套，韩国达到170万套，欧美市场达到250万套，中国达到350万套，其它等市场约200万套， 预计到2020年全球智能锁产业规模将达到5100万套 。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/11.png" alt="11"></p><h3 id="锁具的分类"><a href="#锁具的分类" class="headerlink" title="锁具的分类"></a>锁具的分类</h3><h4 id="机械锁"><a href="#机械锁" class="headerlink" title="机械锁"></a>机械锁</h4><p>在我国，根据公安部门在1994年颁布的GA/T73-94《机械防盗锁》标准规定。从技术开启的时长来确定，防盗门锁分为两个等级：A级锁、B级锁，在民间因锁具企业的宣传造势，存在有超B级、C级锁的说法，国家尚不承认这两个分级。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image23.jpg" alt="image23"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image22.jpg" alt="image22"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/45555.png" alt="45555"></p><h4 id="智能锁"><a href="#智能锁" class="headerlink" title="智能锁"></a>智能锁</h4><p>智能锁大多数采用密码、指纹、手机等多种识别方式。其中，半导体指纹识别和光学指纹识别，是目前智能锁行业最主流的的指纹识别技术。 随着智能锁相关技术的日益成熟和发展，人脸识别、手机开锁、虹膜开锁、物联网技术等相继诞生，智能锁产品的功能和应用将更加丰富多元，也将进一步促进未来智能锁与智能家居的同步发展和高度融合。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/769856456.jpg" alt="769856456"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/7686789768987.jpg" alt="7686789768987"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/3245324534.jpg" alt="3245324534"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/34253215345.jpg" alt="34253215345"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/547686785687.jpg" alt="547686785687"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/201811051236.png" alt="图片1"></p><h3 id="锁具市场需求分析"><a href="#锁具市场需求分析" class="headerlink" title="锁具市场需求分析"></a>锁具市场需求分析</h3><p>锁的目的是保护财产和人身安全，正因如此，锁具的安全与切身利益是紧密相关的，根据消费者购买智能门锁考虑因素的调查结果显示，86.8%的消费者重视智能门锁的安全性，其次消费者考虑最多的便是实用性和便捷性，再有就是质量。根据消费者的考虑因素以及智能门锁行业的发展趋势，安全、便捷和适用将会成为产品主流，行业将会出现以消费者主导的消费者品牌，而不是行业品牌，这就要求相关企业要足够洞悉消费者的心理，而最受消费者在意的安全性，将会得到进一步的强化，逐渐在真正意义上彰显智能门锁是人们隐私的保护神这一角色。</p><p> <img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/222.png" alt="222"></p><h2 id="锁具安全问题"><a href="#锁具安全问题" class="headerlink" title="锁具安全问题"></a>锁具安全问题</h2><h3 id="锁具破解"><a href="#锁具破解" class="headerlink" title="锁具破解"></a>锁具破解</h3><p> 从古至今，对锁具的攻防就从未停止过，古来就有梁上君子溜门撬锁的记载，各类开锁工具随着锁的发展也不断推陈出新，从最简单的单勾到后来的锡纸和软硬开工具，针对不同锁具有不同的开锁工具，攻击锁的思路与web攻击的思路其实是共通的，在传统安全中，有一个公认的原则，那就是一切外部输入都是有害的，越安全性的系统，封闭性就越强，web攻击的思路就是找输入点，找漏洞在注入，锁具破解同理，通过暴露在外的锁孔、锁柱、锁体、按键等等，找一切可以输入的点，结合特定的工具，使弹珠复位或拨动锁体，实现破解目的，随着智能锁的涌现，锁具的攻击面也随之扩大，面临的安全风险也更多。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image25.gif" alt="image25"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image37.jpg" alt="image37"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image44.jpg" alt="image44"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image28.jpg" alt="image28"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image36.jpg" alt="image36"></p><h3 id="智能锁具安全风险"><a href="#智能锁具安全风险" class="headerlink" title="智能锁具安全风险"></a>智能锁具安全风险</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>锁芯抗技术开启的时长不达标，存在一定的设计和选材用料上的缺陷，导致在短时间内被技术开启；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image40.png" alt="image40"></p><p>单钩开锁。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/1201171605_clip.gif" alt="1201171605_clip"></p><p>锡纸开锁。</p><p>锁具在安装之后，存在结构薄弱点，直接暴露锁簧或锁体结构的薄弱点，甚至可以通过外部拨动锁体；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image24.jpg" alt="image23"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/sdgdsry87908.jpg" alt="图片1"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/1_clip.gif" alt="媒体1_clip"></p><p>如图为一种专门针对市面上大部分智能锁以及指纹锁一类的插片开启工具，工具用法简单，直接在外门面板缝中插入该工具，碰到带动杆就能直接转开了，既简单实用又廉价。</p><p>锁具的整体材料强度不达标准，无法抵抗一般的暴力开锁手段，关键结构点没有械加固，锁芯不具备空转结构或分体设计等功能。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image23.png" alt="image23"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/TB2XPjucLiSBuNkSnhJXXbDcpXa_!!25616172.jpg" alt="TB2XPjucLiSBuNkSnhJXXbDcpXa_!!25616172"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/clip.gif" alt="暴力开锁_clip"></p><p>如上图尽管官方宣传该款锁的U形环可以抵抗10T液压钳，但在锁体关键连接部位采用一般铝合金材质，使用常见工具短时间内即可暴力开锁。</p><h4 id="电路层"><a href="#电路层" class="headerlink" title="电路层"></a>电路层</h4><p>智能锁内部集成电路在PCB设计、布线、物料选型、抗干扰设计上存在缺陷，以传统电路设计为主导，未充分考虑基于物联网的安全性设计，导致存在安全隐患。</p><p>没有做好充分的电磁防护设计，使用外部磁场或强电压可以进行信号干扰。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image25.jpg" alt="image25"></p><p>通过电磁注入，产生重置信号，实现开锁。（来源 DPLSLAB）</p><p>某款共享单车电路设计和机械构造存在问题，可以从外部截断输入锁体的电源线，在用一个高电压的脉冲电压作为输入电源，即可开锁。其原因在于电路设计和电机控制芯片选型存在缺陷，没有做充分的过载保护和断路保护，使控制锁柱运动的电机异常工作。</p><h4 id="硬件通信层"><a href="#硬件通信层" class="headerlink" title="硬件通信层"></a>硬件通信层</h4><p>锁具内部电路的各接口和引脚信号存在未经加密或验证的输入输出信号，存在可能暴露内部逻辑的调试信号，可以通过I2C、SPI、UART、JTAG等协议进行数据窃取和劫持，获取锁具芯片访问权和固件程序；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/5b8feecd02a39.jpg" alt="5b8feecd02a39"><br>spi通信</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/5b8fef1f084b2.jpg" alt="5b8fef1f084b2"><br>I2C通信</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/5b8ff2ea3e6d5.jpg" alt="5b8ff2ea3e6d5"><br>UART通信</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/20181019165050.png" alt="微信截图_20181019165050"><br>逻辑分析仪抓取spi通信数据分析</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/20180930114820.jpg" alt="微信图片_20180930114820"><br>通过 SBW 和 GDB 调试锁具芯片。</p><p>芯片未做加密保护，容易被拆解提取固件。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/5b352394427b3.jpg" alt="5b352394427b3"></p><p>拆下芯片通过调试器直接读取锁具固件。</p><h4 id="固件层"><a href="#固件层" class="headerlink" title="固件层"></a>固件层</h4><p>芯片固件存在逻辑算法漏洞，没有进行严格的代码审计，存在代码层的安全漏洞。</p><p>下面是对某款声波锁的固件逆向过程。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/IMG_3505.jpg" alt="IMG_3505"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/IMG_3506.jpg" alt="IMG_3506"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/IMG_3507.jpg" alt="IMG_3507"></p><p>进行固件逆向分析，可以得到密码验证算法，通过数学计算可以算出相应的密钥。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/1538279364702.png" alt="1538279364702"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image46.jpg" alt="image46"></p><p>声音通过傅里叶算法，实现AD相互转换，利用逆向的算法生成开锁声波。</p><p>对于固件更新，没有进行签名和完整性检验，可以对固件进行修改和重打包。</p><p>空中升级固件，加密算法强度不够，抵御不了高阶的侧信道攻击。</p><h4 id="移动APP层"><a href="#移动APP层" class="headerlink" title="移动APP层"></a>移动APP层</h4><p>存在被逆向、反编译源码的可能；<br>可能存在底层代码漏洞和敏感信息泄露；<br>APP自身业务存在逻辑问题，如异常开锁、异常登录等。</p><h4 id="身份识别层"><a href="#身份识别层" class="headerlink" title="身份识别层"></a>身份识别层</h4><h5 id="指纹模块"><a href="#指纹模块" class="headerlink" title="指纹模块"></a>指纹模块</h5><p>指纹模块的算法安全性不达标，对错误指纹、非活体指纹、假指纹等的识别率偏低；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/[00_00_02][20180930-120632-0].jpg" alt="媒体3[00_00_02][20180930-120632-0]"></p><p>一般光学或电容指纹模块，没有进行活体检测，容易被假指纹欺骗。</p><p>指纹数据能被提取，通过指纹复制，制作假指纹；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/20180226135.jpg" alt="图片2"></p><p>通过简单材料可以伪造出指纹模型。</p><p>指纹模板和数据存在被盗取或替换的隐患；<br>指纹模块本身存在被替换的问题。</p><h5 id="RFID"><a href="#RFID" class="headerlink" title="RFID"></a>RFID</h5><p>RFID 卡片可以被远程嗅探、复制；<br>RFID 卡片可以被近程伪造，锁具读卡器被欺骗</p><h5 id="密码键盘"><a href="#密码键盘" class="headerlink" title="密码键盘"></a>密码键盘</h5><p>密码键盘是否存在被偷窥风险<br>可能存在不同按键声音可能，存在泄露密码的风险<br>不具备主动探测的防拆机制，可能存在安装物理攻击设备窃取密码的风险</p><h5 id="其他认证方式"><a href="#其他认证方式" class="headerlink" title="其他认证方式"></a>其他认证方式</h5><p>虹膜、人脸识别存在被高清图像，3D打印等非活体手段绕过的风险<br>声音包括超声波存在被录制重放的风险</p><h4 id="通信层"><a href="#通信层" class="headerlink" title="通信层"></a>通信层</h4><h5 id="无线电通信"><a href="#无线电通信" class="headerlink" title="无线电通信"></a>无线电通信</h5><p>WiFi通信可能存在中间人攻击；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image80.jpg" alt="image80"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image84.png" alt="image84"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image83.png" alt="image83"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/01_clip.gif" alt="序列 01_clip"></p><p>某款保险柜存在被 wifi 中间人劫持攻击的漏洞。</p><p>蓝牙与APP通信连接过程的加密和验证强度不够，容易进行蓝牙抓包、劫持、重放等攻击；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/5b9fe0fd21e76.jpg" alt="5b9fe0fd21e76"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/vlcsnap-2018-09-30-12h03m29s219.png" alt="vlcsnap-2018-09-30-12h03m29s219"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/2_clip.gif" alt="媒体2_clip"></p><p>某款蓝牙采用AES加密，数据不改变，无签名校验，抓包重放即可开锁 </p><p>无线遥控开锁在信号广播发送过程中存在被抓包、解码、重放破解的风险；</p><p>无线通信加密算法未考虑侧信道防护，存在被侧信道分析破解的可能；</p><p>芯片层没有做有效的数模信号隔离，可能导致关键密钥信息通过无线载波发射出来，并通过侧信道破解算法。</p><h5 id="云端通信"><a href="#云端通信" class="headerlink" title="云端通信"></a>云端通信</h5><p>APP与云端的通信没有使用安全通信，容易被抓包、劫持；</p><p>客户端与服务端没有对数据进行有效的合法性校验，容易通过中间人攻击；</p><p>采用 GMS 通信存在被伪基站劫持的风险；</p><h4 id="云服务层"><a href="#云服务层" class="headerlink" title="云服务层"></a>云服务层</h4><p>云端服务器存在安全漏洞，可能有SQL注入、XSS跨站脚本攻击、CSRF跨站请求伪造、越权访问等等安全问题，导致用户数据被泄露；</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image71.jpg" alt="image71"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/image72.jpg" alt="image72"></p><p>某款锁可以遍历云端存储的所有开锁密码和用户信息。</p><h2 id="安全解决方案"><a href="#安全解决方案" class="headerlink" title="安全解决方案"></a>安全解决方案</h2><h3 id="锁具安全模型"><a href="#锁具安全模型" class="headerlink" title="锁具安全模型"></a>锁具安全模型</h3><p>木桶原理在智能锁安全中的新诠释</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/suo3vcf/333.png" alt="333"></p><p>整体的安全性不仅由木桶最短的木板决定，更取决于木桶底部是否完好，如果底部存在漏洞，木板在高也是没有意义的，都是空谈，物理安全在智能锁具安全层面就相当于木桶的底部。通过研究锁具在声、光、电、磁、机械构造等各方面的物理安全隐患，可以切实提高锁具的整体安全性，并且物理安全对于所有物联网安全研究同样具有重要意义，可以作为物联网安全模型的基石。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>随着智能锁不断推出陈新，更多的新技术会运用到锁具中，与此同时面临的风险也会更多，本章作为智能锁安全系列的开篇之作，简单概括了目前行业的发展和安全态势，今后将会从更多实战的角度分析智能锁的安全问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从原始公有制的瓦解到私有制意识的萌芽，人类社会逐渐从愚昧走向了文明，而伴随着私有制的诞生，锁具也应运而生，作为保护私有财产的重要手段，锁具随
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="智能锁安全" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能锁破解" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="指纹锁破解" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="开锁" scheme="http://yaseng.org/tags/%E5%BC%80%E9%94%81/"/>
    
      <category term="蓝牙锁破解" scheme="http://yaseng.org/tags/%E8%93%9D%E7%89%99%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="声波锁破解" scheme="http://yaseng.org/tags/%E5%A3%B0%E6%B3%A2%E9%94%81%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="保险柜破解" scheme="http://yaseng.org/tags/%E4%BF%9D%E9%99%A9%E6%9F%9C%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>破解硬件ase256 加密指纹u盘(极棒大赛)</title>
    <link href="http://yaseng.org/cracking_hardware_aes256_encrypted_fingerprint_flash_disk_in_geekpwn_2018.html"/>
    <id>http://yaseng.org/cracking_hardware_aes256_encrypted_fingerprint_flash_disk_in_geekpwn_2018.html</id>
    <published>2018-10-25T16:00:00.000Z</published>
    <updated>2020-04-16T10:20:25.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>GeekPwn（极棒），是由国内顶尖信息安全团队碁震（KEEN）于2014年发起并主办的全球最大关注智能生活的安全极客（黑客）大赛，也是全球首个探索人工智能与专业安全的前沿平台，与Pwn2Own、Defcon并称为世界三大黑客赛事。<br>GeekPwn 2018国际安全极客大赛（上海站）以“人攻智能，洞见未来”为主题，于10月24~25日在上海召开。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/131543922868_.pic_hd.jpg" alt=""></p><p>在这次极棒大赛上，伏宸安全实验室团队以出色的表现获得评委组的高度认可，获得极棒名人堂荣誉以及极客精神奖两项大奖，奖金累计16万元！</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/141543922869_.pic_hd.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/GeekPwn2018.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>传统信息安全因其基于虚拟化世界的本质特点，其思考和关注的重点在信息和数据的安全性，即 security 层面，而随着物联网的飞速发展，网络与现实连同，真实的硬件设备成为相互连接的媒介，物理上的接触和真实的感官动作是物联网的核心竞争力之一，而与此同时暴露的安全风险与传统网络威胁相比，又有着巨大的差异，关注物联网的安全，当改变沿袭而来的信息安全思想，应更多的关注其在现实物理世界的安全性，也就是 safety 层面的安全，也是人的安全性问题 。<br>通过对物联网设备的安全分析，并结合真实物联网攻击案例，从多个维度阐述security 和 safety 层面的思想差异以及所产生的不同影响，同时对基于物理层的攻防手段进行一定的总结和概括。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;GeekPwn（极棒），是由国内顶尖信息安全团队碁震（KEEN）于2014年发起并主办的全球最大关注智能生活的安全极客（黑客）大赛，也是全球
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="u盘破解" scheme="http://yaseng.org/tags/u%E7%9B%98%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="aes256 硬件加密破解" scheme="http://yaseng.org/tags/aes256-%E7%A1%AC%E4%BB%B6%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="指纹加密u盘破解" scheme="http://yaseng.org/tags/%E6%8C%87%E7%BA%B9%E5%8A%A0%E5%AF%86u%E7%9B%98%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="侧信道攻击" scheme="http://yaseng.org/tags/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
    
      <category term="电磁攻击" scheme="http://yaseng.org/tags/%E7%94%B5%E7%A3%81%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>无人商店零元购</title>
    <link href="http://yaseng.org/free-shopping-in-unmanned-stores.html"/>
    <id>http://yaseng.org/free-shopping-in-unmanned-stores.html</id>
    <published>2018-10-25T16:00:00.000Z</published>
    <updated>2018-11-17T08:49:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="新零售概念"><a href="#新零售概念" class="headerlink" title="新零售概念"></a>新零售概念</h3><p> 新零售概念提出后，零售行业创新加速，伴随着人工智能和物联网在各个领域的渗透，无人售货便利店、无人售货机的概念进入大众视野，自2016年亚马逊宣布其无人便利店项目Amazon Go准备问世以来，无人便利店像雨后春笋般涌现，在以消费者为中心的商业时代，无人便利店以其高效率、优质的服务体验和低人力成本等等优势，在未来将得到巨大市场发展。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image7.jpg" alt="image7"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image8.jpg" alt="image8"></p><p>无人零售多采用人工智能、物联网RFID、二维码识别等技术，但是正因为新技术的引入，而导致攻击面随之扩大，RFID标签的篡改、识别信号拦截、人工智能算法欺骗、云端通信拦截等等都有可能导致大量的盗损，并因其利用简单、攻击成本低、攻击难以检测等特点，比传统商店所面临的盗损风险更大，从而严重威胁到市场发展，因此安全是无人零售行业长足发展的基石。</p><h3 id="行业发展"><a href="#行业发展" class="headerlink" title="行业发展"></a>行业发展</h3><p>2016年 新零售”一词由马云在2016年杭州云栖大会上首次提及，与新制造、新金融、新技术、新能源一起被称为未来五大新趋势。“新零售”概念强调的是线上与线下将深度结合，在现代物流加持下，结合大数据、云计算等创新技术构成的新商业模式。<br>2017年下半年，无人零售以其超前的购物体验成为新零售最受资本和消费者关注的形态之一。7月1日，F5未来商店完成3000万元A+轮融资；7月3日缤果盒子完成超1亿元A轮融资；7月8日阿里巴巴无人超市“淘咖啡”的落地亮相2017年淘宝造物节。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image14.jpg" alt="image14"></p><p>截至2017年9月底我国每年无人零售企业成立数。</p><h3 id="安全现状"><a href="#安全现状" class="headerlink" title="安全现状"></a>安全现状</h3><ul><li>上海一无人超市一周遭盗窃6次防盗成了大难题</li><li>成都批捕首例无人超市盗窃嫌疑人</li><li>浙江多次盗窃无人超市 三男子被刑拘</li><li>东莞两月盗窃无人超市11次 “贪心”男被刑拘</li></ul><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/640.jpg" alt="640"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/6401.jpg" alt="6401"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/6403.jpg" alt="6403"></p><p>无人商店最大问题是开放式零售形态可能面临少数顾客逃避付款，而难以完全保证商户利益的问题。</p><h2 id="UHF标签"><a href="#UHF标签" class="headerlink" title="UHF标签"></a>UHF标签</h2><h3 id="UHF超高频远距离RFID"><a href="#UHF超高频远距离RFID" class="headerlink" title="UHF超高频远距离RFID"></a>UHF超高频远距离RFID</h3><p>特高频Ultra High Frequency(UHF)是指频率为300~3000MHz，波长在1m~1dm的无线电波。该波段的无线电波又称为分米波。UHF标签是RFID电子标签中的一种。属于无源电子标签，在阅读器的读出范围之外时，电子标签处于无源状态，在阅读器的读出范围之内时，电子标签从阅读器发出的射频能量中提取其工作所需的电源。在我国 800/900MHz 频段 UHF 技术的具体使用频率为 840-845MHz 和920-925MHz。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image15.jpg" alt="image15"></p><p>UHF电子标签具有识别距离远、识读率高、防冲突能力强、可扩展性好等特点，读卡距离达3－10米，每秒可读100张卡，因此UHF技术大量应用在仓储、物流盘点等场所，随着无人商店的发展，UHF技术开始广泛应用于店内的商品标识上。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image16.jpg" alt="image16"></p><h3 id="UHF电子标签安全问题"><a href="#UHF电子标签安全问题" class="headerlink" title="UHF电子标签安全问题"></a>UHF电子标签安全问题</h3><p>目前无人商店使用的UHF电子标签大部分采用基于EPC Class1 Gen2（简称G2）协议的标签， EPC标签内置的芯片存储有具体的数据信息，其Tag memory（标签内存）分为Reserved（保留），EPC（电子产品代码），TID（标签识别号）和User（用户）四个独立的存储区块（Bank）。 其中</p><ul><li>Reserved区，存储Kill Password（灭活口令）和Access Password（访问口令）。</li><li>EPC区：存储EPC号码等，可以对供应链中的对象（包括物品、货箱、货盘、位置等）进行全球唯一的标识，无人商店中商品的唯一识别ID即存储于EPC区。</li><li>TID区：存储标签识别号码，每个TID号码应该是唯一的。 </li><li>User区：存储用户自定义的数据。 </li></ul><p>此外还有各区块的Lock（锁定）状态位等用到的也是存储性质的单元。<br>标签收到连续波（CW）照射即上电（Power-up）以后，标签可处于Ready（准备），Arbitrate（裁断），Reply（回令），Acknowledged（应答），Open（公开），Secured（保护），Killed（灭活）七种状态之一。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image17.jpg" alt="image17"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image18.jpg" alt="image18"></p><p>EPC区存储的唯一标识，如果标签没有进行灭活（Killed），或者没有进行锁定（Lock）或加密码保护（Secured），就能通过读写器再次进行修改，而在实际生产环节，厂商出于成本和便捷性考虑，并没有进行灭活（Killed）、锁定（Lock）、保护（Secured）等标签数据防护手段，这就导致了可以通过外部读写器改变商品标识的风险，利用专用工具，可以把高价商品的标识与低价商品标识互换，或者把已经购买过的商品标识换到未购买过的商品上，即可轻松绕过店内的监控报警系统。</p><h2 id="攻击设备"><a href="#攻击设备" class="headerlink" title="攻击设备"></a>攻击设备</h2><p>基于修改EPC区唯一标识的方法，自制了隐蔽标签修改器，把读写器天线、电池、读写模块集成在一起，然后隐藏在手机壳内部，在通过耳机接口与手机通信，在APP里面进行数据操作修改，实现最大程度的隐蔽攻击。相比传统从网络层或通信层的攻击，操作简单，没有技术门槛，任何人只要掌握了工具的操作方式，即可实现攻击，危害性和影响力更为广泛。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image19.jpg" alt="image19"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image20.jpg" alt="image20"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image21.jpg" alt="image21"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/image22.jpg" alt="image22"></p><h2 id="效果演示"><a href="#效果演示" class="headerlink" title="效果演示"></a>效果演示</h2><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/20181116172418.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/lo95jrf43d/20181116172423.jpg" alt=""></p><p>Geekpwn 2018 上海站实验室无人商店“0元购”演讲，并现场对该设备进行展示。</p><p>视频演示：  <a href="https://www.bilibili.com/video/av36079154/" target="_blank" rel="noopener">https://www.bilibili.com/video/av36079154/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>无人超市“零元购” | 挥一挥衣袖，不花钱带走一个超市  <a href="https://mp.weixin.qq.com/s/NQ9r1kLhZ33SEGZykf9fHw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NQ9r1kLhZ33SEGZykf9fHw</a></li><li>物联网安全百科  <a href="https://iot-security.wiki/" target="_blank" rel="noopener">https://iot-security.wiki/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;新零售概念&quot;&gt;&lt;a href=&quot;#新零售概念&quot; class=&quot;headerlink&quot; title=&quot;新零售概念&quot;&gt;&lt;/a&gt;新零售概
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="无人超市" scheme="http://yaseng.org/tags/%E6%97%A0%E4%BA%BA%E8%B6%85%E5%B8%82/"/>
    
      <category term="无人超市安全" scheme="http://yaseng.org/tags/%E6%97%A0%E4%BA%BA%E8%B6%85%E5%B8%82%E5%AE%89%E5%85%A8/"/>
    
      <category term="无人超市破解" scheme="http://yaseng.org/tags/%E6%97%A0%E4%BA%BA%E8%B6%85%E5%B8%82%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="无人超市零元购" scheme="http://yaseng.org/tags/%E6%97%A0%E4%BA%BA%E8%B6%85%E5%B8%82%E9%9B%B6%E5%85%83%E8%B4%AD/"/>
    
  </entry>
  
  <entry>
    <title>LimeSDR 无线信号重放攻击和逆向分析</title>
    <link href="http://yaseng.org/wireless-signal-replay-attack-and-reverse-with-LimeSDR.html"/>
    <id>http://yaseng.org/wireless-signal-replay-attack-and-reverse-with-LimeSDR.html</id>
    <published>2018-09-02T16:00:00.000Z</published>
    <updated>2018-09-03T11:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在这篇文章中，我们将对某宝销量最高的一款无线门铃进行无线重放攻击和逆向分析其遥控信号的演示。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bb3542766.png" alt=""></p><p>国内常见的无线遥控通常工作在315Mhz、433Mhz频率，欧美的采用868Mhz、915Mhz这2个频率。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c47b42c4e.jpg" alt=""></p><p>拆开门铃，我们可以发现解码芯片为 <a href="http://t.cn/RkWvAOk" title="华芯微HS1527" target="_blank" rel="noopener">华芯微HS1527</a></p><p>华芯微HS1527采用CMOS工艺制造,拥有20位地址码，可提供最多达1048576(2^20)种地址码，发射频率支持315Mhz与433Mhz。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c4807005a.png" alt=""></p><p>我们可以用电视棒、HackRF One、LimeSDR等SDR硬件进一步确定遥控的工作频率，打开SDR软件设置频率为315Mhz或433Mhz，然后按下遥控器，能在瀑布图上看到明显的反应：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bbfa80581.png" alt=""></p><p>确定无线遥控工作的中心频率为：433950000</p><h2 id="录制信号"><a href="#录制信号" class="headerlink" title="录制信号"></a>录制信号</h2><p>Grc流程图下载地址：<a href="https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5" target="_blank" rel="noopener">https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5</a><br>用GNU Radio搭一个简单的接收流图，一方面将接收信号保存为Cfile文件，另一方面将信号以瀑布图显示作为实时反馈。因为遥控信号是433MHz，中心频率设在这个附近都可以，采样率2M就够了。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d72d138260.png" alt=""></p><p>osmocom Source使用LimeSDR接收433MHz无线信号,采样率为2M，右上QT GUI Sink将捕获的无线信号通过瀑布图显示，右下角File Sink将捕获到的无线数据包储存到test.cfile文件中。<br>执行流图可看到如下效果图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bd7500b2a.png" alt=""></p><p>按下遥控：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61bd8141677.png" alt=""></p><p>结束GnuRadio流图后，查看Music目录下的test.cfile:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d91934831f.png" alt=""></p><h2 id="重放信号"><a href="#重放信号" class="headerlink" title="重放信号"></a>重放信号</h2><p>接下来再用GNU Radio写个重放信号的流图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d74c2f234e.png" alt=""></p><p>左侧File Source调用录制到的test.cfile信号文件，与此同时QT GUI Time Sink、QT GUI Frequency Sink模块分别在屏幕上显示时间轴（时间域）、频率幅度（频率域），osmocom Sink调用LimeSDR将信号发射出去，执行流图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61c0d148305.png" alt=""></p><p>如果听见铃声响起，那说明这段信号是有效的，如果没有响起，可能是录制指定的频率不对或采样到的信号样本不完整，可多次尝试录制，如果是车钥匙等其他设备，其信号只有一次或几次有效性，俗称滚动码，这点请注意。</p><h2 id="分析信号"><a href="#分析信号" class="headerlink" title="分析信号"></a>分析信号</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p>Audacity是一款跨平台的音频处理软件，我们可以拿来分析射频信号。导入录制的音频信号文件进行信号分析，然后通过其展现信号波形图来判断信号的调制方式并加以分析。</p><p>不过这种方式需要肉眼将波形转化成0跟1，看起来比较容易眼花。只有<strong>老司机</strong>才能很快很准确地用这种方式完成分析任务。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fd6a1160cc.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fd6a532db7.png" alt=""></p><p>导入成功后显示如下图：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d8115a717e.png" alt=""></p><p>发现存在多段信号脉冲，我们选择一段信号后点击放大镜来进一步观察信号特征。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7eebc9ca448.png" alt=""></p><p>我们将第一个宽度的蓝色条状物当作标准宽度1，空白区域当作0，空白区域的宽度能容纳几个标准宽度蓝条，就代表有几个0，以此类推，较宽的蓝色条状物能容纳几个标准宽度蓝条就代表有几个1。经验比较丰富的朋友可以通过图形，把无线射频信号转换成二进制数据</p><p><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p><h3 id="Inspectrum"><a href="#Inspectrum" class="headerlink" title="Inspectrum"></a>Inspectrum</h3><p>Inspectrum是一款分析无线信号的工具，基于Linux和OSX。它兼容GNURadio、Osmocom_fft还有各类SDR设备导出的IQ文件格式（例如RTL-SDR、HackRF、BladeRF）。</p><p>安装Inspectrum，参考Wiki：<a href="https://github.com/miek/inspectrum/wiki/Build" target="_blank" rel="noopener">https://github.com/miek/inspectrum/wiki/Build</a></p><p>澳大利亚无线黑客 <a href="https://github.com/tresacton" title="tresacton" target="_blank" rel="noopener">tresacton</a> 在 Inspectrum 的基础上做了界面优化和升级，有兴趣的朋友也可以安装 <a href="https://github.com/tresacton/dspectrumgui" title="DSpectrumGUI" target="_blank" rel="noopener">DSpectrumGUI</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install qt5-default libfftw3-dev cmake pkg-config automake autoconf</span><br><span class="line">$ git clone https://github.com/jgaeddert/liquid-dsp.git</span><br><span class="line">$ cd liquid-dsp</span><br><span class="line">$ ./bootstrap.sh</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br><span class="line">$ cd ~</span><br><span class="line">$ git clone https://github.com/miek/inspectrum.git</span><br><span class="line">$ cd inspectrum &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><p>打开Inspectrum，导入我们录制的test.cfile文件。设置采样率为录制时的采样率2M，水平拖动，找到有信号的区域。然后可以通过左侧Spectrogram参数的调节、缩放工具，实现波形图的放大缩小，颜色深浅调节。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7edc950cb72.png" alt=""></p><p>在原始信号上右键添加采样图，Add derived plot -&gt; Add sample plot 用鼠标拖动，调节中心频率的位置和宽度；<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ede054a84b.png" alt=""></p><p>然后在下面的采样图右键添加阈值图，Add derived plot -&gt; Add threshold plot<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7edf77e37ff.png" alt=""></p><p>左侧栏的Time selection可对波形进行划分，这里我们以一位<strong>“内码”</strong>信号的宽度为标准。接着对Symbols数值进行递增，直至囊括一帧信号的波形区域：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87c626ab7ac.png" alt=""></p><p>参考 <a href="http://t.cn/RkWvAOk" title="华芯微HS1527" target="_blank" rel="noopener">华芯微HS1527</a> 资料文档，可以得知<strong>HS1527码型</strong>：<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87c87db56dc.jpg" alt=""></p><p>现在我们知道在 inspectrum 里面看到的信号是什么意思了，总结下：一帧信号的编码格式为<strong>“≥8位同步码 + 20位内码 + 4位数据码”</strong><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ee0708914c.jpg" alt=""></p><p>然后在阈值图右键导出解码的数据，<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87d3ff70067.png" alt=""></p><p>导出的解码数据：<br><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p><h4 id="绘制Bits数据信号的GRC流图"><a href="#绘制Bits数据信号的GRC流图" class="headerlink" title="绘制Bits数据信号的GRC流图"></a>绘制Bits数据信号的GRC流图</h4><p>前面说过一帧信号共有32位码。现在我们要绘制GRC流图，执行流图从而让LimeSDR发射出Bits数据信号。这32位码，每个码都有相应的时序进行表示。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b802837a51c2.jpg" alt=""></p><p><code>0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0</code></p><p>解码数据换算后得到的Bits数据：</p><p><code>1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0</code></p><p>一个高电平或低电平对应4LCK，在采样率为2MHz的情况下占用时间宽度为1.114ms除以4。要每个电平占用1.114ms/4LCK，则需要让每个电平点插值1.114ms/4*2MHz≈557次<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87d80615055.png" alt=""></p><ul><li>“Vector Source”作为标准的向量输出源模块，可以输出自定义矢量，如门铃的序列。参量Repeat决定是否重复地产生整组矢量数据。</li><li>“Repeat”模块是将输入的矢量进行插值复制，即将<code>&lt;a,b,c,~~~&gt;</code>复制为<code>&lt;a,a,b,b,c,c,~~~&gt;</code>。</li><li>“osmocom Sink”模块是作为发射机的数据信宿。</li><li>“WX GUI Scope Sink”模块用于查看发射出去的信号。</li></ul><h3 id="Universal-Radio-Hacker-URH"><a href="#Universal-Radio-Hacker-URH" class="headerlink" title="Universal Radio Hacker(URH)"></a>Universal Radio Hacker(URH)</h3><p>URH相⽐Audacity和Inspectrum这2款软件，特点是使用特别⽅便，包括采样、解码、重放、模拟环境等功能都可以直接在URH上面完成。而且URH⽀持市面上大多数SDR设备，支持Linux、OSX、Windows平台。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fdbbc5459a.png" alt=""></p><p>参考Wiki进行安装:<a href="https://github.com/jopohl/urh" target="_blank" rel="noopener">https://github.com/jopohl/urh</a> ，安装完成后打开如下图。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ffdc81f773.png" alt=""></p><p>打开“File”菜单,可以直接录制信号或导入录制的信号<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87dd528d421.png" alt=""></p><p>我们点击“Record signal”进行信号录制，按下遥控，右侧会显示信号频谱。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87dea936e97.png" alt=""></p><p>保存我们录制的信号文件，软件会自动打开文件然后回到首页。左下角我们可以设置把信号实时解调为Bits、HEX、ASCII数据流。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87e5bee87c4.png" alt=""></p><p>还可以重放信号，实时调试。更多功能可以查看 <a href="https://github.com/jopohl/urh/releases/download/v2.0.0/userguide.pdf" title="操作使用手册" target="_blank" rel="noopener">操作使用手册</a> 进行学习。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7ffe2d6f0fd.png" alt=""></p><h2 id="更多姿势重放信号"><a href="#更多姿势重放信号" class="headerlink" title="更多姿势重放信号"></a>更多姿势重放信号</h2><p>通过上述方式，我们已对SDR捕获到的无线信号进行分析，并把信号文件转换成了二进制数据，可使用GnuRadio对数据进行重放、修改测试。接下介绍几款硬件，可以DIY便携式信号录制、重放设备。</p><h3 id="DIY攻击设备"><a href="#DIY攻击设备" class="headerlink" title="DIY攻击设备"></a>DIY攻击设备</h3><p>我们可以使用Arduino开发板和很常见的超再生模块或者CC1101模块配合RC-Switch库制作一款便携式射频接收/重放设备。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7d614aa3bb7.jpg" alt=""></p><h3 id="RFcat"><a href="#RFcat" class="headerlink" title="RFcat"></a>RFcat</h3><p>RFCat USB Radio Dongle能够在300 - 928MHz之间的频率上发射，接收，频谱分析，使用户能够嗅探或攻击在这些频率范围内传输的任何无线数据协议。其中包括：家庭自动化系统，智能电表，SCADA系统，“物联网”设备，移动设备等等。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61ce4db8ce7.jpg" alt=""></p><h3 id="EZ430-Chronos"><a href="#EZ430-Chronos" class="headerlink" title="EZ430 Chronos"></a>EZ430 Chronos</h3><p>德州仪器生产的EZ430 Chronos手表由于采用了MSP430芯片，该芯片支持发射1GHz以下频率的无线信号,覆盖市面上各种常见的无线遥控频率（315MHz、433MHz、868MHz、915MHz）<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61ce2710fdb.jpg" alt=""></p><h3 id="GoodWatch"><a href="#GoodWatch" class="headerlink" title="GoodWatch"></a>GoodWatch</h3><p>GoodWatch是逆向工程师和业余无线电爱好者必备的一款手表，它包括RPN计算器，十六进制编辑器，反汇编器和距离70厘米的无线电收发器。它由Casio 3208系列 计算器手表改装而成。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b7fffe2d0a51.jpg" alt=""></p><h3 id="YARD-Stick-One"><a href="#YARD-Stick-One" class="headerlink" title="YARD Stick One"></a>YARD Stick One</h3><p>Great Scott Gadgets 的YARD Stick One一款由美国无线电专家Michael Ossmann 最新研发的一款无线电DONGLE, 与PC通过USB端口连接，它可以用来接收、发射低于1GHz的数字无线信号,主要性能规格如下：<br>-半双工发射和接收<br>-正式操作频段：300-348 MHz, 391-464 MHz, 782-928 MHz<br>-非正式操作频段：281-361 MHz, 378-481 MHz, 749-962 MHz<br>-调制方式： ASK, OOK, GFSK, 2-FSK, 4-FSK, MSK<br>-数据传输率：高达500 kbps<br>-USB 2.0全速传输<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b61cec8190b8.png" alt=""></p><h3 id="PandwaRF"><a href="#PandwaRF" class="headerlink" title="PandwaRF"></a>PandwaRF</h3><p>PandwaRF是一款射频分析工具，由手机或PC控制的低于1 GHz的无线收发器。 其目的是非常容易地捕获，显示和传输RF数据。 它可以使用BLE或USB连接到Android智能手机，使用USB连接到Linux。 它基于着名的RfCat＆Yard Stick One工具和德州仪器CC1111 RF收发器，但具有许多新功能，使PandwaRF成为完美的便携式RF分析工具。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/sdrcf/5b87ee11aee61.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在这篇文章中，我们将对某宝销量最高的一款无线门铃进行无线重放攻击和逆向分析其遥控信号的演示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https:
      
    
    </summary>
    
      <category term="无线电安全" scheme="http://yaseng.org/categories/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="LimeSDR" scheme="http://yaseng.org/tags/LimeSDR/"/>
    
      <category term="无线电" scheme="http://yaseng.org/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
      <category term="无线门铃逆向" scheme="http://yaseng.org/tags/%E6%97%A0%E7%BA%BF%E9%97%A8%E9%93%83%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>芯片物理攻击平台 ChipWhisperer 初探</title>
    <link href="http://yaseng.org/ChipWhisperer-introduce.html"/>
    <id>http://yaseng.org/ChipWhisperer-introduce.html</id>
    <published>2018-08-15T16:00:00.000Z</published>
    <updated>2018-08-25T09:32:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>传统基于穷举或纯数学理论层面的分析，对于现代高强度加密算法而言，算力有限导致无法实现穷举，算法的复杂性也无法通过数学工具直接破解，根据近代物理学发展出来的理论，电子设备依赖外部电源提供动力，设备在运行过程中会消耗能量，同时会跟外界环境存在声、光、电、磁等物理现象产生，设备本身也可能存在设计薄弱点，通过这些物理泄露或人为进行物理层的修改获取数据，然后运用各类数学工具和模型实现破解。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757e51c171d.jpg" alt=""></p><p>(图片来源 Newae 官方)</p><p>然而在做物理攻击时，往往需要昂贵的设备，并要具备数学、物理学、微电子学、半导体学、密码学、化学等等多学科的交叉理论知识，因此其技术门槛和攻击成本都很高，目前在刚刚结束的 Blackhat 2018 上，展台上展示了多款 ChipWhisperer 硬件工具,作为亲民型的物理攻击平台，获得了一致的好评。</p><p>ChipWhisperer Lite 版官方商店售价 $250 ，不管是实验学习，还是实战入门，都是极具性价比的，本文主要介绍主流的一些物理攻击手段，以及对 ChipWhisperer 的初步认知，后续将会据此从理论、原理、实验以及实战等角度详细介绍该平台。</p><h2 id="物理攻击"><a href="#物理攻击" class="headerlink" title="物理攻击"></a>物理攻击</h2><p>真正的安全研究不能凌驾于真实的攻防场景，对于物联网安全而言，其核心目标是真实物理世界中的各种硬件设备，真实的攻击场景往往发生在直接针对硬件设备的攻击，因此物联网安全的基石在于物理层的安全，而针对物联网物理攻击手段，是当前物联网面临的最大安全风险之一。</p><p>物理攻击就是直接攻击设备本身和运行过程中的物理泄露，根据攻击过程和手段可以分为非侵入攻击、半侵入式攻击和侵入式攻击。ChipWhisperer 平台主要用做非侵入式攻击，包括侧信道和故障注入攻击等。</p><p>传统密码分析学认为一个密码算法在数学上安全就绝对安全,这一思想被Kelsey等学者在1998年提出的侧信道攻击(Side-channel Attacks,SCA)理论所打破。侧信道攻击与传统密码分析不同,侧信道攻击利用功耗、电磁辐射等方式所泄露的能量信息与内部运算操作数之间的相关性,通过对所泄露的信息与已知输入或输出数据之间的关系作理论分析,选择合适的攻击方案,获得与安全算法有关的关键信息。目前侧信道理论发展越发迅速，从最初的简单功耗分析（SPA），到多阶功耗分析（CPA），碰撞攻击、模板攻击、电磁功耗分析以及基于人工智能和机器学习的侧信道分析方式，侧信道攻击方式也推陈出新，从传统的直接能量采集发展到非接触式采集、远距离采集、行为侧信道等等。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75d2d4909b4.png" alt=""><br>利用麦克风进行声波侧信道</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75d2e0a0337.png" alt=""><br>利用软件无线电实施非接触电磁侧信道</p><p>故障攻击就是在设备执行加密过程中，引入一些外部因素使得加密的一些运算操作出现错误，从而泄露出跟密钥相关的信息的一种攻击。一些基本的假设：设定的攻击目标是中间状态值； 故障注入引起的中间状态值的变化；攻击者可以使用一些特定算法（故障分析）来从错误/正确密文对中获得密钥。<br>使用故障的不同场景： 利用故障来绕过一些安全机制（口令检测，文件访问权限，安全启动链）；产生错误的密文或者签名（故障分析）；组合攻击（故障+旁路）。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cdb77361a.png" alt=""><br>非侵入式电磁注入</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cdd85fc54.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75ce4f3b061.png" alt=""><br>半侵入式光子故障注入</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75cee97b9cb.png" alt=""><br>侵入式故障注入</p><h2 id="ChipWhisperer"><a href="#ChipWhisperer" class="headerlink" title="ChipWhisperer"></a>ChipWhisperer</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>本系列使用的版本是  CW1173 ChipWhisperer-Lite ，搭载 SAKURA-G 实验板，配合一块 CW303 XMEGA 作为目标测试板。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7a9d9287a75.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7a9d9c0bf77.jpg" alt=""></p><p>CW1173 是基于FPGA实现的硬件，软件端基于 python，具有丰富的扩展接口和官方提供的各类 API 供开发调用，硬件通过自带的 OpenADC 模块可以实现波形的捕获，不需要额外的示波器。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b756e8a59f7b.png" alt=""></p><p>板上自带有波形采集端口（MeaSure）和毛刺输出（Glitch）端口，并自带 MOSFET 管进行功率放大。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5we5t3654h.jpg" alt=""></p><p>并提供多种接口触发设置，基本满足一般的攻击需求。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5dgy2565fe.jpg" alt=""></p><h3 id="能量攻击"><a href="#能量攻击" class="headerlink" title="能量攻击"></a>能量攻击</h3><p>芯片物理结构为许多CMOS电路组合而成，CMOS 电路根据输入的不同电信号动态改变输出状态，实现0或1的表示，完成相应的运算，而不同的运算指令就是通过 CMOS 组合电路完成的，但 CMOS电路根据不同的输入和输出，其消耗的能量是不同的，例如汇编指令 ADD 和 MOV ，消耗的能量是不同的，同样的指令操作数不同，消耗的能量也是不同的，例如 MOV 1 和 MOV 2其能量消耗就是不同的，能量攻击就是利用芯片在执行不同的指令时，消耗能量不同的原理，实现秘钥破解。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b7582856ba4f.png" alt=""></p><p>常用的能量攻击方式就是在芯片的电源输入端（VCC）或接地端（GND）串联一个1到50欧姆的电阻，然后用示波器不断采集电阻两端的电压变化，形成波形图，根据欧姆定律，电压的变化等同于功耗的变化，因此在波形图中可以观察到芯片在执行不同加密运算时的功耗变化。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b75816101da2.png" alt=""></p><p>CW1173 提供能量波形采集端口，通过连接 板上的 MeaSure SMA 接口，就可以对能量波形进行采集，在利用chipwhisperer 开源软件就可以进行分析，可以实现简单能量分析、CPA攻击、模板攻击等。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757f60339ab.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b757f906ba76.png" alt=""><br>通过 cpa 攻击 AES 加密算法获取密钥</p><h3 id="毛刺攻击"><a href="#毛刺攻击" class="headerlink" title="毛刺攻击"></a>毛刺攻击</h3><p>ChipWhisperer  提供对时钟、电压毛刺的自动化攻击功能，类似于 web 渗透工具 Burpsuite ，可以对毛刺的宽度、偏移、位置等等参数进行 fuzz ，通过连接板上的 Glitch SMA 接口，就可以输出毛刺，然后通过串口、web 等获取结果，判断毛刺是否注入成功。</p><p>时钟毛刺攻击是针对微控制器需要外部时钟晶振提供时钟信号，通过在原本的时钟信号上造成一个干扰，通过多路时钟信号的叠加产生时钟毛刺，也可以通过自定义的时钟选择器产生，CW1173  提供高达 300MHZ 的时钟周期控制，时钟是芯片执行指令的动力来源，通过时钟毛刺可以跳过某些关键逻辑判断，或输出错误数据。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b76d1077021e.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/5b76d0fef3796.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/588201161020.jpg" alt=""><br>通过 CW1173 时钟毛刺攻击跳过密码验证</p><p>电压毛刺是对芯片电源进行干扰造成故障，在一个很短的时间内，使电压迅速下降，造成芯片瞬间掉电，然后迅速恢复正常，确保芯片继续正常工作，可以实现如对加密算法中某些轮运算过程的干扰，造成错误输出，或跳过某些设备中的关键逻辑判断等等 。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b5a0b1/1sdt4543h54.jpg" alt=""></p><p>对嵌入式设备的电压毛刺攻击</p><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>随着物理攻击理论和技术的进步，针对硬件芯片的防护手段也随之提高，芯片物理层的攻防一直在不断角力 ，现实环境中，能量采集会受到各种噪声因素的干扰，硬件厂商也会主动实施一些针对物理攻击的防护，单纯依靠  ChipWhisperer 平台难以实现真实场景的攻击，因此还需要结合电磁、声波、红外、光子等多重信息，以及对硬件进行修改，多重故障注入，引入智能分析模型等等组合手段，今后会进一步介绍一些基于 ChipWhisperer  的高级攻击方式和实战分析方法。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li>ChipWhisperer 官网 wiki <a href="https://wiki.newae.com/Main_Page" target="_blank" rel="noopener">https://wiki.newae.com/Main_Page</a></li><li>开源项目 <a href="https://github.com/newaetech/chipwhisperer" target="_blank" rel="noopener">https://github.com/newaetech/chipwhisperer</a></li><li>ChipSHOUTER 电磁故障平台  <a href="https://github.com/newaetech/ChipSHOUTER" target="_blank" rel="noopener">https://github.com/newaetech/ChipSHOUTER</a></li><li>USB 附加模块  <a href="https://github.com/scanlime/facewhisperer" target="_blank" rel="noopener">https://github.com/scanlime/facewhisperer</a></li><li>深度学习侧信道攻击 <a href="https://www.riscure.com/publication/lowering-bar-deep-learning-side-channel-analysis/" target="_blank" rel="noopener">https://www.riscure.com/publication/lowering-bar-deep-learning-side-channel-analysis/</a></li><li>使用毛刺攻击提取汽车 ECU 固件 <a href="https://www.riscure.com/publication/fault-injection-automotive-diagnostic-protocols/" target="_blank" rel="noopener">https://www.riscure.com/publication/fault-injection-automotive-diagnostic-protocols/</a></li><li>《物联网安全百科》 <a href="https://iot-security.wiki" target="_blank" rel="noopener">https://iot-security.wiki</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;传统基于穷举或纯数学理论层面的分析，对于现代高强度加密算法而言，算力有限导致无法实现穷举，算法的复杂性也无法通过数学工具直接破解，根据近代物
      
    
    </summary>
    
      <category term="物理攻击" scheme="http://yaseng.org/categories/%E7%89%A9%E7%90%86%E6%94%BB%E5%87%BB/"/>
    
    
      <category term="芯片安全" scheme="http://yaseng.org/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
      <category term="侧信道攻击" scheme="http://yaseng.org/tags/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
    
      <category term="物理攻击" scheme="http://yaseng.org/tags/%E7%89%A9%E7%90%86%E6%94%BB%E5%87%BB/"/>
    
      <category term="ChipWhisperer" scheme="http://yaseng.org/tags/ChipWhisperer/"/>
    
      <category term="毛刺攻击" scheme="http://yaseng.org/tags/%E6%AF%9B%E5%88%BA%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>LimeSDR 上手指南</title>
    <link href="http://yaseng.org/LimeSDR-introduce.html"/>
    <id>http://yaseng.org/LimeSDR-introduce.html</id>
    <published>2018-08-14T16:00:00.000Z</published>
    <updated>2018-08-24T04:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LimeSDR 是一款完全开源的SDR产品，和 HackRF 一样，包括 PCB 设计图，FPGA 代码，HOST代码完全公开，方便研究和学习 SDR 系统原理。虽然市面上有很多 SDR 产品，但很少有像 LimeSDR 性价比这么高的。<br>LimeSDR 支持 100kHz 到 3.8GHz 频率范围，已经可以不需外置上变频器，即可完成短波应用的使用，另外LimeSDR 是一款完全开源的SDR产品包含了 2×2 MIMO 的支持，满足了大部分应用场景。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b90f617c7.png" alt=""></p><p>通过它的一些应用来了解一下其灵活性：<br>蜂窝网络、WiFi、蓝牙、IoT协议（LoRa/SigFox等）、导航、气象信息、航空信息、海事信息、空间通信、还有广播和电视。<br>这只是 LimeSDR 应用场景的一小部分，你可以应用到你能想到的任何领域。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c152a8b34.jpg" alt=""></p><h2 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h2><h3 id="软件结构"><a href="#软件结构" class="headerlink" title="软件结构"></a>软件结构</h3><p>Lime Suite 是一款支持多种硬件平台的软件，包括LimeSDR，LMS7002M收发器，以及使用基于 LMS7 开发的其他硬件。安装 Lime Suite 可以使许多 SDR 应用程序（如GQRX）可以通过中间适配组件 SoapySDR 适配多种 SDR 设备配合使用。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c56bdcda8.png" alt=""></p><p>SoapySDR 是位于 LimeSDR 的驱动程序和 SDR 应用程序之间的胶水层。使用一个简单的包装器 (SoapyLMS7), LimeSDR 可以在任何 SoapySDR 或 Gr-OsmoSDR 支持的应用程序中使用。这包括编程环境, 如 Pothos 框架和 GNU Radio，以及像 GQRX 和 CubicSDR 这样的图形应用程序。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75c571305ca.png" alt=""></p><h3 id="安装UHD"><a href="#安装UHD" class="headerlink" title="安装UHD"></a>安装UHD</h3><p>Wiki：<a href="http://files.ettus.com/manual/page_build_guide.html" target="_blank" rel="noopener">http://files.ettus.com/manual/page_build_guide.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libboost-all-dev libusb-1.0-0-dev python-mako doxygen python-docutils cmake build-essential git</span><br><span class="line">$ git clone https://github.com/EttusResearch/uhd</span><br><span class="line">$ cd uhd</span><br><span class="line">$ cd host &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make -j5</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><h3 id="安装SoapySDR"><a href="#安装SoapySDR" class="headerlink" title="安装SoapySDR"></a>安装SoapySDR</h3><p>Wiki：<a href="https://github.com/pothosware/SoapySDR/wiki/BuildGuide" target="_blank" rel="noopener">https://github.com/pothosware/SoapySDR/wiki/BuildGuide</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install cmake g++ libpython-dev python-numpy swig</span><br><span class="line">$ git clone https://github.com/pothosware/SoapySDR.git</span><br><span class="line">$ cd SoapySDR</span><br><span class="line">$ git pull origin master</span><br><span class="line">$ mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make -j5</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><h3 id="安装SoapyUHD"><a href="#安装SoapyUHD" class="headerlink" title="安装SoapyUHD"></a>安装SoapyUHD</h3><p>Wiki：<a href="https://github.com/pothosware/SoapyUHD/wiki" target="_blank" rel="noopener">https://github.com/pothosware/SoapyUHD/wiki</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/pothosware/SoapyUHD.git</span><br><span class="line">$ cd SoapyUHD</span><br><span class="line">$ mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ..</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><h3 id="安装LimeSuite"><a href="#安装LimeSuite" class="headerlink" title="安装LimeSuite"></a>安装LimeSuite</h3><p>Wiki：<a href="http://wiki.myriadrf.org/Lime_Suite" target="_blank" rel="noopener">http://wiki.myriadrf.org/Lime_Suite</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository -y ppa:myriadrf/drivers</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git g++ cmake libsqlite3-dev libsoapysdr-dev libi2c-dev libusb-1.0-0-dev libwxgtk3.0-dev freeglut3-dev</span><br><span class="line">$ git clone https://github.com/myriadrf/LimeSuite.git</span><br><span class="line">$ cd LimeSuite</span><br><span class="line">$ mkdir builddir &amp;&amp; cd builddir</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make -j5</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><p>输入下列命令使非ROOT用户可以访问LimeSDR这样基于USB的设备<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd LimeSuite/udev-rules</span><br><span class="line">$ sudo sh ./install.sh</span><br></pre></td></tr></table></figure></p><p>安装上述驱动后，运行命令检查驱动是否安装成功<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cab7f3135.png" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cabd28388.png" alt=""></p><p>然后查看能不能找到设备<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cac1b4a75.png" alt=""></p><h3 id="安装GNU-Radio、gr-osmosdr"><a href="#安装GNU-Radio、gr-osmosdr" class="headerlink" title="安装GNU Radio、gr-osmosdr"></a>安装GNU Radio、gr-osmosdr</h3><p>Wiki：<a href="https://www.gnuradio.org/doc/doxygen/build_guide.html" target="_blank" rel="noopener">https://www.gnuradio.org/doc/doxygen/build_guide.html</a><br>从源码构建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get -y install git-core cmake g++ python-dev swig \</span><br><span class="line">$ pkg-config libfftw3-dev libboost-all-dev libcppunit-dev libgsl0-dev \</span><br><span class="line">$ libusb-dev libsdl1.2-dev python-wxgtk3.0 python-numpy \</span><br><span class="line">$ python-cheetah python-lxml doxygen libxi-dev python-sip \</span><br><span class="line">$ libqt4-opengl-dev libqwt-dev libfontconfig1-dev libxrender-dev \</span><br><span class="line">$ python-sip python-sip-dev python-qt4 python-sphinx libusb-1.0-0-dev \</span><br><span class="line">$ libcomedi-dev libzmq-dev</span><br><span class="line">$ git clone --recursive https://github.com/gnuradio/gnuradio.git</span><br><span class="line">$ cd gnuradio &amp;&amp; mkdir build &amp;&amp; cd build</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make -j5</span><br><span class="line">$ make test</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></p><p>安装gr-osmosdr支持包<br>Wiki：<a href="http://osmocom.org/projects/gr-osmosdr/wiki" target="_blank" rel="noopener">http://osmocom.org/projects/gr-osmosdr/wiki</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libsoapysdr-dev gr-fcdproplus</span><br><span class="line">$ git clone git://git.osmocom.org/gr-osmosdr</span><br><span class="line">$ cd gr-osmosdr &amp;&amp; mkdir build &amp;&amp; cd build/</span><br><span class="line">$ cmake ../</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ sudo ldconfig</span><br></pre></td></tr></table></figure></p><p>安装之后，会看到Soapysdr support在Gnuradio enabled里<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b75cc570512a.png" alt=""></p><h2 id="测试LimeSDR接收、发射通道"><a href="#测试LimeSDR接收、发射通道" class="headerlink" title="测试LimeSDR接收、发射通道"></a>测试LimeSDR接收、发射通道</h2><p>GNU Radio和gr-osmosdr安装完成后，我们加载一个接收信号的grc流程图<br>Grc流程图下载地址：<a href="https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5" target="_blank" rel="noopener">https://1drv.ms/f/s!AsE4BpolygfCjGfspV7_Gno3rpy5</a><br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b80f982d0.png" alt=""></p><p>RF增益设置为20，IF中频增益设置成12，BB基带增益设置成19<br>天线设置为LNAL 对应的是RX Channel 0<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8266f403.png" alt=""></p><p>然后运行，按下遥控钥匙，可以看到成功接收到433MHz遥控钥匙的信号，说明GNU Radio和gr-osmosdr安装没有问题。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8302335b.png" alt=""></p><p>测试通完接收通道后，我们测试下发射通道，做一个小型FM电台试试<br>*注意请在不干扰正常无线通讯的基础上进行实验<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b76b8370cdd9.png" alt=""></p><p>在另一台电脑上打开SDRSharp将FM频率调到104MHz可以明显看到我们发射的信号<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/5b7a9d/5b5b1a8de685f.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;LimeSDR 是一款完全开源的SDR产品，和 HackRF 一样，包括 PCB 设计图，FPGA 代码，HOST代码完全公开，方便研究和学
      
    
    </summary>
    
      <category term="无线电安全" scheme="http://yaseng.org/categories/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="LimeSDR" scheme="http://yaseng.org/tags/LimeSDR/"/>
    
      <category term="无线电安全" scheme="http://yaseng.org/tags/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
      <category term="火腿肠" scheme="http://yaseng.org/tags/%E7%81%AB%E8%85%BF%E8%82%A0/"/>
    
  </entry>
  
  <entry>
    <title>《物联网安全百科》测试版上线</title>
    <link href="http://yaseng.org/iot-security-wiki-beta.html"/>
    <id>http://yaseng.org/iot-security-wiki-beta.html</id>
    <published>2018-06-21T16:00:00.000Z</published>
    <updated>2018-07-09T13:07:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本书是由伏宸安全实验发起的一个开源图书项目，目前属于测试版本，很多章节尚未完成，收录在日常研究过程中，总结的零散知识和心得经验，今后会不断完善内容，形成系统化的知识结构。</p><p>当今世界之发展，以大数据、人工智能为基石，网络由虚拟走向现实，连接世间万物，未来即是万物互联之时代，于是传统网络安全的边界亦由虚拟世界扩展到现实社会，诸如喧嚣尘上的智能家居、智能网联车、形形色色的智能芯片硬件，已经渗透进生活中的各个方面，商业窃密、敲诈勒索、钓鱼木马等等传统攻击手段，或将会演变成隐私监控、身份盗窃乃至危及到人身安全的现实攻击，未来安全行业的攻防主战场，是社会中的每一人，要之，安全之重，势如泰山，而安全之道在于攻守，本书亦多以真实攻守为例，略述万物互联时代攻守之思路，不敢传灯授教，但求燃一星火，以待将来。</p><p>至于攻守之道，古来久矣，上窥宇宙方圆之演化，下度红尘万物之百态，大抵皆备攻守之义，攻者，进也，取也，胜也，守者，退也，御也，全也。圣人取之以治天下，所谓不可胜者，守也，可胜者，攻也，守则不足，攻则有余，善守者藏于九地之下，善攻者动于九天之上，故能自保而全胜也。</p><p>某等学力尚浅，此书多有拾人牙慧，恣意妄言者，虽恐见笑于大方，然唯求先进之指教，拳拳之心，不可胜言。</p><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><ul><li>在线阅读：<a href="https://iot-security.wiki" target="_blank" rel="noopener">iot-security.wiki</a>，<a href="">GitBook</a>，<a href="">国内镜像</a></li><li>项目地址：<a href="https://github.com/yaseng/iot-security-wiki" target="_blank" rel="noopener">github.com/yaseng/iot-security-wiki</a></li><li>下载：<a href="">pdf</a>,<a href="">epub</a></li></ul><h2 id="技术交流"><a href="#技术交流" class="headerlink" title="技术交流"></a>技术交流</h2><table><thead><tr><th>名称</th><th>IOT Security Wiki 0.1</th></tr></thead><tbody><tr><td>本书地址</td><td><a href="https://iot-security.wiki" target="_blank" rel="noopener">iot-security.wiki</a></td></tr><tr><td>伏宸安全实验室</td><td><a href="https://future-sec.com" target="_blank" rel="noopener">future-sec.com</a></td></tr><tr><td>IOT Security</td><td><a href="https://iot-security.org" target="_blank" rel="noopener">iot-security.org</a></td></tr><tr><td>Yaseng Blog</td><td><a href="https://yaseng.org">yaseng.org</a></td></tr><tr><td>知乎专栏</td><td><a href="https://zhuanlan.zhihu.com/future-sec" target="_blank" rel="noopener">zhuanlan.zhihu.com</a></td></tr><tr><td>邮箱</td><td>info@iot-security.wiki</td></tr><tr><td>qq 交流群</td><td>306482276</td></tr><tr><td>微信公众号</td><td><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/future-sec-qrcode.jpg" alt=""></td></tr><tr><td>微信交流群</td><td><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/wechat.jpg" alt=""></td></tr></tbody></table><h2 id="参与"><a href="#参与" class="headerlink" title="参与"></a>参与</h2><p>物联网安全随着技术的不断革新，是一个需要持续创新和学习的领域，也是一个涉及多学科、多门类的研究方向，单个的力量终究是有限的，此希望有志于此的读者能跟我们积极分享自己独到的观点和见解，此开源图书项目，编者笔力尚拙，难免多生谬误，希望各位多提宝贵意见和建议，欢迎大家<a href="https://github.com/yaseng/iot-security-wiki" target="_blank" rel="noopener">参与项目</a>。</p><h3 id="修订记录"><a href="#修订记录" class="headerlink" title="修订记录"></a>修订记录</h3><ul><li>2018-6-20  0.1 测试版本 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本书是由伏宸安全实验发起的一个开源图书项目，目前属于测试版本，很多章节尚未完成，收录在日常研究过程中，总结的零散知识和心得经验，今后会不断完
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="无线电安全" scheme="http://yaseng.org/tags/%E6%97%A0%E7%BA%BF%E7%94%B5%E5%AE%89%E5%85%A8/"/>
    
      <category term="芯片安全" scheme="http://yaseng.org/tags/%E8%8A%AF%E7%89%87%E5%AE%89%E5%85%A8/"/>
    
      <category term="物联网安全" scheme="http://yaseng.org/tags/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能硬件安全" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E7%A1%AC%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="锁具安全" scheme="http://yaseng.org/tags/%E9%94%81%E5%85%B7%E5%AE%89%E5%85%A8/"/>
    
      <category term="物理安全" scheme="http://yaseng.org/tags/%E7%89%A9%E7%90%86%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>物联网安全硬件修改系列-硬改</title>
    <link href="http://yaseng.org/iot-security-hardware-modification.html"/>
    <id>http://yaseng.org/iot-security-hardware-modification.html</id>
    <published>2018-06-20T16:00:00.000Z</published>
    <updated>2018-06-29T10:39:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的硬件架构，替换大容量的内存和闪存芯片，使之能够刷openwrt系统；对某些设备进行配置层的升级，如iPhone，小米等手机内存扩容，使之具有更大容量的存储空间和运行内存； 以及对设备的破解，例如ps,xbox等游戏主机系列的硬破、软破，还有对各种加密录音笔，摄像头，加密U盘和硬盘的破解。<br>研究硬件修改对硬件diy改造，以及厂商在硬件层的安全防护具有非常重要意义。硬件层修改分为硬改和软改两个部分，硬改是对硬件中芯片和电路的改造、替换等，软改是针对芯片固件的修改、重打包等。本节将用具体的几个实例展示如何对设备进行硬改。<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/IMG_3234.jpg" alt=""></p><h2 id="硬改路由器刷openwrt"><a href="#硬改路由器刷openwrt" class="headerlink" title="硬改路由器刷openwrt"></a>硬改路由器刷openwrt</h2><h3 id="修改方案"><a href="#修改方案" class="headerlink" title="修改方案"></a>修改方案</h3><p>目前市面上主流的路由器，平时家用功能或许够用，但如果需要一些高级功能，比如屏蔽广告，挂vpn等等又难以实现，而采用openwrt系统可以充分满足定制化和diy的需求，openwrt是一个高度模块化、高度自动化的嵌入式Linux系统，拥有强大的网络组件和扩展性，但如果专门购买openwrt系统的路由器，价格却又不是十分亲民，如果能把传统路由器通过硬件修改，刷入openwrt系统，就是个低成本的解决方案了，本次用来硬改的路由器具体参数如下：品牌：TP-Link， 型号：WR842N，版本：v4.3，采用高通QCA9533的主控，16M的闪存、2M的flash芯片，虽然是老机器，但除了不能外接usb，基本满足需求，当然价格也便宜。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_150638.jpg" alt=""></p><p>不得不说TP-Link最近出的机器，硬件缩水越来越严重，新的机器，闪存都集成到了CPU里面，基本没有硬改的空间了。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613_174407.jpg" alt=""></p><h3 id="更换内存芯片"><a href="#更换内存芯片" class="headerlink" title="更换内存芯片"></a>更换内存芯片</h3><p>openwrt系统最低硬件配置需要32M内存+8M存储芯片，因此需要更换机器上对应的两块芯片，下图红框部分。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_15063822.jpg" alt=""></p><p>首先更换内存芯片，换上64M内存芯片，新手的话，建议通过风枪来拆芯片，先用胶带保护一下芯片周围的元件，防止吹飞掉，加点助焊膏，温度稍微高一点。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160529.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152140.jpg" alt=""></p><p>芯片拆下后，先清洁一下焊盘，用吸锡线去掉焊盘上残余的锡，使焊盘平整，便于对齐芯片引脚。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_152132.jpg" alt=""></p><p>清洁完成后，换上64M芯片，注意芯片上的小圆点就是第一脚，需要跟焊盘上的右下角的小圆点对齐，方向不对，芯片就白焊了。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154431.jpg" alt=""></p><p>对齐芯片后，先上一点锡，把芯片固定住，然后涂上助焊剂，为了防止引脚锡粘连，建议助焊膏多放一点，然后采用堆锡法，烙铁头采用弯头，便于拖动焊锡，温度稍高一点，一般无铅锡丝温度在380左右，否则焊锡拖不动，注意锡要适量，否则处理起来比较麻烦，用烙铁头的弯曲处沿着引脚朝一个方向拖动，可能会有剩余的锡处理不掉，可以用吸锡线处理。焊好一侧后，继续用同样的方式焊另一侧，全部焊接完成之后，让芯片自然冷却后，用洗板水或无水酒精清洗干净。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153819.jpg" alt=""></p><p>先通电测试下路由器工作是否正常，如果亮灯不正常，就需要补焊一次。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_153823.jpg" alt=""></p><p>确认路由器工作正常，接下来拆下flash芯片，同样用风枪，拆下后，处理一下焊盘。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_160657.jpg" alt=""></p><h3 id="刷编程器固件"><a href="#刷编程器固件" class="headerlink" title="刷编程器固件"></a>刷编程器固件</h3><p>在恩山上下载了LEDE17.1的编程器固件，支持WR842N型号路由器，明月固件也可以，然后把bin文件通过编程器刷进芯片中。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_161309.jpg" alt=""></p><p>芯片放置在烧录座中，用烧录座连接编程器。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_154759.jpg" alt=""></p><p>编程器刷入固件。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606164128.png" alt=""></p><h3 id="更换闪存芯片"><a href="#更换闪存芯片" class="headerlink" title="更换闪存芯片"></a>更换闪存芯片</h3><p>把烧录完成后的芯片取出，然后焊接上，同样注意引脚的方向，芯片上的小圆点为第一脚，对准焊盘上的第一脚，加点助焊膏。<br>存储芯片引脚间距较大，用烙铁头粘上一点锡，采用点焊法即可焊上。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_171616.jpg" alt=""></p><h3 id="硬改完成"><a href="#硬改完成" class="headerlink" title="硬改完成"></a>硬改完成</h3><p>全部焊接完成，把板子清洁一下，重新通电测试，路由器正常，搜索到wifi信号后连接，后台地址：<a href="http://192.168.1.1/" target="_blank" rel="noopener">http://192.168.1.1/</a> 默认用户名和密码；root、root，登录进去，一切正常，说明硬改成功。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180613191402.jpg" alt=""></p><p>openwrt刷好后，需要先修改密码，然后开启一下ssh，就可以用ssh登录管理了，网上很多编译好的安装包，根据自己的需要安装。</p><h2 id="体外分离硬破摄像头"><a href="#体外分离硬破摄像头" class="headerlink" title="体外分离硬破摄像头"></a>体外分离硬破摄像头</h2><h3 id="修改方案-1"><a href="#修改方案-1" class="headerlink" title="修改方案"></a>修改方案</h3><p>在对某品牌智能摄像头进行串口调试时，发现厂商对串口进行了加密，需要输入root密码才能登陆系统。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614141635.jpg" alt=""></p><p>尝试读取固件中的shadow文件，随即拆掉芯片进行固件读取，飞线读写的成功率不高。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161328.jpg" alt=""></p><p>成功提取固件，找到密码，却暴力破解不了，可行的方案是修改密码然后重新打包固件在刷进芯片中了，改完密码后，重打包在刷进去。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161037.jpg" alt=""></p><p>然而事情并不简单。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/sdfsdfsf5656.jpg" alt=""></p><p>固件修改重刷之后，通电测试发现摄像头并不能启动，排查问题根源在于固件重打包过程出了问题，内部可能也有校验，反复多次试验后，出现了意料之中的事情，因为摄像头较为廉价，PCB做工用料并不是十分优秀，反复拆焊导致焊盘损坏，芯片焊上去出现短路、断路等等问题，绝缘层脱落，采用飞线也无法解决，机器彻底报废，最终出现了如下尸横遍野的结果。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614_115142.jpg" alt=""></p><h3 id="拆存储芯片"><a href="#拆存储芯片" class="headerlink" title="拆存储芯片"></a>拆存储芯片</h3><p>固件修改重刷是难以一次修改成功的，报废过多，造成太多的浪费，最终想到采用全部焊点飞线到烧录座上，在把芯片放在烧录座上，只要保证焊接不出错，飞线距离够短，就能保证焊盘不受损坏，固件也可以反复烧录测试。<br>首先拆掉芯片，周围同样采用胶带保护一下。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180529_161733.jpg" alt=""></p><h3 id="飞线芯片烧录座"><a href="#飞线芯片烧录座" class="headerlink" title="飞线芯片烧录座"></a>飞线芯片烧录座</h3><p>飞线采用很细的漆包铜线，线长控制在10厘米以内，刮去漆包线头的绝缘层，然后依次飞线焊接，注意焊盘和烧录座引脚的顺序。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_161048.jpg" alt=""></p><p>飞线完成后，用热熔胶固定好焊盘和飞线，防止焊点脱落。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_162135.jpg" alt=""></p><p>通电测试，发现机器一切正常，说明改造成功。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180604_163009.jpg" alt=""></p><h3 id="烧录固件"><a href="#烧录固件" class="headerlink" title="烧录固件"></a>烧录固件</h3><p>继续修改固件测试，修改的细节在之后固件修改章节会详细说明，<br>因为芯片放在烧录座上，可以轻易的取下重刷，极大的提高了效率，最终成功修改好密码，固件刷录，机器开启正常。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180614133847.jpg" alt=""></p><h3 id="硬破成功"><a href="#硬破成功" class="headerlink" title="硬破成功"></a>硬破成功</h3><p>用修改之后的密码成功登陆进行串口调试，继续更深层次的安全检测，此处调试接口RX、TX焊点已引出，方便接线。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3265e34f0a9.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57a.jpg" alt=""></p><h2 id="魔改小米5手机加6G内存"><a href="#魔改小米5手机加6G内存" class="headerlink" title="魔改小米5手机加6G内存"></a>魔改小米5手机加6G内存</h2><h3 id="修改方案-2"><a href="#修改方案-2" class="headerlink" title="修改方案"></a>修改方案</h3><p>小米手机一向以性价比著称，但其中的小米5作为2016年的旗舰机，却受到颇多的诟病，核心在于采用的是高通骁龙820的CPU，高配版的内存RAM都只有3G，导致手机运行中不是很流畅，鉴于内存过低，因此准备魔改成6G内存，本次更换的芯片为三星K3RG6G60MM-MGCJ-LPDDR4-6G内存芯片。</p><h3 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h3><p>说干就干，小米5的话，还是很好拆的一种机型，后盖可以直接打开，然后把螺丝、排线、电池一一取下，主板拿出来即可，注意电池因为背面贴有双面胶，一定不要用蛮力，否则可能损坏底部的排线和屏幕。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193306.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193313.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193540.jpg" alt=""></p><p>主板取下后，没有被屏蔽罩保护的就是内存芯片，揭开散热垫，小米5自带的内存芯片型号为:海力士skhynix-H9HKNNNDGUMU-BRNMH-3Gbit-LPD4。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180606_193901.jpg" alt=""></p><h3 id="拆内存芯片"><a href="#拆内存芯片" class="headerlink" title="拆内存芯片"></a>拆内存芯片</h3><p>拆内存芯片要注意保护好周围元器件，贴上高温铝箔纸，涂上焊膏，风枪先给板子预热几秒，然后在距离芯片1厘米左右位置，沿着芯片四周按照同一个方向转动，使芯片均匀受热，防止爆板和爆片。<br>)<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_141602.jpg" alt=""></p><p>取下芯片后，清洁焊盘。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_143142.jpg" alt=""></p><h3 id="植锡球"><a href="#植锡球" class="headerlink" title="植锡球"></a>植锡球</h3><p>BGA焊接，植锡球是关键，植锡之前，必须把植锡网清洁干净，选用合适的锡球和BGA专用焊膏，先把芯片涂上一层焊膏，涂抹要均匀，注意不要过多，以植锡网覆盖上去后，焊膏不能溢出植锡网孔为准，否则会粘连锡球，选用0.25的无铅低温锡球，把芯片在植锡台上放好，然后盖上植锡网，要对准芯片的焊点，然后盖上固定盖。倒进锡球，稍微晃动一下，使锡球均匀的分布在网孔里，然后倒掉多余锡球，取下植锡网，在用热风枪加热植好锡球的芯片，使锡球固定，注意要缓慢移动风枪，风嘴距离芯片要稍远一点，防止锡球吹飞。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_144833.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_145204.jpg" alt=""></p><h3 id="BGA焊接"><a href="#BGA焊接" class="headerlink" title="BGA焊接"></a>BGA焊接</h3><p>先给焊盘均匀的上好一层焊膏，植好锡球的芯片，对准主焊盘，然后放置到BGA返修台上固定好，先100度预热烘干，在执行BGA焊接曲线。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151437.jpg" alt=""></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_151701.jpg" alt=""></p><p>焊接完成后，使板子自然冷却，然后清洗干净。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/20180607_154349.jpg" alt=""></p><h3 id="魔改完成"><a href="#魔改完成" class="headerlink" title="魔改完成"></a>魔改完成</h3><p>装机，然后开机测试，一切正常，说明魔改成功。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/858ffghe3564/5b3263dc9f57e.jpg" alt=""></p><h2 id="《物联网安全百科》"><a href="#《物联网安全百科》" class="headerlink" title="《物联网安全百科》"></a>《物联网安全百科》</h2><p>伏宸安全实验室发起的开源图书《物联网安全百科》已经初步上线了，书中记录了实验室最新的一些研究成果和方向，以及物联网安全研究从基础到进阶的一些经验和知识，希望对有志于物联网安全研究者能起到一点的帮助，开源图书项目也希望能够得到大家的支持，一起参与去丰富内容，使之更加完善。<br>图书阅读:<a href="https://iot-security.wiki" target="_blank" rel="noopener">https://iot-security.wiki</a><br>项目地址:<a href="https://github.com/yaseng/iot-security-wiki" target="_blank" rel="noopener">https://github.com/yaseng/iot-security-wiki</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;硬件层面的修改在现实生活中是相当常见的事情，所谓的硬改、魔改、硬破等等说法，指的就是在硬件层面对设备进行diy功能改造。例如针对传统路由器的
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="物联网安全" scheme="http://yaseng.org/tags/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
      <category term="硬件修改" scheme="http://yaseng.org/tags/%E7%A1%AC%E4%BB%B6%E4%BF%AE%E6%94%B9/"/>
    
      <category term="硬改" scheme="http://yaseng.org/tags/%E7%A1%AC%E6%94%B9/"/>
    
      <category term="硬破" scheme="http://yaseng.org/tags/%E7%A1%AC%E7%A0%B4/"/>
    
      <category term="魔改" scheme="http://yaseng.org/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>浅谈区块链安全</title>
    <link href="http://yaseng.org/talking-about-blockchain-security.html"/>
    <id>http://yaseng.org/talking-about-blockchain-security.html</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-06-29T11:07:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>什么是区块链？区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。其最重要的特点：去中心化，为人类创造了一个最理想的货币，这是一个近乎完美的P2P网络，去中心化不需要第三方机构的参与，交易双方直接进行交易，这就大大缩短了时间，提高了效率。区块链在金融方面有着颠覆级的改变，在社会生活方面也有着不可想象的影响，区块链技术能使得交易数据完全公开透明，并可以提供完整的信息流，这样我们就可以清楚的看到在这其中是否存在了问题。在诸如：物流环节中保证货品的安全、优化运输路线和日程安排、小企业融资、商品溯源防伪等等方面都具有重要现实意义。</p><p>然而事物在外因的作用下，往往会朝无法预料的方向发展，从而背离初衷，中本聪当年恐怕无法想象自己发明的比特币，会被炒高到如此地步，在资本和利益的驱使下，以区块链之名，无数山寨币如雨后春笋般涌现，在缺乏市场监管和审查机制下，对区块链一无所知的资本家收割走了一波又一波韭菜，本应对社会发展起积极作用的技术，演变成了人们用来对赌的金融工具，人类逐利的本能在这场资本的盛宴中显露无遗。</p><p>区块链技术滥觞于电子货币领域，虽然去中心化的设计，使其具有足够的安全性，但因大量资本家入场，各类代币不受限制的发行，技术和安全意识却没有跟上，在矿力、钱包、交易等方面暴露出了许多安全风险，前段时间的BEC 智能合约爆发的数值溢出漏洞，使其60多亿市值一朝化为乌有，而同样基于ERC20智能合约的电子货币都存在类似的安全风险，而黑客攻击电子货币，非法窃取巨额财富的报道更是不绝于耳，因此区块链的安全问题，是任何一个参与者必须重视的。</p><p>本文只是作为一个门外汉的心态。基于目前的现实环境，对区块链和电子货币安全问题的一点想法，文中可能包含了诸多错误和不当之处，长见笑于大方，仅希望能对整个区块链安全行业做一点微小的贡献，以供同业者参考。</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><h3 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h3><h4 id="溢出漏洞"><a href="#溢出漏洞" class="headerlink" title="溢出漏洞"></a>溢出漏洞</h4><h4 id="权限控制不当"><a href="#权限控制不当" class="headerlink" title="权限控制不当"></a>权限控制不当</h4><h4 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h4><h3 id="交易所"><a href="#交易所" class="headerlink" title="交易所"></a>交易所</h3><h3 id="钱包"><a href="#钱包" class="headerlink" title="钱包"></a>钱包</h3><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><h3 id="山寨币"><a href="#山寨币" class="headerlink" title="山寨币"></a>山寨币</h3><h3 id="传统安全"><a href="#传统安全" class="headerlink" title="传统安全"></a>传统安全</h3><h2 id="区块链安全思考"><a href="#区块链安全思考" class="headerlink" title="区块链安全思考"></a>区块链安全思考</h2><h3 id="风控"><a href="#风控" class="headerlink" title="风控"></a>风控</h3><p>对异常交易的审计，做风控策略,防止漏洞利用。</p><h3 id="合约自动审计"><a href="#合约自动审计" class="headerlink" title="合约自动审计"></a>合约自动审计</h3><p>自动化的合约审计系统</p><h3 id="威胁情报"><a href="#威胁情报" class="headerlink" title="威胁情报"></a>威胁情报</h3><h3 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐"></a>蜜罐</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前而言，对于整个区块链的安全攻防还处于初级阶段，很多暴露出的问题都只是一些较为初级的安全缺陷，参考其他行业的安全态势发展，这是在正常不过的情形，事物的发展往往都遵循着渐变的过程，在今后对区块链的安全攻防可能会涉及到更底层更核心的深水区，这一过程需要所有的从业者从现在开始引起高度重视，也希望安全行业能够把更多的目光投向区块链，区块链技术是未来技术革新重要方向，希望其能够长足的发展，更好的应用于现实社会中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>智能合约逆向  <a href="https://arvanaghi.com/blog/reversing-ethereum-smart-contracts/" target="_blank" rel="noopener">https://arvanaghi.com/blog/reversing-ethereum-smart-contracts/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;什么是区块链？区块链是分布式数据存储、点对点传输、共识机制、加密算法等计算机技术的新型应用模式。其最重要的特点：去中心化，为人类创造了一个最
      
    
    </summary>
    
      <category term="区块链安全" scheme="http://yaseng.org/categories/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="区块链安全" scheme="http://yaseng.org/tags/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/"/>
    
      <category term="智能合约审计" scheme="http://yaseng.org/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>MikroTik RouterOS &lt; 6.38.4 (x86) 远程代码执行漏洞分析</title>
    <link href="http://yaseng.org/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html"/>
    <id>http://yaseng.org/MikroTik-RouterOS-lt-6.38.4-remote-code-execution.html</id>
    <published>2018-04-14T16:00:00.000Z</published>
    <updated>2018-06-29T10:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligence Agency)执行电子监视和网络战的细节活动和能力。Chimay Red是Vault 7中泄漏的CIA Hacking Tools中包含的一个用于exploit运行Router OS的MikroTik(MT) 路由器的一个工具，此工具可用来向MT路由器上传HIVE（Vault7中泄漏出的一个CIA远程控制工具）或者shellcode等payload。Vault7泄露的文档中只包含了<a href="https://wikileaks.org/ciav7p1/cms/page_16384604.html" target="_blank" rel="noopener">工具的使用手册</a>，但此工具并未公开。BigNerd95在github上的<a href="https://github.com/BigNerd95/Chimay-Red" target="_blank" rel="noopener">Chiamy Red项目</a>根据RouterOS的补丁对Chimay Red中使用的漏洞进行了揭露并给出了poc。</p><p>本文主要是对BigNerd95的Chiamy Red项目中使用的 Stack Clash Remote Code Execution漏洞及给出的exp进行细节分析。 环境搭建及使用的漏洞具体可参考<a href="https://github.com/BigNerd95/Chimay-Red/blob/36faf04e9ffb224811e0ac074a62126fdca7a92f/docs/ChimayRed.pdf" target="_blank" rel="noopener">这里</a>。此漏洞存在于RouterOS 6.38.4版本以下，在<a href="https://mikrotik.com/download/changelogs/current-release-tree" target="_blank" rel="noopener">6.38.5版本</a>中被修补。 </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从BigNerd95给出的文档中，我们可以知道此漏洞存在于www二进制文件中的Request::readPostData函数中。我们可以使用Chiamy Red项目中的getROSbin.py工具从RouterOS镜像中提取www二进制文件，命令如下：<br><code>$ ./tools/getROSbin.py 6.38.4 x86 /nova/bin/www www_binary</code><br>使用IDA查看Request::readPostData函数 :<img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/1.png" alt="1"></p><p>可以看到，该函数先使用Headers::getHeader函数获取content_length字段的值，然后并未对值进行判断就传入了alloca函数，随后使用istream:read函数将content_len_velue长度的数据读取到了当前函数的栈帧中。</p><p>alloca函数具体进行的操作如下图:<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/2.png" alt="2"><br>alloca函数将content_len_velue进行对齐之后，在当前栈帧上分配了对应大小的空间，这将允许我们直接控制当前栈帧的栈顶位置。</p><p>如果我们传入content_length的值为2147483648[-2147483648]到4294967295[-1]之间的任意值，则栈顶指针将不是向上增长而是向下移动指向已使用的栈区位置，然后istream::read会从socket读取content_len_velue长度的数据到当前栈顶指定的缓冲区内，这将引起栈粉碎。并且由于istream::read的第二个参数类型为uint，istream::read会读取至少2147483648字节的数据到栈上，这很明显会超出当前栈底，在istream::read函数返回之前生成一个SEGFAULT错误。现在看来这似乎是一个不可执行代码的漏洞，那么如何才能达到代码执行的目的呢？<br>可以先看一下Chiamy Red项目中的exp是怎么写的。如下图，先创建两个socket，分别向两个socket发送了指定了content_length的post header数据，并向s1发送了n个‘A’和payload，然后将s2关闭。从注释也可看出，其利用方式和线程栈有关。 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/3.png" alt="3"></p><p>再来看看Request::readPostData函数是在哪里被调用的，使用IDA查看Request::readPostData的交叉引用发现www中没有引用此函数的位置。现在我们动态调试下，看看此函数在哪里被调用。telnet连接上RouterOS,把RouterOS的ALSR保护关闭掉，然后kill掉www进程之后系统会自动重启www程序（以下所有图片为多次调试www程序所截图像，所以进程号会有所不同，但并不影响我们的分析） </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/4.png" alt="4"></p><p>使用gdbserver附加到www进程上，使用gdb远程调试。 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/5.png" alt="5"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/6.png" alt="6"></p><p>我们把断点下在调用alloca函数处 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/7.png" alt="7"></p><p>然后使用Chiamy Red项目中的exp把payload打到目标上 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/8.png" alt="8"></p><p>可以看到有两个新线程被创建，并且在线程2中触发了断点，说明Request::readPostData函数是在新线程中被调用的，并且栈顶寄存器指向0x77d86180 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/9.png" alt="9"></p><p>我们看一下0x77d86180在内存空间的哪个位置 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/10.png" alt="10"></p><p>可以看到0x77d86180并不位于进程内存空间的栈区，而是位于库文件加载区域中的一段空闲内存空间中，并且我们可以计算出分配给线程2的线程栈内存大小为0x77d87000-0x77d68000=0x1f000=124kb,继续运行www发现在线程3中断点又被触发了一次，且此次的栈顶寄存器指向0x77d66180，可以看到线程3的线程栈位于线程2的线程栈的上方且大小同为0x77d67000-0x77d48000=0x1f000=124kb,中间相隔0x77d68000-0x77d67000=0x1000=4kb的保护区。 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/11.png" alt="11"></p><p>现在线程栈在内存空间中的布局清楚了。现在从新开启调试，在alloca调用处下断点，continue并且重新打上payload，程序中断在线程2的alloca调用处，向下单步3条指令 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/12.png" alt="12"></p><p>此时线程3中的断点被触发，并且调试线程切换到了线程3,因为我们现在要调试线程2,所以先把线程3暂停，设置gdb的调度器锁到on状态，然后切换回线程2继续调试 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/13.png" alt="13"></p><p>单步到sub %eax,%esp指令处查看当前esp的值为0x77d86180，对照进程的内存空间布局，可以看到现在esp依然指向线程2的线程栈内，单步步过sub指令，然后再次查看esp的值为0x77d5d170，现在esp已经指向线程3的线程栈内了<br><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/14.png" alt="14"></p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/15.png" alt="15"></p><p>继续向下运行到istream::read函数调用处，查看栈中函数的参数，可以看到read函数会读取0x29000字节的数据到0x77d5d170处，正好是刚才alloca函数调整过的栈顶位置 0x77d5d170 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/16.png" alt="16"></p><p>继续单步步过read函数，重新查看0x77d5d170处有什么数据，发现此位置的数据并没有更新，read函数读取失败了，我们先把这个问题暂时放在这里，继续我们下面的调试，因为我们主要关注地址偏移量 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/17.png" alt="17"></p><p>查看下exp脚本都向s1发送了什么数据，注意到发往s1的数据部分是分两次发送的，两次发送期间向s2发送了构造的http头，现在我们来计算一下向s1发送了n个‘A’之后，read函数会读取到多少个‘A’,由脚本的宏定义可以计算出SKIP_SPACE-ALIGN_SIZE-ADDRESS_SIZE=0xfec,read函数在读取0xfec个‘A’之后，edi寄存器指向的位置在0x77d5d170+0xfec=0x77d5e15c，注意read再往后读取的数据就是shellcode了，就是说0x77d5e15c是shellcode的起始位置，并且此位置位于线程3的线程栈内 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/18.png" alt="18"></p><p>现在切换到线程3,继续调试，看看0x77d5e15c在线程3的线程栈中扮演了什么角色 </p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/19.png" alt="19"></p><p>线程3的栈顶在经过调整之后指向0x77d5e170处，此处已经离0x77d5e15c不远了。继续运行到read函数的调用处，查看栈中的数据，发现此时栈顶指针指向0x77d5e160处，离0x77d5e15c只有四个字节，在调用call read指令后将read函数的返回地址存储到0x77d5e15c的位置，刚才分析到0x77d5e15c是shellcode的起始地址，此处可以劫持read函数的返回地址达到任意代码执行的目的。由于线程3的read函数会向0x77d5e170处写入数据，此处内存空间也是存储shellcode的空间，因此，不能向s2发送任何数据http协议的数据部分，否则将会赋盖shellcode，Chiamy Red项目中exp的作者使用close(s2)的方式来让线程3中的read函数返回，以运行shellcode。</p><p><img src="https://img-1253984064.cos.ap-guangzhou.myqcloud.com/pic5/20.png" alt="20"></p><p>关于调试过程中出现的read函数读取失败的问题，可能是由于中断的时间太长导致socket超时引起的，直接把断点下在read函数调用下面，直接run至断点处，就能看到read函数读取成功了。</p><h2 id="exploit分析"><a href="#exploit分析" class="headerlink" title="exploit分析"></a>exploit分析</h2><p>最后正向梳理下exp作者的利用思路。传入负值可以复写当前线程栈的函数返回地址，但由于read函数的第二个参数类型为uint，写入内存的长度超长会在read函数返回之前就引发段错误导致程序异常退出；由于线程栈内存段是相邻的，且同一进程中的所有线程共享资源，那么可以赋写其他线程栈的函数返回地址，因为alloca函数可以分配栈空间，先通过content_length参数在线程2的线程栈上分配出容纳shellcode的内存空间，然后确定read函数的返回地址的存储位置ADDR，利用content_length调整线程1的线程栈栈顶寄存器指向ADDR之后的地址，然后使用‘A’作填充，使shellcode正好覆盖到ADDR处存储的返回地址达到任意代码执行的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;《Vault 7》是由维基解密从2017年3月7日开始，发布的一系列文件。其中详细描述了美国中央情报局(Central Intelligen
      
    
    </summary>
    
      <category term="物联网安全" scheme="http://yaseng.org/categories/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="物联网安全" scheme="http://yaseng.org/tags/%E7%89%A9%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8/"/>
    
      <category term="路由器漏洞" scheme="http://yaseng.org/tags/%E8%B7%AF%E7%94%B1%E5%99%A8%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
